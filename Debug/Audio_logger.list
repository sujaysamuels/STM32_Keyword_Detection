
Audio_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdfc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001628  0800cfc0  0800cfc0  0001cfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5e8  0800e5e8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5e8  0800e5e8  0001e5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5f0  0800e5f0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5f0  0800e5f0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000403c  200001ec  0800e7e4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004228  0800e7e4  00024228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000087  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cbf  00000000  00000000  000202a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f2b  00000000  00000000  00039f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118a  00000000  00000000  0003e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e5c6  00000000  00000000  0003f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001accc  00000000  00000000  0006dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e8dd  00000000  00000000  0008893c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000793c  00000000  00000000  001a721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001aeb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cfa4 	.word	0x0800cfa4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	0800cfa4 	.word	0x0800cfa4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f001 fb26 	bl	8002676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f911 	bl	8001250 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800102e:	f000 f971 	bl	8001314 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fcc7 	bl	80019c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001036:	f000 f99d 	bl	8001374 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800103a:	f000 f9ff 	bl	800143c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800103e:	f000 fa35 	bl	80014ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8001042:	f000 fa73 	bl	800152c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001046:	f000 fab1 	bl	80015ac <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800104a:	f000 fb05 	bl	8001658 <MX_SPI1_Init>
  MX_SPI3_Init();
 800104e:	f000 fb41 	bl	80016d4 <MX_SPI3_Init>
  MX_UART4_Init();
 8001052:	f000 fb7d 	bl	8001750 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001056:	f000 fbc7 	bl	80017e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800105a:	f000 fc11 	bl	8001880 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800105e:	f000 fc5d 	bl	800191c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001062:	f000 fca7 	bl	80019b4 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  enum neai_state error_code = neai_classification_init(knowledge);
 8001066:	486e      	ldr	r0, [pc, #440]	; (8001220 <main+0x200>)
 8001068:	f006 fc3e 	bl	80078e8 <neai_classification_init>
 800106c:	4603      	mov	r3, r0
 800106e:	717b      	strb	r3, [r7, #5]
  	if (error_code != NEAI_OK) {
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <main+0x5c>
  		 //This happens if the knowledge does not correspond to the library or if the library works into a not supported board. */
  		printf("Fail!");
 8001076:	486b      	ldr	r0, [pc, #428]	; (8001224 <main+0x204>)
 8001078:	f008 f82c 	bl	80090d4 <iprintf>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  fill_mic();
 800107c:	f000 fde4 	bl	8001c48 <fill_mic>
	  /*for (int i = 1; i < DATA_INPUT_USER; i++) {
	  		printf("%.2f",input_user_buffer[AXIS_NUMBER * i]);
	  		printf(" ");
	  	}*/
	  neai_classification(input_user_buffer, output_class_buffer, &id_class);
 8001080:	4a69      	ldr	r2, [pc, #420]	; (8001228 <main+0x208>)
 8001082:	496a      	ldr	r1, [pc, #424]	; (800122c <main+0x20c>)
 8001084:	486a      	ldr	r0, [pc, #424]	; (8001230 <main+0x210>)
 8001086:	f006 fcf9 	bl	8007a7c <neai_classification>
	 // neai_classification( input_user_buffer, output_class_buffer, &newClass);

	   		  /* Print info on class similarity calculation */
	   		  for( uint16_t class_cpt = 0; class_cpt < CLASS_NUMBER; class_cpt++ ){
 800108a:	2300      	movs	r3, #0
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	e011      	b.n	80010b4 <main+0x94>
	   			  printf( "%d: %.3f ", class_cpt, output_class_buffer[ class_cpt ]);
 8001090:	88fc      	ldrh	r4, [r7, #6]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4a65      	ldr	r2, [pc, #404]	; (800122c <main+0x20c>)
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa6b 	bl	8000578 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4621      	mov	r1, r4
 80010a8:	4862      	ldr	r0, [pc, #392]	; (8001234 <main+0x214>)
 80010aa:	f008 f813 	bl	80090d4 <iprintf>
	   		  for( uint16_t class_cpt = 0; class_cpt < CLASS_NUMBER; class_cpt++ ){
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	3301      	adds	r3, #1
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d9ea      	bls.n	8001090 <main+0x70>
	   		  }
	   		 // printf( "\n");
	   		  printf( "Class found: %s.\n\n", id2class[ id_class]);
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <main+0x208>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <main+0x218>)
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	4619      	mov	r1, r3
 80010c8:	485c      	ldr	r0, [pc, #368]	; (800123c <main+0x21c>)
 80010ca:	f008 f803 	bl	80090d4 <iprintf>
	   		  if(output_class_buffer[ 0]> 0.500)
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <main+0x20c>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	dd1f      	ble.n	8001122 <main+0x102>
	   		  {
	   			//printf("Right\n");
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2120      	movs	r1, #32
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f003 f94b 	bl	8004384 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f003 f945 	bl	8004384 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f003 f93f 	bl	8004384 <HAL_GPIO_WritePin>
	   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2104      	movs	r1, #4
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f003 f939 	bl	8004384 <HAL_GPIO_WritePin>
	   			printf("F\n");
 8001112:	484b      	ldr	r0, [pc, #300]	; (8001240 <main+0x220>)
 8001114:	f008 f844 	bl	80091a0 <puts>
	   			HAL_Delay(1000);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f001 fb20 	bl	8002760 <HAL_Delay>
 8001120:	e7ac      	b.n	800107c <main+0x5c>
	   		  }
	   		  else if(output_class_buffer[ 1]> 0.500)
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <main+0x20c>)
 8001124:	edd3 7a01 	vldr	s15, [r3, #4]
 8001128:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800112c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	dd1f      	ble.n	8001176 <main+0x156>
	   			 {
	   			  	  	  	//printf("Left\n");
	   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f003 f921 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f003 f91b 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f003 f915 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2104      	movs	r1, #4
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f003 f90f 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			printf("L\n");
 8001166:	4837      	ldr	r0, [pc, #220]	; (8001244 <main+0x224>)
 8001168:	f008 f81a 	bl	80091a0 <puts>
	   			   			HAL_Delay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001170:	f001 faf6 	bl	8002760 <HAL_Delay>
 8001174:	e782      	b.n	800107c <main+0x5c>
	   			    }
	   		 else if(output_class_buffer[ 2]> 0.500)
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x20c>)
 8001178:	edd3 7a02 	vldr	s15, [r3, #8]
 800117c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	dd1f      	ble.n	80011ca <main+0x1aa>
	   			   			 {
	   			   			  	  	  	//printf("Left\n");
	   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2120      	movs	r1, #32
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f003 f8f7 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f003 f8f1 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f003 f8eb 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2104      	movs	r1, #4
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f003 f8e5 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			printf("R\n");
 80011ba:	4823      	ldr	r0, [pc, #140]	; (8001248 <main+0x228>)
 80011bc:	f007 fff0 	bl	80091a0 <puts>
	   			   			   			HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f001 facc 	bl	8002760 <HAL_Delay>
 80011c8:	e758      	b.n	800107c <main+0x5c>

	   			   			    }
	   		else if(output_class_buffer[ 3]> 0.500)
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <main+0x20c>)
 80011cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	dd1e      	ble.n	800121c <main+0x1fc>
	   			   			   			 {
	   			   			   			  	  	  	//printf("Left\n");
	   			   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2120      	movs	r1, #32
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f003 f8cd 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 f8c7 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f003 f8c1 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			   			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f003 f8bb 	bl	8004384 <HAL_GPIO_WritePin>
	   			   			   			   			printf("S\n");
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <main+0x22c>)
 8001210:	f007 ffc6 	bl	80091a0 <puts>
	   			   			   			   			HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f001 faa2 	bl	8002760 <HAL_Delay>
	  fill_mic();
 800121c:	e72e      	b.n	800107c <main+0x5c>
 800121e:	bf00      	nop
 8001220:	0800d024 	.word	0x0800d024
 8001224:	0800cfec 	.word	0x0800cfec
 8001228:	200006b8 	.word	0x200006b8
 800122c:	200016bc 	.word	0x200016bc
 8001230:	200006bc 	.word	0x200006bc
 8001234:	0800cff4 	.word	0x0800cff4
 8001238:	20000000 	.word	0x20000000
 800123c:	0800d000 	.word	0x0800d000
 8001240:	0800d014 	.word	0x0800d014
 8001244:	0800d018 	.word	0x0800d018
 8001248:	0800d01c 	.word	0x0800d01c
 800124c:	0800d020 	.word	0x0800d020

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b096      	sub	sp, #88	; 0x58
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2244      	movs	r2, #68	; 0x44
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f008 f89e 	bl	80093a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001272:	2000      	movs	r0, #0
 8001274:	f003 fefa 	bl	800506c <HAL_PWREx_ControlVoltageScaling>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800127e:	f000 fd27 	bl	8001cd0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001282:	f003 fec3 	bl	800500c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <SystemClock_Config+0xc0>)
 8001288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <SystemClock_Config+0xc0>)
 800128e:	f023 0318 	bic.w	r3, r3, #24
 8001292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001296:	2314      	movs	r3, #20
 8001298:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800129e:	2301      	movs	r3, #1
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012a6:	2360      	movs	r3, #96	; 0x60
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012ae:	2301      	movs	r3, #1
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012b6:	233c      	movs	r3, #60	; 0x3c
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012be:	2302      	movs	r3, #2
 80012c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 ff72 	bl	80051b4 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012d6:	f000 fcfb 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2303      	movs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2105      	movs	r1, #5
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fb78 	bl	80059e8 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012fe:	f000 fce7 	bl	8001cd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001302:	f005 f95f 	bl	80065c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001306:	bf00      	nop
 8001308:	3758      	adds	r7, #88	; 0x58
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0a6      	sub	sp, #152	; 0x98
 8001318:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2294      	movs	r2, #148	; 0x94
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f008 f83d 	bl	80093a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001326:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800132a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800132c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001338:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800133a:	2301      	movs	r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001342:	2318      	movs	r3, #24
 8001344:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001352:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001356:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fe02 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001366:	f000 fcb3 	bl	8001cd0 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3798      	adds	r7, #152	; 0x98
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_ADC1_Init+0xbc>)
 800138c:	4a29      	ldr	r2, [pc, #164]	; (8001434 <MX_ADC1_Init+0xc0>)
 800138e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <MX_ADC1_Init+0xbc>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_ADC1_Init+0xbc>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_ADC1_Init+0xbc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_ADC1_Init+0xbc>)
 80013ec:	f001 fc04 	bl	8002bf8 <HAL_ADC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80013f6:	f000 fc6b 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_ADC1_Init+0xc4>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fe:	2306      	movs	r3, #6
 8001400:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001406:	237f      	movs	r3, #127	; 0x7f
 8001408:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140a:	2304      	movs	r3, #4
 800140c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_ADC1_Init+0xbc>)
 8001418:	f001 fe66 	bl	80030e8 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001422:	f000 fc55 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000208 	.word	0x20000208
 8001434:	50040000 	.word	0x50040000
 8001438:	04300002 	.word	0x04300002

0800143c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <MX_DFSDM1_Init+0x6c>)
 8001444:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001448:	2201      	movs	r2, #1
 800144a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001454:	2202      	movs	r2, #2
 8001456:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001472:	2204      	movs	r2, #4
 8001474:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 800147e:	2201      	movs	r2, #1
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_DFSDM1_Init+0x68>)
 8001490:	f002 fcda 	bl	8003e48 <HAL_DFSDM_ChannelInit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800149a:	f000 fc19 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000270 	.word	0x20000270
 80014a8:	40016040 	.word	0x40016040

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	f002 ff87 	bl	80043fa <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fbed 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C1_Init+0x74>)
 80014fa:	f003 f819 	bl	8004530 <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fbe4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150c:	f003 f85b 	bl	80045c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fbdb 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002a8 	.word	0x200002a8
 8001524:	40005400 	.word	0x40005400
 8001528:	307075b1 	.word	0x307075b1

0800152c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C2_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C2_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C2_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001568:	f002 ff47 	bl	80043fa <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001572:	f000 fbad 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C2_Init+0x74>)
 800157a:	f002 ffd9 	bl	8004530 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001584:	f000 fba4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C2_Init+0x74>)
 800158c:	f003 f81b 	bl	80045c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 fb9b 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002fc 	.word	0x200002fc
 80015a4:	40005800 	.word	0x40005800
 80015a8:	307075b1 	.word	0x307075b1

080015ac <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015c2:	4a24      	ldr	r2, [pc, #144]	; (8001654 <MX_OCTOSPI1_Init+0xa8>)
 80015c4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015d8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015dc:	2220      	movs	r2, #32
 80015de:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 800160c:	2208      	movs	r2, #8
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 8001612:	f003 f825 	bl	8004660 <HAL_OSPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800161c:	f000 fb58 	bl	8001cd0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001628:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800162c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_OCTOSPI1_Init+0xa4>)
 8001638:	f003 f8cc 	bl	80047d4 <HAL_OSPIM_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001642:	f000 fb45 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000350 	.word	0x20000350
 8001654:	a0001000 	.word	0xa0001000

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_SPI1_Init+0x74>)
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <MX_SPI1_Init+0x78>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_SPI1_Init+0x74>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_SPI1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_SPI1_Init+0x74>)
 8001672:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001676:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_SPI1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_SPI1_Init+0x74>)
 8001686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI1_Init+0x74>)
 800168e:	2208      	movs	r2, #8
 8001690:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_SPI1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI1_Init+0x74>)
 80016a6:	2207      	movs	r2, #7
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_SPI1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI1_Init+0x74>)
 80016b2:	2208      	movs	r2, #8
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_SPI1_Init+0x74>)
 80016b8:	f005 f97c 	bl	80069b4 <HAL_SPI_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016c2:	f000 fb05 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200003a0 	.word	0x200003a0
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_SPI3_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_SPI3_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_SPI3_Init+0x74>)
 80016e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_SPI3_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI3_Init+0x74>)
 80016ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI3_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_SPI3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI3_Init+0x74>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI3_Init+0x74>)
 800170a:	2208      	movs	r2, #8
 800170c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI3_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI3_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_SPI3_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI3_Init+0x74>)
 8001722:	2207      	movs	r2, #7
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SPI3_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI3_Init+0x74>)
 800172e:	2208      	movs	r2, #8
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_SPI3_Init+0x74>)
 8001734:	f005 f93e 	bl	80069b4 <HAL_SPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 fac7 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000404 	.word	0x20000404
 800174c:	40003c00 	.word	0x40003c00

08001750 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <MX_UART4_Init+0x90>)
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <MX_UART4_Init+0x94>)
 8001758:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <MX_UART4_Init+0x90>)
 800175c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001760:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_UART4_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_UART4_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_UART4_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_UART4_Init+0x90>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_UART4_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_UART4_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_UART4_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_UART4_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_UART4_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001798:	4811      	ldr	r0, [pc, #68]	; (80017e0 <MX_UART4_Init+0x90>)
 800179a:	f005 f9ae 	bl	8006afa <HAL_UART_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017a4:	f000 fa94 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_UART4_Init+0x90>)
 80017ac:	f005 ffd2 	bl	8007754 <HAL_UARTEx_SetTxFifoThreshold>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80017b6:	f000 fa8b 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ba:	2100      	movs	r1, #0
 80017bc:	4808      	ldr	r0, [pc, #32]	; (80017e0 <MX_UART4_Init+0x90>)
 80017be:	f006 f807 	bl	80077d0 <HAL_UARTEx_SetRxFifoThreshold>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80017c8:	f000 fa82 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_UART4_Init+0x90>)
 80017ce:	f005 ff88 	bl	80076e2 <HAL_UARTEx_DisableFifoMode>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f000 fa7a 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000468 	.word	0x20000468
 80017e4:	40004c00 	.word	0x40004c00

080017e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <MX_USART1_UART_Init+0x90>)
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <MX_USART1_UART_Init+0x94>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_USART1_UART_Init+0x90>)
 80017f4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_USART1_UART_Init+0x90>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_USART1_UART_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART1_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001832:	f005 f962 	bl	8006afa <HAL_UART_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 fa48 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001844:	f005 ff86 	bl	8007754 <HAL_UARTEx_SetTxFifoThreshold>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800184e:	f000 fa3f 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001856:	f005 ffbb 	bl	80077d0 <HAL_UARTEx_SetRxFifoThreshold>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001860:	f000 fa36 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_USART1_UART_Init+0x90>)
 8001866:	f005 ff3c 	bl	80076e2 <HAL_UARTEx_DisableFifoMode>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 fa2e 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200004fc 	.word	0x200004fc
 800187c:	40013800 	.word	0x40013800

08001880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <MX_USART2_UART_Init+0x94>)
 8001886:	4a24      	ldr	r2, [pc, #144]	; (8001918 <MX_USART2_UART_Init+0x98>)
 8001888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <MX_USART2_UART_Init+0x94>)
 800188c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <MX_USART2_UART_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_USART2_UART_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018cc:	f005 f915 	bl	8006afa <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80018d6:	f000 f9fb 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018de:	f005 ff39 	bl	8007754 <HAL_UARTEx_SetTxFifoThreshold>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80018e8:	f000 f9f2 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <MX_USART2_UART_Init+0x94>)
 80018f0:	f005 ff6e 	bl	80077d0 <HAL_UARTEx_SetRxFifoThreshold>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80018fa:	f000 f9e9 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_USART2_UART_Init+0x94>)
 8001900:	f005 feef 	bl	80076e2 <HAL_UARTEx_DisableFifoMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800190a:	f000 f9e1 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000590 	.word	0x20000590
 8001918:	40004400 	.word	0x40004400

0800191c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <MX_USART3_UART_Init+0x94>)
 8001924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001928:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800192c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_USART3_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_USART3_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_USART3_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001964:	4811      	ldr	r0, [pc, #68]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001966:	f005 f8c8 	bl	8006afa <HAL_UART_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001970:	f000 f9ae 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_USART3_UART_Init+0x90>)
 8001978:	f005 feec 	bl	8007754 <HAL_UARTEx_SetTxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001982:	f000 f9a5 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <MX_USART3_UART_Init+0x90>)
 800198a:	f005 ff21 	bl	80077d0 <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001994:	f000 f99c 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_USART3_UART_Init+0x90>)
 800199a:	f005 fea2 	bl	80076e2 <HAL_UARTEx_DisableFifoMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f994 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000624 	.word	0x20000624
 80019b0:	40004800 	.word	0x40004800

080019b4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <MX_GPIO_Init+0x270>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a95      	ldr	r2, [pc, #596]	; (8001c34 <MX_GPIO_Init+0x270>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b93      	ldr	r3, [pc, #588]	; (8001c34 <MX_GPIO_Init+0x270>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b90      	ldr	r3, [pc, #576]	; (8001c34 <MX_GPIO_Init+0x270>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a8f      	ldr	r2, [pc, #572]	; (8001c34 <MX_GPIO_Init+0x270>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a89      	ldr	r2, [pc, #548]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b87      	ldr	r3, [pc, #540]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b84      	ldr	r3, [pc, #528]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a83      	ldr	r2, [pc, #524]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <MX_GPIO_Init+0x270>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f240 1105 	movw	r1, #261	; 0x105
 8001a70:	4871      	ldr	r0, [pc, #452]	; (8001c38 <MX_GPIO_Init+0x274>)
 8001a72:	f002 fc87 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001a76:	2200      	movs	r2, #0
 8001a78:	f248 111c 	movw	r1, #33052	; 0x811c
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f002 fc80 	bl	8004384 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001a84:	2200      	movs	r2, #0
 8001a86:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001a8a:	486c      	ldr	r0, [pc, #432]	; (8001c3c <MX_GPIO_Init+0x278>)
 8001a8c:	f002 fc7a 	bl	8004384 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f242 0183 	movw	r1, #8323	; 0x2083
 8001a96:	486a      	ldr	r0, [pc, #424]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001a98:	f002 fc74 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001aa2:	4868      	ldr	r0, [pc, #416]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001aa4:	f002 fc6e 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001aa8:	f240 1305 	movw	r3, #261	; 0x105
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	485d      	ldr	r0, [pc, #372]	; (8001c38 <MX_GPIO_Init+0x274>)
 8001ac2:	f002 facd 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001ac6:	237a      	movs	r3, #122	; 0x7a
 8001ac8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4857      	ldr	r0, [pc, #348]	; (8001c38 <MX_GPIO_Init+0x274>)
 8001adc:	f002 fac0 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ae0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4853      	ldr	r0, [pc, #332]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001af8:	f002 fab2 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001afc:	f248 131c 	movw	r3, #33052	; 0x811c
 8001b00:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b18:	f002 faa2 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4842      	ldr	r0, [pc, #264]	; (8001c3c <MX_GPIO_Init+0x278>)
 8001b32:	f002 fa95 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	483a      	ldr	r0, [pc, #232]	; (8001c3c <MX_GPIO_Init+0x278>)
 8001b52:	f002 fa85 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001b56:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001b5a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4833      	ldr	r0, [pc, #204]	; (8001c3c <MX_GPIO_Init+0x278>)
 8001b70:	f002 fa76 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001b74:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001b78:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482d      	ldr	r0, [pc, #180]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001b8c:	f002 fa68 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001b90:	f242 0383 	movw	r3, #8323	; 0x2083
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4825      	ldr	r0, [pc, #148]	; (8001c40 <MX_GPIO_Init+0x27c>)
 8001baa:	f002 fa59 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001bae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481f      	ldr	r0, [pc, #124]	; (8001c44 <MX_GPIO_Init+0x280>)
 8001bc8:	f002 fa4a 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f002 fa3c 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001be8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 fa2a 	bl	8004060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2017      	movs	r0, #23
 8001c12:	f002 f8e2 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c16:	2017      	movs	r0, #23
 8001c18:	f002 f8fb 	bl	8003e12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2028      	movs	r0, #40	; 0x28
 8001c22:	f002 f8da 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c26:	2028      	movs	r0, #40	; 0x28
 8001c28:	f002 f8f3 	bl	8003e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48001000 	.word	0x48001000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000c00 	.word	0x48000c00
 8001c44:	48000800 	.word	0x48000800

08001c48 <fill_mic>:
		mic_data[AXIS_NUMBER * i] = HAL_ADC_GetValue(&hadc1);
		//HAL_Delay(5);
	}
}
*/
void fill_mic() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e01d      	b.n	8001c90 <fill_mic+0x48>
        HAL_ADC_Start(&hadc1);
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <fill_mic+0x5c>)
 8001c56:	f001 f915 	bl	8002e84 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5e:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <fill_mic+0x5c>)
 8001c60:	f001 f9a6 	bl	8002fb0 <HAL_ADC_PollForConversion>
        input_user_buffer[AXIS_NUMBER * i] = HAL_ADC_GetValue(&hadc1);
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <fill_mic+0x5c>)
 8001c66:	f001 fa32 	bl	80030ce <HAL_ADC_GetValue>
 8001c6a:	ee07 0a90 	vmov	s15, r0
 8001c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c72:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <fill_mic+0x60>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
        HAL_ADC_Stop(&hadc1);
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <fill_mic+0x5c>)
 8001c80:	f001 f963 	bl	8002f4a <HAL_ADC_Stop>
        HAL_Delay(1); // Add a small delay between consecutive ADC readings
 8001c84:	2001      	movs	r0, #1
 8001c86:	f000 fd6b 	bl	8002760 <HAL_Delay>
    for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	dbdd      	blt.n	8001c54 <fill_mic+0xc>
    }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000208 	.word	0x20000208
 8001ca8:	200006bc 	.word	0x200006bc

08001cac <__io_putchar>:



	HAL_Delay(500);
}
int __io_putchar(int ch){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8001cb4:	1d39      	adds	r1, r7, #4
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <__io_putchar+0x20>)
 8001cbe:	f004 ff6c 	bl	8006b9a <HAL_UART_Transmit>
	return ch;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200004fc 	.word	0x200004fc

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_ADC_MspInit+0x74>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d123      	bne.n	8001d8e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_ADC_MspInit+0x78>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001d76:	233f      	movs	r3, #63	; 0x3f
 8001d78:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d7a:	230b      	movs	r3, #11
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_ADC_MspInit+0x7c>)
 8001d8a:	f002 f969 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	50040000 	.word	0x50040000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000800 	.word	0x48000800

08001da4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0ae      	sub	sp, #184	; 0xb8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	2294      	movs	r2, #148	; 0x94
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f007 faeb 	bl	80093a0 <memset>
  if(DFSDM1_Init == 0)
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d142      	bne.n	8001e58 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 f8be 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001dee:	f7ff ff6f 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e22:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e3c:	2306      	movs	r3, #6
 8001e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001e4a:	f002 f909 	bl	8004060 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a02      	ldr	r2, [pc, #8]	; (8001e60 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e56:	6013      	str	r3, [r2, #0]
  }

}
 8001e58:	bf00      	nop
 8001e5a:	37b8      	adds	r7, #184	; 0xb8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200016d0 	.word	0x200016d0
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48001000 	.word	0x48001000

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0b0      	sub	sp, #192	; 0xc0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	2294      	movs	r2, #148	; 0x94
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f007 fa87 	bl	80093a0 <memset>
  if(hi2c->Instance==I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_I2C_MspInit+0x134>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d13c      	bne.n	8001f16 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e9c:	2340      	movs	r3, #64	; 0x40
 8001e9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f85b 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001eb4:	f7ff ff0c 	bl	8001cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eea:	2304      	movs	r3, #4
 8001eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482c      	ldr	r0, [pc, #176]	; (8001fa8 <HAL_I2C_MspInit+0x13c>)
 8001ef8:	f002 f8b2 	bl	8004060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f14:	e040      	b.n	8001f98 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d13b      	bne.n	8001f98 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 f819 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001f38:	f7ff feca 	bl	8001cd0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5c:	2312      	movs	r3, #18
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <HAL_I2C_MspInit+0x13c>)
 8001f7c:	f002 f870 	bl	8004060 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	37c0      	adds	r7, #192	; 0xc0
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40005400 	.word	0x40005400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	40005800 	.word	0x40005800

08001fb0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0b0      	sub	sp, #192	; 0xc0
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	2294      	movs	r2, #148	; 0x94
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f007 f9e5 	bl	80093a0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_OSPI_MspInit+0xcc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d149      	bne.n	8002074 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 ffb7 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001ffc:	f7ff fe68 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 8002006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800200a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 800201a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6513      	str	r3, [r2, #80]	; 0x50
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 8002026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_OSPI_MspInit+0xd0>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002048:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800204c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002062:	230a      	movs	r3, #10
 8002064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002068:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206c:	4619      	mov	r1, r3
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_OSPI_MspInit+0xd4>)
 8002070:	f001 fff6 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	37c0      	adds	r7, #192	; 0xc0
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	a0001000 	.word	0xa0001000
 8002080:	40021000 	.word	0x40021000
 8002084:	48001000 	.word	0x48001000

08002088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_SPI_MspInit+0xdc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d129      	bne.n	80020fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b4:	6613      	str	r3, [r2, #96]	; 0x60
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80020da:	23e0      	movs	r3, #224	; 0xe0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ea:	2305      	movs	r3, #5
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	f001 ffb2 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020fc:	e02d      	b.n	800215a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_SPI_MspInit+0xe4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d128      	bne.n	800215a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_SPI_MspInit+0xe0>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002138:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800214a:	2306      	movs	r3, #6
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4806      	ldr	r0, [pc, #24]	; (8002170 <HAL_SPI_MspInit+0xe8>)
 8002156:	f001 ff83 	bl	8004060 <HAL_GPIO_Init>
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40013000 	.word	0x40013000
 8002168:	40021000 	.word	0x40021000
 800216c:	40003c00 	.word	0x40003c00
 8002170:	48000800 	.word	0x48000800

08002174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0b4      	sub	sp, #208	; 0xd0
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800218c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002190:	2294      	movs	r2, #148	; 0x94
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f007 f903 	bl	80093a0 <memset>
  if(huart->Instance==UART4)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a83      	ldr	r2, [pc, #524]	; (80023ac <HAL_UART_MspInit+0x238>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d13c      	bne.n	800221e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021a4:	2308      	movs	r3, #8
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fed7 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021bc:	f7ff fd88 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	4a74      	ldr	r2, [pc, #464]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e4:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002208:	2308      	movs	r3, #8
 800220a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f001 ff22 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800221c:	e0c2      	b.n	80023a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a64      	ldr	r2, [pc, #400]	; (80023b4 <HAL_UART_MspInit+0x240>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d13b      	bne.n	80022a0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002228:	2301      	movs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800222c:	2300      	movs	r3, #0
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fe95 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002240:	f7ff fd46 	bl	8001cd0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002244:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	4a59      	ldr	r2, [pc, #356]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	6613      	str	r3, [r2, #96]	; 0x60
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002268:	4b51      	ldr	r3, [pc, #324]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002274:	23c0      	movs	r3, #192	; 0xc0
 8002276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800228c:	2307      	movs	r3, #7
 800228e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002296:	4619      	mov	r1, r3
 8002298:	4847      	ldr	r0, [pc, #284]	; (80023b8 <HAL_UART_MspInit+0x244>)
 800229a:	f001 fee1 	bl	8004060 <HAL_GPIO_Init>
}
 800229e:	e081      	b.n	80023a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_UART_MspInit+0x248>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d13b      	bne.n	8002322 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fe54 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80022c2:	f7ff fd05 	bl	8001cd0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80022f6:	2378      	movs	r3, #120	; 0x78
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002314:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002318:	4619      	mov	r1, r3
 800231a:	4829      	ldr	r0, [pc, #164]	; (80023c0 <HAL_UART_MspInit+0x24c>)
 800231c:	f001 fea0 	bl	8004060 <HAL_GPIO_Init>
}
 8002320:	e040      	b.n	80023a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_UART_MspInit+0x250>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d13b      	bne.n	80023a4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800232c:	2304      	movs	r3, #4
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002330:	2300      	movs	r3, #0
 8002332:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fe13 	bl	8005f64 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002344:	f7ff fcc4 	bl	8001cd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_UART_MspInit+0x23c>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002378:	f44f 7340 	mov.w	r3, #768	; 0x300
 800237c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002392:	2307      	movs	r3, #7
 8002394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002398:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800239c:	4619      	mov	r1, r3
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <HAL_UART_MspInit+0x24c>)
 80023a0:	f001 fe5e 	bl	8004060 <HAL_GPIO_Init>
}
 80023a4:	bf00      	nop
 80023a6:	37d0      	adds	r7, #208	; 0xd0
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40004c00 	.word	0x40004c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40013800 	.word	0x40013800
 80023b8:	48000400 	.word	0x48000400
 80023bc:	40004400 	.word	0x40004400
 80023c0:	48000c00 	.word	0x48000c00
 80023c4:	40004800 	.word	0x40004800

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f000 f984 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002420:	2020      	movs	r0, #32
 8002422:	f001 ffc7 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002426:	2040      	movs	r0, #64	; 0x40
 8002428:	f001 ffc4 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800242c:	2080      	movs	r0, #128	; 0x80
 800242e:	f001 ffc1 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002432:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002436:	f001 ffbd 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}

0800243e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002442:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002446:	f001 ffb5 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800244a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800244e:	f001 ffb1 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002452:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002456:	f001 ffad 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800245a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800245e:	f001 ffa9 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002466:	f001 ffa5 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800246a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800246e:	f001 ffa1 	bl	80043b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}

08002476 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_kill>:

int _kill(int pid, int sig)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002490:	f006 ffd8 	bl	8009444 <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	2216      	movs	r2, #22
 8002498:	601a      	str	r2, [r3, #0]
  return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_exit>:

void _exit (int status)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ae:	f04f 31ff 	mov.w	r1, #4294967295
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffe7 	bl	8002486 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b8:	e7fe      	b.n	80024b8 <_exit+0x12>

080024ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e00a      	b.n	80024e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024cc:	f3af 8000 	nop.w
 80024d0:	4601      	mov	r1, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	b2ca      	uxtb	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dbf0      	blt.n	80024cc <_read+0x12>
  }

  return len;
 80024ea:	687b      	ldr	r3, [r7, #4]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e009      	b.n	800251a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbcc 	bl	8001cac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbf1      	blt.n	8002506 <_write+0x12>
  }
  return len;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_close>:

int _close(int file)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002554:	605a      	str	r2, [r3, #4]
  return 0;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_isatty>:

int _isatty(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f006 ff3e 	bl	8009444 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200a0000 	.word	0x200a0000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	200016d4 	.word	0x200016d4
 80025fc:	20004228 	.word	0x20004228

08002600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002628:	f7ff ffea 	bl	8002600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <LoopForever+0x6>)
  ldr r1, =_edata
 800262e:	490d      	ldr	r1, [pc, #52]	; (8002664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <LoopForever+0xe>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002644:	4c0a      	ldr	r4, [pc, #40]	; (8002670 <LoopForever+0x16>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002652:	f006 fefd 	bl	8009450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002656:	f7fe fce3 	bl	8001020 <main>

0800265a <LoopForever>:

LoopForever:
    b LoopForever
 800265a:	e7fe      	b.n	800265a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800265c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002668:	0800e5f8 	.word	0x0800e5f8
  ldr r2, =_sbss
 800266c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002670:	20004228 	.word	0x20004228

08002674 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC1_IRQHandler>

08002676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002680:	2003      	movs	r0, #3
 8002682:	f001 fb9f 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f80e 	bl	80026a8 <HAL_InitTick>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	e001      	b.n	800269c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002698:	f7ff fb20 	bl	8001cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800269c:	79fb      	ldrb	r3, [r7, #7]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_InitTick+0x6c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d023      	beq.n	8002704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_InitTick+0x70>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_InitTick+0x6c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fbab 	bl	8003e2e <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d809      	bhi.n	80026f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f001 fb75 	bl	8003dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_InitTick+0x74>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e007      	b.n	8002708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e004      	b.n	8002708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e001      	b.n	8002708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000020 	.word	0x20000020
 8002718:	20000018 	.word	0x20000018
 800271c:	2000001c 	.word	0x2000001c

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000020 	.word	0x20000020
 8002744:	200016d8 	.word	0x200016d8

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200016d8 	.word	0x200016d8

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000020 	.word	0x20000020

080027a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <LL_ADC_SetOffset+0x44>)
 8002832:	4013      	ands	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	4313      	orrs	r3, r2
 8002840:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	03fff000 	.word	0x03fff000

08002858 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	461a      	mov	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	615a      	str	r2, [r3, #20]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3330      	adds	r3, #48	; 0x30
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	4413      	add	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	211f      	movs	r1, #31
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 011f 	and.w	r1, r3, #31
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800295e:	b480      	push	{r7}
 8002960:	b087      	sub	sp, #28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3314      	adds	r3, #20
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0e5b      	lsrs	r3, r3, #25
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	0d1b      	lsrs	r3, r3, #20
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2107      	movs	r1, #7
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0d1b      	lsrs	r3, r3, #20
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0318 	and.w	r3, r3, #24
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029d8:	40d9      	lsrs	r1, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	400b      	ands	r3, r1
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	0007ffff 	.word	0x0007ffff

080029fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6093      	str	r3, [r2, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad4:	f043 0202 	orr.w	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_IsEnabled+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_IsEnabled+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_IsDisableOngoing+0x18>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_IsDisableOngoing+0x1a>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b70:	f043 0210 	orr.w	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d101      	bne.n	8002bea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e129      	b.n	8002e66 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff f87f 	bl	8001d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fef1 	bl	8002a20 <LL_ADC_IsDeepPowerDownEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fed7 	bl	80029fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff0c 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fef0 	bl	8002a48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_ADC_Init+0x278>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	4a81      	ldr	r2, [pc, #516]	; (8002e74 <HAL_ADC_Init+0x27c>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff feee 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f043 0210 	orr.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff62 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80c2 	bne.w	8002e54 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 80be 	bne.w	8002e54 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fefb 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf8:	485f      	ldr	r0, [pc, #380]	; (8002e78 <HAL_ADC_Init+0x280>)
 8002cfa:	f7ff fef5 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	485c      	ldr	r0, [pc, #368]	; (8002e7c <HAL_ADC_Init+0x284>)
 8002d0c:	f7ff fd4c 	bl	80027a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e5b      	ldrb	r3, [r3, #25]
 8002d14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	3b01      	subs	r3, #1
 8002d44:	045b      	lsls	r3, r3, #17
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <HAL_ADC_Init+0x288>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	69b9      	ldr	r1, [r7, #24]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff26 	bl	8002bd2 <LL_ADC_INJ_IsConversionOngoing>
 8002d86:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d140      	bne.n	8002e10 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d13d      	bne.n	8002e10 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7e1b      	ldrb	r3, [r3, #24]
 8002d9c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d9e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db6:	f023 0306 	bic.w	r3, r3, #6
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d118      	bne.n	8002e00 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de4:	4311      	orrs	r1, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df0:	430a      	orrs	r2, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e007      	b.n	8002e10 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10c      	bne.n	8002e32 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f023 010f 	bic.w	r1, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e30:	e007      	b.n	8002e42 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020f 	bic.w	r2, r2, #15
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000018 	.word	0x20000018
 8002e74:	053e2d63 	.word	0x053e2d63
 8002e78:	50040000 	.word	0x50040000
 8002e7c:	50040300 	.word	0x50040300
 8002e80:	fff0c007 	.word	0xfff0c007

08002e84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe77 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d14f      	bne.n	8002f3c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_Start+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e04b      	b.n	8002f42 <HAL_ADC_Start+0xbe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fdd0 	bl	8003a58 <ADC_Enable>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d137      	bne.n	8002f32 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f023 0206 	bic.w	r2, r3, #6
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef0:	e002      	b.n	8002ef8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	221c      	movs	r2, #28
 8002efe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe02 	bl	8002b34 <LL_ADC_REG_StartConversion>
 8002f30:	e006      	b.n	8002f40 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_Stop+0x16>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e023      	b.n	8002fa8 <HAL_ADC_Stop+0x5e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f68:	2103      	movs	r1, #3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fcb8 	bl	80038e0 <ADC_ConversionStop>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d111      	bne.n	8002f9e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fdf2 	bl	8003b64 <ADC_Disable>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d102      	bne.n	8002fc8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e010      	b.n	8002fea <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fea:	f7ff fbad 	bl	8002748 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ff0:	e021      	b.n	8003036 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d01d      	beq.n	8003036 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ffa:	f7ff fba5 	bl	8002748 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <HAL_ADC_PollForConversion+0x60>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d112      	bne.n	8003036 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e047      	b.n	80030c6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0d6      	beq.n	8002ff2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fc43 	bl	80028e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01c      	beq.n	800309a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e5b      	ldrb	r3, [r3, #25]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d111      	bne.n	800309a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d104      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e008      	b.n	80030c4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	220c      	movs	r2, #12
 80030c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0b6      	sub	sp, #216	; 0xd8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x22>
 8003106:	2302      	movs	r3, #2
 8003108:	e3d5      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x7ce>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd34 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 83ba 	bne.w	8003898 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d824      	bhi.n	800317e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	3b02      	subs	r3, #2
 800313a:	2b03      	cmp	r3, #3
 800313c:	d81b      	bhi.n	8003176 <HAL_ADC_ConfigChannel+0x8e>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_ADC_ConfigChannel+0x5c>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003155 	.word	0x08003155
 8003148:	0800315d 	.word	0x0800315d
 800314c:	08003165 	.word	0x08003165
 8003150:	0800316d 	.word	0x0800316d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003154:	230c      	movs	r3, #12
 8003156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800315a:	e010      	b.n	800317e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800315c:	2312      	movs	r3, #18
 800315e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003162:	e00c      	b.n	800317e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003164:	2318      	movs	r3, #24
 8003166:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800316a:	e008      	b.n	800317e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003174:	e003      	b.n	800317e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003176:	2306      	movs	r3, #6
 8003178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800317c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800318c:	f7ff fbbb 	bl	8002906 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fcf5 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 800319a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fd15 	bl	8002bd2 <LL_ADC_INJ_IsConversionOngoing>
 80031a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 81bf 	bne.w	8003534 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 81ba 	bne.w	8003534 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c8:	d10f      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7ff fbc2 	bl	800295e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fb69 	bl	80028ba <LL_ADC_SetSamplingTimeCommonConfig>
 80031e8:	e00e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7ff fbb1 	bl	800295e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fb59 	bl	80028ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00a      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800323a:	f7ff fae9 	bl	8002810 <LL_ADC_SetOffset>
 800323e:	e179      	b.n	8003534 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fb06 	bl	8002858 <LL_ADC_GetOffsetChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x184>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fafb 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	e01e      	b.n	80032aa <HAL_ADC_ConfigChannel+0x1c2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff faf0 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800328a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800328e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800329e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x1da>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	e018      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x20c>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80032d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80032de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e004      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80032ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d106      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fabf 	bl	8002884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2101      	movs	r1, #1
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff faa3 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x24a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fa98 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	e01e      	b.n	8003370 <HAL_ADC_ConfigChannel+0x288>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fa8d 	bl	8002858 <LL_ADC_GetOffsetChannel>
 800333e:	4603      	mov	r3, r0
 8003340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003358:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e004      	b.n	800336e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x2a0>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	e018      	b.n	80033ba <HAL_ADC_ConfigChannel+0x2d2>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800339c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80033a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e004      	b.n	80033ba <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80033b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d106      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fa5c 	bl	8002884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fa40 	bl	8002858 <LL_ADC_GetOffsetChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x310>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fa35 	bl	8002858 <LL_ADC_GetOffsetChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	f003 021f 	and.w	r2, r3, #31
 80033f6:	e01e      	b.n	8003436 <HAL_ADC_ConfigChannel+0x34e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fa2a 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003404:	4603      	mov	r3, r0
 8003406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800341e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e004      	b.n	8003434 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_ADC_ConfigChannel+0x366>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	e014      	b.n	8003478 <HAL_ADC_ConfigChannel+0x390>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800346e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f9fd 	bl	8002884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2103      	movs	r1, #3
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f9e1 	bl	8002858 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x3ce>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2103      	movs	r1, #3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f9d6 	bl	8002858 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	e017      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x3fe>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2103      	movs	r1, #3
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff f9cb 	bl	8002858 <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80034d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80034dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x416>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	e011      	b.n	8003522 <HAL_ADC_ConfigChannel+0x43a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800350c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800351a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2103      	movs	r1, #3
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f9a8 	bl	8002884 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fad5 	bl	8002ae8 <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 813f 	bne.w	80037c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff fa2e 	bl	80029b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_ADC_ConfigChannel+0x6b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	f040 8130 	bne.w	80037c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_ADC_ConfigChannel+0x4a4>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2b09      	cmp	r3, #9
 8003582:	bf94      	ite	ls
 8003584:	2301      	movls	r3, #1
 8003586:	2300      	movhi	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e019      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4d8>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80035a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	bf94      	ite	ls
 80035ba:	2301      	movls	r3, #1
 80035bc:	2300      	movhi	r3, #0
 80035be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d079      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x4f8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	3301      	adds	r3, #1
 80035d8:	069b      	lsls	r3, r3, #26
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	e015      	b.n	800360c <HAL_ADC_ConfigChannel+0x524>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80035fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_ADC_ConfigChannel+0x544>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	e017      	b.n	800365c <HAL_ADC_ConfigChannel+0x574>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800363e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e003      	b.n	8003650 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	ea42 0103 	orr.w	r1, r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x59a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	e018      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x5cc>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b4:	430b      	orrs	r3, r1
 80036b6:	e080      	b.n	80037ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x5ec>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	3301      	adds	r3, #1
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d2:	e015      	b.n	8003700 <HAL_ADC_ConfigChannel+0x618>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e003      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	069b      	lsls	r3, r3, #26
 80036fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x638>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	e017      	b.n	8003750 <HAL_ADC_ConfigChannel+0x668>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	61bb      	str	r3, [r7, #24]
  return result;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e003      	b.n	8003744 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_ADC_ConfigChannel+0x694>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	3301      	adds	r3, #1
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	3b1e      	subs	r3, #30
 8003774:	051b      	lsls	r3, r3, #20
 8003776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800377a:	e01d      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x6d0>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	60fb      	str	r3, [r7, #12]
  return result;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	e005      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x6bc>
 8003798:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 021f 	and.w	r2, r3, #31
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	3b1e      	subs	r3, #30
 80037b2:	051b      	lsls	r3, r3, #20
 80037b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037be:	4619      	mov	r1, r3
 80037c0:	f7ff f8cd 	bl	800295e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d06c      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d0:	483c      	ldr	r0, [pc, #240]	; (80038c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80037d2:	f7ff f80f 	bl	80027f4 <LL_ADC_GetCommonPathInternalCh>
 80037d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d127      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d121      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a35      	ldr	r2, [pc, #212]	; (80038cc <HAL_ADC_ConfigChannel+0x7e4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d157      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003802:	4619      	mov	r1, r3
 8003804:	482f      	ldr	r0, [pc, #188]	; (80038c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003806:	f7fe ffe2 	bl	80027ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800380a:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_ADC_ConfigChannel+0x7e8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003824:	e002      	b.n	800382c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3b01      	subs	r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f9      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003832:	e03a      	b.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800383e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d12a      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385c:	4619      	mov	r1, r3
 800385e:	4819      	ldr	r0, [pc, #100]	; (80038c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003860:	f7fe ffb5 	bl	80027ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003864:	e021      	b.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <HAL_ADC_ConfigChannel+0x7f4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d11c      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a12      	ldr	r2, [pc, #72]	; (80038cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d111      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800388a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800388e:	4619      	mov	r1, r3
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003892:	f7fe ff9c 	bl	80027ce <LL_ADC_SetCommonPathInternalCh>
 8003896:	e008      	b.n	80038aa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80038b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	37d8      	adds	r7, #216	; 0xd8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	80080000 	.word	0x80080000
 80038c4:	50040300 	.word	0x50040300
 80038c8:	c7520000 	.word	0xc7520000
 80038cc:	50040000 	.word	0x50040000
 80038d0:	20000018 	.word	0x20000018
 80038d4:	053e2d63 	.word	0x053e2d63
 80038d8:	cb840000 	.word	0xcb840000
 80038dc:	80000001 	.word	0x80000001

080038e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff f944 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 80038fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f965 	bl	8002bd2 <LL_ADC_INJ_IsConversionOngoing>
 8003908:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8098 	beq.w	8003a48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02a      	beq.n	800397c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7e5b      	ldrb	r3, [r3, #25]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d126      	bne.n	800397c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7e1b      	ldrb	r3, [r3, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d122      	bne.n	800397c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800393a:	e014      	b.n	8003966 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <ADC_ConversionStop+0x174>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d90d      	bls.n	8003960 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e074      	b.n	8003a4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d1e3      	bne.n	800393c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2240      	movs	r2, #64	; 0x40
 800397a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d014      	beq.n	80039ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f8fc 	bl	8002b84 <LL_ADC_REG_IsConversionOngoing>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f8b9 	bl	8002b0e <LL_ADC_IsDisableOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f8d8 	bl	8002b5c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d014      	beq.n	80039dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f90b 	bl	8002bd2 <LL_ADC_INJ_IsConversionOngoing>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f8a1 	bl	8002b0e <LL_ADC_IsDisableOngoing>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff f8e7 	bl	8002baa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d005      	beq.n	80039ee <ADC_ConversionStop+0x10e>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d105      	bne.n	80039f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80039e8:	230c      	movs	r3, #12
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e005      	b.n	80039fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039ee:	2308      	movs	r3, #8
 80039f0:	617b      	str	r3, [r7, #20]
        break;
 80039f2:	e002      	b.n	80039fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039f4:	2304      	movs	r3, #4
 80039f6:	617b      	str	r3, [r7, #20]
        break;
 80039f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039fa:	f7fe fea5 	bl	8002748 <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a00:	e01b      	b.n	8003a3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a02:	f7fe fea1 	bl	8002748 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d914      	bls.n	8003a3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1dc      	bne.n	8003a02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	a33fffff 	.word	0xa33fffff

08003a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f83d 	bl	8002ae8 <LL_ADC_IsEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d169      	bne.n	8003b48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <ADC_Enable+0xfc>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	f043 0210 	orr.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e055      	b.n	8003b4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fff8 	bl	8002a98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aa8:	482b      	ldr	r0, [pc, #172]	; (8003b58 <ADC_Enable+0x100>)
 8003aaa:	f7fe fea3 	bl	80027f4 <LL_ADC_GetCommonPathInternalCh>
 8003aae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <ADC_Enable+0x104>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <ADC_Enable+0x108>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ad2:	e002      	b.n	8003ada <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f9      	bne.n	8003ad4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe fe32 	bl	8002748 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae6:	e028      	b.n	8003b3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fffb 	bl	8002ae8 <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ffcb 	bl	8002a98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b02:	f7fe fe21 	bl	8002748 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d914      	bls.n	8003b3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d00d      	beq.n	8003b3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	f043 0210 	orr.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d1cf      	bne.n	8003ae8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	8000003f 	.word	0x8000003f
 8003b58:	50040300 	.word	0x50040300
 8003b5c:	20000018 	.word	0x20000018
 8003b60:	053e2d63 	.word	0x053e2d63

08003b64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ffcc 	bl	8002b0e <LL_ADC_IsDisableOngoing>
 8003b76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe ffb3 	bl	8002ae8 <LL_ADC_IsEnabled>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d047      	beq.n	8003c18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d144      	bne.n	8003c18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030d 	and.w	r3, r3, #13
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10c      	bne.n	8003bb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe ff8d 	bl	8002ac0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2203      	movs	r2, #3
 8003bac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bae:	f7fe fdcb 	bl	8002748 <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bb4:	e029      	b.n	8003c0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e023      	b.n	8003c1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bd2:	f7fe fdb9 	bl	8002748 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d914      	bls.n	8003c0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f043 0210 	orr.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e007      	b.n	8003c1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1dc      	bne.n	8003bd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	60d3      	str	r3, [r2, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <__NVIC_EnableIRQ+0x38>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
         );
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff8e 	bl	8003cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff29 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dec:	f7ff ff3e 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff8e 	bl	8003d18 <NVIC_EncodePriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff5d 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff31 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffa2 	bl	8003d80 <SysTick_Config>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0ac      	b.n	8003fb4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f8b2 	bl	8003fc8 <DFSDM_GetChannelFromInstance>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a55      	ldr	r2, [pc, #340]	; (8003fbc <HAL_DFSDM_ChannelInit+0x174>)
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e09f      	b.n	8003fb4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fd ff95 	bl	8001da4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003e7a:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a4f      	ldr	r2, [pc, #316]	; (8003fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e82:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003e84:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d125      	bne.n	8003ed8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4c      	ldr	r2, [pc, #304]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003e98:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4948      	ldr	r1, [pc, #288]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003ea6:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a46      	ldr	r2, [pc, #280]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003eac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	791b      	ldrb	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003eba:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	493f      	ldr	r1, [pc, #252]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3c      	ldr	r2, [pc, #240]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ee6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ef6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003efc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 020f 	bic.w	r2, r2, #15
 8003f14:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003f3c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f002 0207 	and.w	r2, r2, #7
 8003f68:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f94:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f810 	bl	8003fc8 <DFSDM_GetChannelFromInstance>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4904      	ldr	r1, [pc, #16]	; (8003fbc <HAL_DFSDM_ChannelInit+0x174>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200016e0 	.word	0x200016e0
 8003fc0:	200016dc 	.word	0x200016dc
 8003fc4:	40016000 	.word	0x40016000

08003fc8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <DFSDM_GetChannelFromInstance+0x7c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d102      	bne.n	8003fde <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e02b      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <DFSDM_GetChannelFromInstance+0x80>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d102      	bne.n	8003fec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e024      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <DFSDM_GetChannelFromInstance+0x84>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d102      	bne.n	8003ffa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e01d      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <DFSDM_GetChannelFromInstance+0x88>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d102      	bne.n	8004008 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004002:	2304      	movs	r3, #4
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e016      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <DFSDM_GetChannelFromInstance+0x8c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d102      	bne.n	8004016 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004010:	2305      	movs	r3, #5
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e00f      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a0f      	ldr	r2, [pc, #60]	; (8004058 <DFSDM_GetChannelFromInstance+0x90>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d102      	bne.n	8004024 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800401e:	2306      	movs	r3, #6
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e008      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a0d      	ldr	r2, [pc, #52]	; (800405c <DFSDM_GetChannelFromInstance+0x94>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d102      	bne.n	8004032 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800402c:	2307      	movs	r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e001      	b.n	8004036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004032:	2303      	movs	r3, #3
 8004034:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40016000 	.word	0x40016000
 8004048:	40016020 	.word	0x40016020
 800404c:	40016040 	.word	0x40016040
 8004050:	40016080 	.word	0x40016080
 8004054:	400160a0 	.word	0x400160a0
 8004058:	400160c0 	.word	0x400160c0
 800405c:	400160e0 	.word	0x400160e0

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406e:	e166      	b.n	800433e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8158 	beq.w	8004338 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d005      	beq.n	80040a0 <HAL_GPIO_Init+0x40>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d130      	bne.n	8004102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040d6:	2201      	movs	r2, #1
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0201 	and.w	r2, r3, #1
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b03      	cmp	r3, #3
 800410c:	d017      	beq.n	800413e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2203      	movs	r2, #3
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d123      	bne.n	8004192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	08da      	lsrs	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3208      	adds	r2, #8
 8004152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	220f      	movs	r2, #15
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80b2 	beq.w	8004338 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	4a60      	ldr	r2, [pc, #384]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6613      	str	r3, [r2, #96]	; 0x60
 80041e0:	4b5e      	ldr	r3, [pc, #376]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041ec:	4a5c      	ldr	r2, [pc, #368]	; (8004360 <HAL_GPIO_Init+0x300>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	3302      	adds	r3, #2
 80041f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	220f      	movs	r2, #15
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004216:	d02b      	beq.n	8004270 <HAL_GPIO_Init+0x210>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a52      	ldr	r2, [pc, #328]	; (8004364 <HAL_GPIO_Init+0x304>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d025      	beq.n	800426c <HAL_GPIO_Init+0x20c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a51      	ldr	r2, [pc, #324]	; (8004368 <HAL_GPIO_Init+0x308>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01f      	beq.n	8004268 <HAL_GPIO_Init+0x208>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a50      	ldr	r2, [pc, #320]	; (800436c <HAL_GPIO_Init+0x30c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d019      	beq.n	8004264 <HAL_GPIO_Init+0x204>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <HAL_GPIO_Init+0x310>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_GPIO_Init+0x200>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a4e      	ldr	r2, [pc, #312]	; (8004374 <HAL_GPIO_Init+0x314>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00d      	beq.n	800425c <HAL_GPIO_Init+0x1fc>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a4d      	ldr	r2, [pc, #308]	; (8004378 <HAL_GPIO_Init+0x318>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <HAL_GPIO_Init+0x1f8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a4c      	ldr	r2, [pc, #304]	; (800437c <HAL_GPIO_Init+0x31c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_GPIO_Init+0x1f4>
 8004250:	2307      	movs	r3, #7
 8004252:	e00e      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004254:	2308      	movs	r3, #8
 8004256:	e00c      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004258:	2306      	movs	r3, #6
 800425a:	e00a      	b.n	8004272 <HAL_GPIO_Init+0x212>
 800425c:	2305      	movs	r3, #5
 800425e:	e008      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004260:	2304      	movs	r3, #4
 8004262:	e006      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004264:	2303      	movs	r3, #3
 8004266:	e004      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004268:	2302      	movs	r3, #2
 800426a:	e002      	b.n	8004272 <HAL_GPIO_Init+0x212>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_GPIO_Init+0x212>
 8004270:	2300      	movs	r3, #0
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	f002 0203 	and.w	r2, r2, #3
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	4093      	lsls	r3, r2
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004282:	4937      	ldr	r1, [pc, #220]	; (8004360 <HAL_GPIO_Init+0x300>)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004290:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_GPIO_Init+0x320>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b4:	4a32      	ldr	r2, [pc, #200]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004308:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <HAL_GPIO_Init+0x320>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_GPIO_Init+0x320>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43db      	mvns	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004332:	4a13      	ldr	r2, [pc, #76]	; (8004380 <HAL_GPIO_Init+0x320>)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3301      	adds	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f ae91 	bne.w	8004070 <HAL_GPIO_Init+0x10>
  }
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40021000 	.word	0x40021000
 8004360:	40010000 	.word	0x40010000
 8004364:	48000400 	.word	0x48000400
 8004368:	48000800 	.word	0x48000800
 800436c:	48000c00 	.word	0x48000c00
 8004370:	48001000 	.word	0x48001000
 8004374:	48001400 	.word	0x48001400
 8004378:	48001800 	.word	0x48001800
 800437c:	48001c00 	.word	0x48001c00
 8004380:	40010400 	.word	0x40010400

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043be:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ca:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f806 	bl	80043e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40010400 	.word	0x40010400

080043e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e08d      	b.n	8004528 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fd fd23 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2224      	movs	r2, #36	; 0x24
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800444a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800445a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	e006      	b.n	8004482 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004480:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d108      	bne.n	800449c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	e007      	b.n	80044ac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69d9      	ldr	r1, [r3, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d138      	bne.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004550:	2302      	movs	r3, #2
 8004552:	e032      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d139      	bne.n	8004650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e033      	b.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	; 0x24
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7fe f86c 	bl	8002748 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e092      	b.n	80047a4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 808b 	bne.w	80047a4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fc8e 	bl	8001fb0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004694:	f241 3188 	movw	r1, #5000	; 0x1388
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f88b 	bl	80047b4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_OSPI_Init+0x150>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68d1      	ldr	r1, [r2, #12]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6952      	ldr	r2, [r2, #20]
 80046ba:	3a01      	subs	r2, #1
 80046bc:	0212      	lsls	r2, r2, #8
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	69d2      	ldr	r2, [r2, #28]
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0412      	lsls	r2, r2, #16
 80046de:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2120      	movs	r1, #32
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fb98 	bl	8004e3c <OSPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d146      	bne.n	80047a4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	1e5a      	subs	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800474c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d107      	bne.n	800478c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0202 	orr.w	r2, r2, #2
 800478a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004794:	d103      	bne.n	800479e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
 800479c:	e002      	b.n	80047a4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	f8e0f8f4 	.word	0xf8e0f8f4

080047b4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b092      	sub	sp, #72	; 0x48
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_OSPIM_Config+0x40>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d105      	bne.n	8004802 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004800:	e004      	b.n	800480c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004802:	2301      	movs	r3, #1
 8004804:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800480c:	2300      	movs	r3, #0
 800480e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004812:	e01f      	b.n	8004854 <HAL_OSPIM_Config+0x80>
 8004814:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800481c:	3301      	adds	r3, #1
 800481e:	b2d8      	uxtb	r0, r3
 8004820:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004824:	f107 0114 	add.w	r1, r7, #20
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	4619      	mov	r1, r3
 8004834:	f000 fb3a 	bl	8004eac <OSPIM_GetConfig>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2208      	movs	r2, #8
 8004848:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800484a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800484e:	3301      	adds	r3, #1
 8004850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004858:	2b01      	cmp	r3, #1
 800485a:	d9dd      	bls.n	8004818 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800485c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 82de 	bne.w	8004e22 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004866:	4bc6      	ldr	r3, [pc, #792]	; (8004b80 <HAL_OSPIM_Config+0x3ac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004872:	4bc3      	ldr	r3, [pc, #780]	; (8004b80 <HAL_OSPIM_Config+0x3ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4ac2      	ldr	r2, [pc, #776]	; (8004b80 <HAL_OSPIM_Config+0x3ac>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800487e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800488a:	4bbe      	ldr	r3, [pc, #760]	; (8004b84 <HAL_OSPIM_Config+0x3b0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004896:	4bbb      	ldr	r3, [pc, #748]	; (8004b84 <HAL_OSPIM_Config+0x3b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4aba      	ldr	r2, [pc, #744]	; (8004b84 <HAL_OSPIM_Config+0x3b0>)
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80048a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80048ae:	49b6      	ldr	r1, [pc, #728]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 80048b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3348      	adds	r3, #72	; 0x48
 80048bc:	443b      	add	r3, r7
 80048be:	3b2c      	subs	r3, #44	; 0x2c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	48af      	ldr	r0, [pc, #700]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 80048cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3348      	adds	r3, #72	; 0x48
 80048d8:	443b      	add	r3, r7
 80048da:	3b2c      	subs	r3, #44	; 0x2c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3b01      	subs	r3, #1
 80048e0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4403      	add	r3, r0
 80048e8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80048ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3348      	adds	r3, #72	; 0x48
 80048f6:	443b      	add	r3, r7
 80048f8:	3b34      	subs	r3, #52	; 0x34
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004902:	49a1      	ldr	r1, [pc, #644]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	3b34      	subs	r3, #52	; 0x34
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3b01      	subs	r3, #1
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	489a      	ldr	r0, [pc, #616]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	3348      	adds	r3, #72	; 0x48
 800492c:	443b      	add	r3, r7
 800492e:	3b34      	subs	r3, #52	; 0x34
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	f021 0201 	bic.w	r2, r1, #1
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4403      	add	r3, r0
 800493c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800493e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	3348      	adds	r3, #72	; 0x48
 800494a:	443b      	add	r3, r7
 800494c:	3b30      	subs	r3, #48	; 0x30
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01d      	beq.n	8004990 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004954:	498c      	ldr	r1, [pc, #560]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	3348      	adds	r3, #72	; 0x48
 8004962:	443b      	add	r3, r7
 8004964:	3b30      	subs	r3, #48	; 0x30
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	4885      	ldr	r0, [pc, #532]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	3348      	adds	r3, #72	; 0x48
 800497e:	443b      	add	r3, r7
 8004980:	3b30      	subs	r3, #48	; 0x30
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3b01      	subs	r3, #1
 8004986:	f021 0210 	bic.w	r2, r1, #16
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4403      	add	r3, r0
 800498e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	3348      	adds	r3, #72	; 0x48
 800499c:	443b      	add	r3, r7
 800499e:	3b28      	subs	r3, #40	; 0x28
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d021      	beq.n	80049ea <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80049a6:	4978      	ldr	r1, [pc, #480]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 80049a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	3348      	adds	r3, #72	; 0x48
 80049b4:	443b      	add	r3, r7
 80049b6:	3b28      	subs	r3, #40	; 0x28
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	4870      	ldr	r0, [pc, #448]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 80049c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3348      	adds	r3, #72	; 0x48
 80049d4:	443b      	add	r3, r7
 80049d6:	3b28      	subs	r3, #40	; 0x28
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4403      	add	r3, r0
 80049e8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	3348      	adds	r3, #72	; 0x48
 80049f6:	443b      	add	r3, r7
 80049f8:	3b24      	subs	r3, #36	; 0x24
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d021      	beq.n	8004a44 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004a00:	4961      	ldr	r1, [pc, #388]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	443b      	add	r3, r7
 8004a10:	3b24      	subs	r3, #36	; 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	4859      	ldr	r0, [pc, #356]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3348      	adds	r3, #72	; 0x48
 8004a2e:	443b      	add	r3, r7
 8004a30:	3b24      	subs	r3, #36	; 0x24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4403      	add	r3, r0
 8004a42:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	3348      	adds	r3, #72	; 0x48
 8004a56:	443b      	add	r3, r7
 8004a58:	3b34      	subs	r3, #52	; 0x34
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	d038      	beq.n	8004ad2 <HAL_OSPIM_Config+0x2fe>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3348      	adds	r3, #72	; 0x48
 8004a72:	443b      	add	r3, r7
 8004a74:	3b30      	subs	r3, #48	; 0x30
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d02a      	beq.n	8004ad2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6899      	ldr	r1, [r3, #8]
 8004a80:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	3348      	adds	r3, #72	; 0x48
 8004a8e:	443b      	add	r3, r7
 8004a90:	3b2c      	subs	r3, #44	; 0x2c
 8004a92:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d01c      	beq.n	8004ad2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	68d9      	ldr	r1, [r3, #12]
 8004a9c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	3348      	adds	r3, #72	; 0x48
 8004aaa:	443b      	add	r3, r7
 8004aac:	3b28      	subs	r3, #40	; 0x28
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6919      	ldr	r1, [r3, #16]
 8004ab8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3348      	adds	r3, #72	; 0x48
 8004ac6:	443b      	add	r3, r7
 8004ac8:	3b24      	subs	r3, #36	; 0x24
 8004aca:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004acc:	4299      	cmp	r1, r3
 8004ace:	f040 80d3 	bne.w	8004c78 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004ad4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3348      	adds	r3, #72	; 0x48
 8004ae2:	443b      	add	r3, r7
 8004ae4:	3b34      	subs	r3, #52	; 0x34
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	4825      	ldr	r0, [pc, #148]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004af2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3348      	adds	r3, #72	; 0x48
 8004b00:	443b      	add	r3, r7
 8004b02:	3b34      	subs	r3, #52	; 0x34
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f021 0201 	bic.w	r2, r1, #1
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4403      	add	r3, r0
 8004b10:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004b12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	3348      	adds	r3, #72	; 0x48
 8004b20:	443b      	add	r3, r7
 8004b22:	3b30      	subs	r3, #48	; 0x30
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01f      	beq.n	8004b6a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004b2a:	4917      	ldr	r1, [pc, #92]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004b2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	3348      	adds	r3, #72	; 0x48
 8004b3a:	443b      	add	r3, r7
 8004b3c:	3b30      	subs	r3, #48	; 0x30
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	6859      	ldr	r1, [r3, #4]
 8004b48:	480f      	ldr	r0, [pc, #60]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004b4a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	3348      	adds	r3, #72	; 0x48
 8004b58:	443b      	add	r3, r7
 8004b5a:	3b30      	subs	r3, #48	; 0x30
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f021 0210 	bic.w	r2, r1, #16
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4403      	add	r3, r0
 8004b68:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004b6a:	4907      	ldr	r1, [pc, #28]	; (8004b88 <HAL_OSPIM_Config+0x3b4>)
 8004b6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	3b2c      	subs	r3, #44	; 0x2c
 8004b7e:	e005      	b.n	8004b8c <HAL_OSPIM_Config+0x3b8>
 8004b80:	a0001000 	.word	0xa0001000
 8004b84:	a0001400 	.word	0xa0001400
 8004b88:	50061c00 	.word	0x50061c00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	48a6      	ldr	r0, [pc, #664]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004b98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3348      	adds	r3, #72	; 0x48
 8004ba6:	443b      	add	r3, r7
 8004ba8:	3b2c      	subs	r3, #44	; 0x2c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4403      	add	r3, r0
 8004bb6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004bb8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	3348      	adds	r3, #72	; 0x48
 8004bc6:	443b      	add	r3, r7
 8004bc8:	3b28      	subs	r3, #40	; 0x28
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d023      	beq.n	8004c18 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004bd0:	4997      	ldr	r1, [pc, #604]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004bd2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3348      	adds	r3, #72	; 0x48
 8004be0:	443b      	add	r3, r7
 8004be2:	3b28      	subs	r3, #40	; 0x28
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	488f      	ldr	r0, [pc, #572]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004bf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	3348      	adds	r3, #72	; 0x48
 8004c02:	443b      	add	r3, r7
 8004c04:	3b28      	subs	r3, #40	; 0x28
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4403      	add	r3, r0
 8004c16:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	3348      	adds	r3, #72	; 0x48
 8004c26:	443b      	add	r3, r7
 8004c28:	3b24      	subs	r3, #36	; 0x24
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d023      	beq.n	8004c78 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c30:	497f      	ldr	r1, [pc, #508]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004c32:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	3348      	adds	r3, #72	; 0x48
 8004c40:	443b      	add	r3, r7
 8004c42:	3b24      	subs	r3, #36	; 0x24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	4877      	ldr	r0, [pc, #476]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004c54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	3348      	adds	r3, #72	; 0x48
 8004c62:	443b      	add	r3, r7
 8004c64:	3b24      	subs	r3, #36	; 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4403      	add	r3, r0
 8004c76:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004c78:	4a6d      	ldr	r2, [pc, #436]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8c:	025b      	lsls	r3, r3, #9
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	4967      	ldr	r1, [pc, #412]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004ca2:	4a63      	ldr	r2, [pc, #396]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 0203 	bic.w	r2, r3, #3
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	495d      	ldr	r1, [pc, #372]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d014      	beq.n	8004cfe <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004cd4:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce8:	015b      	lsls	r3, r3, #5
 8004cea:	431a      	orrs	r2, r3
 8004cec:	4950      	ldr	r1, [pc, #320]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	f042 0210 	orr.w	r2, r2, #16
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d019      	beq.n	8004d3e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d0a:	4a49      	ldr	r2, [pc, #292]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	049b      	lsls	r3, r3, #18
 8004d24:	431a      	orrs	r2, r3
 8004d26:	4942      	ldr	r1, [pc, #264]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e01c      	b.n	8004d78 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	069b      	lsls	r3, r3, #26
 8004d60:	431a      	orrs	r2, r3
 8004d62:	4933      	ldr	r1, [pc, #204]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9c:	049b      	lsls	r3, r3, #18
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	4923      	ldr	r1, [pc, #140]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	e01c      	b.n	8004df2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d018      	beq.n	8004df2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd8:	069b      	lsls	r3, r3, #26
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	4914      	ldr	r1, [pc, #80]	; (8004e30 <HAL_OSPIM_Config+0x65c>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004df2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_OSPIM_Config+0x660>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_OSPIM_Config+0x660>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004e0a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_OSPIM_Config+0x664>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_OSPIM_Config+0x664>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3748      	adds	r7, #72	; 0x48
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	50061c00 	.word	0x50061c00
 8004e34:	a0001000 	.word	0xa0001000
 8004e38:	a0001400 	.word	0xa0001400

08004e3c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e4c:	e01a      	b.n	8004e84 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d016      	beq.n	8004e84 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fd fc77 	bl	8002748 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e00e      	b.n	8004ea2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1d6      	bne.n	8004e4e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <OSPIM_GetConfig+0x26>
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d802      	bhi.n	8004ed2 <OSPIM_GetConfig+0x26>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
 8004ed6:	e08e      	b.n	8004ff6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2200      	movs	r2, #0
 8004eee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d101      	bne.n	8004f00 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004efc:	4b41      	ldr	r3, [pc, #260]	; (8005004 <OSPIM_GetConfig+0x158>)
 8004efe:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e074      	b.n	8004ff0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004f06:	4a40      	ldr	r2, [pc, #256]	; (8005008 <OSPIM_GetConfig+0x15c>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4053      	eors	r3, r2
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4053      	eors	r3, r2
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4053      	eors	r3, r2
 8004f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d018      	beq.n	8004fae <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4053      	eors	r3, r2
 8004f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d111      	bne.n	8004fae <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	e005      	b.n	8004fae <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d018      	beq.n	8004fea <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4053      	eors	r3, r2
 8004fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d111      	bne.n	8004fea <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	611a      	str	r2, [r3, #16]
 8004fdc:	e005      	b.n	8004fea <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d987      	bls.n	8004f06 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	04040222 	.word	0x04040222
 8005008:	50061c00 	.word	0x50061c00

0800500c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40007000 	.word	0x40007000

0800502c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d102      	bne.n	8005044 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800503e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005042:	e00b      	b.n	800505c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005044:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005052:	d102      	bne.n	800505a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005058:	e000      	b.n	800505c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800505a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40007000 	.word	0x40007000

0800506c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d141      	bne.n	80050fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507a:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005086:	d131      	bne.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	4a46      	ldr	r2, [pc, #280]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005098:	4b43      	ldr	r3, [pc, #268]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050a0:	4a41      	ldr	r2, [pc, #260]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2232      	movs	r2, #50	; 0x32
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	0c9b      	lsrs	r3, r3, #18
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050be:	e002      	b.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c6:	4b38      	ldr	r3, [pc, #224]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d102      	bne.n	80050da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f2      	bne.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050da:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d158      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e057      	b.n	800519c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ec:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050fc:	e04d      	b.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d141      	bne.n	800518a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d131      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511a:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005124:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2232      	movs	r2, #50	; 0x32
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	0c9b      	lsrs	r3, r3, #18
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800514a:	e002      	b.n	8005152 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b01      	subs	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	d102      	bne.n	8005166 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f2      	bne.n	800514c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d112      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e011      	b.n	800519c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005188:	e007      	b.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005192:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005198:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40007000 	.word	0x40007000
 80051ac:	20000018 	.word	0x20000018
 80051b0:	431bde83 	.word	0x431bde83

080051b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f000 bc08 	b.w	80059d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c8:	4b96      	ldr	r3, [pc, #600]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051d2:	4b94      	ldr	r3, [pc, #592]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80e4 	beq.w	80053b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_RCC_OscConfig+0x4c>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	f040 808b 	bne.w	800530e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	f040 8087 	bne.w	800530e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005200:	4b88      	ldr	r3, [pc, #544]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x64>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e3df      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	4b81      	ldr	r3, [pc, #516]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <HAL_RCC_OscConfig+0x7e>
 8005228:	4b7e      	ldr	r3, [pc, #504]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005230:	e005      	b.n	800523e <HAL_RCC_OscConfig+0x8a>
 8005232:	4b7c      	ldr	r3, [pc, #496]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523e:	4293      	cmp	r3, r2
 8005240:	d223      	bcs.n	800528a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fdcc 	bl	8005de4 <RCC_SetFlashLatencyFromMSIRange>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e3c0      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a72      	ldr	r2, [pc, #456]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b70      	ldr	r3, [pc, #448]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	496d      	ldr	r1, [pc, #436]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005274:	4b6b      	ldr	r3, [pc, #428]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	4968      	ldr	r1, [pc, #416]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
 8005288:	e025      	b.n	80052d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528a:	4b66      	ldr	r3, [pc, #408]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a65      	ldr	r2, [pc, #404]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005290:	f043 0308 	orr.w	r3, r3, #8
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b63      	ldr	r3, [pc, #396]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4960      	ldr	r1, [pc, #384]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a8:	4b5e      	ldr	r3, [pc, #376]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	495b      	ldr	r1, [pc, #364]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd8c 	bl	8005de4 <RCC_SetFlashLatencyFromMSIRange>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e380      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052d6:	f000 fcc1 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b51      	ldr	r3, [pc, #324]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4950      	ldr	r1, [pc, #320]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80052e8:	5ccb      	ldrb	r3, [r1, r3]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a4e      	ldr	r2, [pc, #312]	; (800542c <HAL_RCC_OscConfig+0x278>)
 80052f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052f6:	4b4e      	ldr	r3, [pc, #312]	; (8005430 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd f9d4 	bl	80026a8 <HAL_InitTick>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d052      	beq.n	80053b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	e364      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d032      	beq.n	800537c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a42      	ldr	r2, [pc, #264]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005322:	f7fd fa11 	bl	8002748 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800532a:	f7fd fa0d 	bl	8002748 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e34d      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800533c:	4b39      	ldr	r3, [pc, #228]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a35      	ldr	r2, [pc, #212]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800534e:	f043 0308 	orr.w	r3, r3, #8
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b33      	ldr	r3, [pc, #204]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4930      	ldr	r1, [pc, #192]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	492b      	ldr	r1, [pc, #172]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
 800537a:	e01a      	b.n	80053b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a28      	ldr	r2, [pc, #160]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005388:	f7fd f9de 	bl	8002748 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005390:	f7fd f9da 	bl	8002748 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e31a      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f0      	bne.n	8005390 <HAL_RCC_OscConfig+0x1dc>
 80053ae:	e000      	b.n	80053b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d073      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x21c>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d10e      	bne.n	80053e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d063      	beq.n	80054a4 <HAL_RCC_OscConfig+0x2f0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d15f      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e2f7      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x24c>
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e025      	b.n	800544c <HAL_RCC_OscConfig+0x298>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005408:	d114      	bne.n	8005434 <HAL_RCC_OscConfig+0x280>
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a05      	ldr	r2, [pc, #20]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a02      	ldr	r2, [pc, #8]	; (8005424 <HAL_RCC_OscConfig+0x270>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e013      	b.n	800544c <HAL_RCC_OscConfig+0x298>
 8005424:	40021000 	.word	0x40021000
 8005428:	0800e120 	.word	0x0800e120
 800542c:	20000018 	.word	0x20000018
 8005430:	2000001c 	.word	0x2000001c
 8005434:	4ba0      	ldr	r3, [pc, #640]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a9f      	ldr	r2, [pc, #636]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b9d      	ldr	r3, [pc, #628]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a9c      	ldr	r2, [pc, #624]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d013      	beq.n	800547c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd f978 	bl	8002748 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fd f974 	bl	8002748 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e2b4      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800546e:	4b92      	ldr	r3, [pc, #584]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x2a8>
 800547a:	e014      	b.n	80054a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd f964 	bl	8002748 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fd f960 	bl	8002748 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e2a0      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005496:	4b88      	ldr	r3, [pc, #544]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x2d0>
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d060      	beq.n	8005574 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x310>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d119      	bne.n	80054f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d116      	bne.n	80054f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c4:	4b7c      	ldr	r3, [pc, #496]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_OscConfig+0x328>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e27d      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054dc:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	061b      	lsls	r3, r3, #24
 80054ea:	4973      	ldr	r1, [pc, #460]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f0:	e040      	b.n	8005574 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d023      	beq.n	8005542 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fa:	4b6f      	ldr	r3, [pc, #444]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6e      	ldr	r2, [pc, #440]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd f91f 	bl	8002748 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd f91b 	bl	8002748 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e25b      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005520:	4b65      	ldr	r3, [pc, #404]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b62      	ldr	r3, [pc, #392]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	495f      	ldr	r1, [pc, #380]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
 8005540:	e018      	b.n	8005574 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005542:	4b5d      	ldr	r3, [pc, #372]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a5c      	ldr	r2, [pc, #368]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fd f8fb 	bl	8002748 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005556:	f7fd f8f7 	bl	8002748 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e237      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005568:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d03c      	beq.n	80055fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005588:	4b4b      	ldr	r3, [pc, #300]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800558a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558e:	4a4a      	ldr	r2, [pc, #296]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd f8d6 	bl	8002748 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a0:	f7fd f8d2 	bl	8002748 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e212      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b2:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80055b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ef      	beq.n	80055a0 <HAL_RCC_OscConfig+0x3ec>
 80055c0:	e01b      	b.n	80055fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80055c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c8:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fd f8b9 	bl	8002748 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055da:	f7fd f8b5 	bl	8002748 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1f5      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055ec:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ef      	bne.n	80055da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80a6 	beq.w	8005754 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800560c:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10d      	bne.n	8005634 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	6593      	str	r3, [r2, #88]	; 0x58
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005630:	2301      	movs	r3, #1
 8005632:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCC_OscConfig+0x508>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d118      	bne.n	8005672 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005640:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_RCC_OscConfig+0x508>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_RCC_OscConfig+0x508>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564c:	f7fd f87c 	bl	8002748 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005654:	f7fd f878 	bl	8002748 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1b8      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <HAL_RCC_OscConfig+0x508>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d108      	bne.n	800568c <HAL_RCC_OscConfig+0x4d8>
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800568a:	e029      	b.n	80056e0 <HAL_RCC_OscConfig+0x52c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b05      	cmp	r3, #5
 8005692:	d115      	bne.n	80056c0 <HAL_RCC_OscConfig+0x50c>
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <HAL_RCC_OscConfig+0x504>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x52c>
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
 80056c0:	4b9d      	ldr	r3, [pc, #628]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a9c      	ldr	r2, [pc, #624]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d0:	4b99      	ldr	r3, [pc, #612]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	4a98      	ldr	r2, [pc, #608]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d016      	beq.n	8005716 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fd f82e 	bl	8002748 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd f82a 	bl	8002748 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e168      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005706:	4b8c      	ldr	r3, [pc, #560]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ed      	beq.n	80056f0 <HAL_RCC_OscConfig+0x53c>
 8005714:	e015      	b.n	8005742 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fd f817 	bl	8002748 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fd f813 	bl	8002748 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	; 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e151      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005734:	4b80      	ldr	r3, [pc, #512]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ed      	bne.n	800571e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005742:	7ffb      	ldrb	r3, [r7, #31]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005748:	4b7b      	ldr	r3, [pc, #492]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	4a7a      	ldr	r2, [pc, #488]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d03c      	beq.n	80057da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005768:	4b73      	ldr	r3, [pc, #460]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 800576a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576e:	4a72      	ldr	r2, [pc, #456]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fc ffe6 	bl	8002748 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005780:	f7fc ffe2 	bl	8002748 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e122      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005792:	4b69      	ldr	r3, [pc, #420]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ef      	beq.n	8005780 <HAL_RCC_OscConfig+0x5cc>
 80057a0:	e01b      	b.n	80057da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057a2:	4b65      	ldr	r3, [pc, #404]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80057a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a8:	4a63      	ldr	r2, [pc, #396]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fc ffc9 	bl	8002748 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ba:	f7fc ffc5 	bl	8002748 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e105      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057cc:	4b5a      	ldr	r3, [pc, #360]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80057ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ef      	bne.n	80057ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80f9 	beq.w	80059d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f040 80cf 	bne.w	800598c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057ee:	4b52      	ldr	r3, [pc, #328]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f003 0203 	and.w	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d12c      	bne.n	800585c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	3b01      	subs	r3, #1
 800580e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d123      	bne.n	800585c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d11b      	bne.n	800585c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d113      	bne.n	800585c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	3b01      	subs	r3, #1
 8005842:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d109      	bne.n	800585c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	3b01      	subs	r3, #1
 8005856:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d071      	beq.n	8005940 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d068      	beq.n	8005934 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800586e:	4b32      	ldr	r3, [pc, #200]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0ac      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800587e:	4b2e      	ldr	r3, [pc, #184]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005888:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800588a:	f7fc ff5d 	bl	8002748 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005892:	f7fc ff59 	bl	8002748 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e099      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b0:	4b21      	ldr	r3, [pc, #132]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <HAL_RCC_OscConfig+0x788>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058c0:	3a01      	subs	r2, #1
 80058c2:	0112      	lsls	r2, r2, #4
 80058c4:	4311      	orrs	r1, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ca:	0212      	lsls	r2, r2, #8
 80058cc:	4311      	orrs	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058d2:	0852      	lsrs	r2, r2, #1
 80058d4:	3a01      	subs	r2, #1
 80058d6:	0552      	lsls	r2, r2, #21
 80058d8:	4311      	orrs	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058de:	0852      	lsrs	r2, r2, #1
 80058e0:	3a01      	subs	r2, #1
 80058e2:	0652      	lsls	r2, r2, #25
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058ea:	06d2      	lsls	r2, r2, #27
 80058ec:	430a      	orrs	r2, r1
 80058ee:	4912      	ldr	r1, [pc, #72]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058f4:	4b10      	ldr	r3, [pc, #64]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0f      	ldr	r2, [pc, #60]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 80058fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800590c:	f7fc ff1c 	bl	8002748 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005914:	f7fc ff18 	bl	8002748 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e058      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005926:	4b04      	ldr	r3, [pc, #16]	; (8005938 <HAL_RCC_OscConfig+0x784>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005932:	e050      	b.n	80059d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04f      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
 8005938:	40021000 	.word	0x40021000
 800593c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d144      	bne.n	80059d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a23      	ldr	r2, [pc, #140]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 8005952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005958:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 800595e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005964:	f7fc fef0 	bl	8002748 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fc feec 	bl	8002748 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e02c      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x7b8>
 800598a:	e024      	b.n	80059d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d01f      	beq.n	80059d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 8005998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800599c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599e:	f7fc fed3 	bl	8002748 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a6:	f7fc fecf 	bl	8002748 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e00f      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f0      	bne.n	80059a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	4905      	ldr	r1, [pc, #20]	; (80059e0 <HAL_RCC_OscConfig+0x82c>)
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_OscConfig+0x830>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e001      	b.n	80059d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	feeefffc 	.word	0xfeeefffc

080059e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e11d      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a00:	4b90      	ldr	r3, [pc, #576]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d910      	bls.n	8005a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b8d      	ldr	r3, [pc, #564]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f023 020f 	bic.w	r2, r3, #15
 8005a16:	498b      	ldr	r1, [pc, #556]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1e:	4b89      	ldr	r3, [pc, #548]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e105      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d010      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d908      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b7e      	ldr	r3, [pc, #504]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	497b      	ldr	r1, [pc, #492]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d079      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d11e      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a72:	4b75      	ldr	r3, [pc, #468]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0dc      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a82:	f000 fa09 	bl	8005e98 <RCC_GetSysClockFreqFromPLLSource>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a70      	ldr	r2, [pc, #448]	; (8005c4c <HAL_RCC_ClockConfig+0x264>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d946      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a8e:	4b6e      	ldr	r3, [pc, #440]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d140      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a9a:	4b6b      	ldr	r3, [pc, #428]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa2:	4a69      	ldr	r2, [pc, #420]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e035      	b.n	8005b1c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab8:	4b63      	ldr	r3, [pc, #396]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d115      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0b9      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ad0:	4b5d      	ldr	r3, [pc, #372]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0ad      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae0:	4b59      	ldr	r3, [pc, #356]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a5      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005af0:	f000 f8b4 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4a55      	ldr	r2, [pc, #340]	; (8005c4c <HAL_RCC_ClockConfig+0x264>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d90f      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005afc:	4b52      	ldr	r3, [pc, #328]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b08:	4b4f      	ldr	r3, [pc, #316]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b10:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 0203 	bic.w	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4947      	ldr	r1, [pc, #284]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2e:	f7fc fe0b 	bl	8002748 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b36:	f7fc fe07 	bl	8002748 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e077      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4c:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 020c 	and.w	r2, r3, #12
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d1eb      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d105      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b64:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a37      	ldr	r2, [pc, #220]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d208      	bcs.n	8005b9e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8c:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	492b      	ldr	r1, [pc, #172]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d210      	bcs.n	8005bce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f023 020f 	bic.w	r2, r3, #15
 8005bb4:	4923      	ldr	r1, [pc, #140]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbc:	4b21      	ldr	r3, [pc, #132]	; (8005c44 <HAL_RCC_ClockConfig+0x25c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e036      	b.n	8005c3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	4918      	ldr	r1, [pc, #96]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4910      	ldr	r1, [pc, #64]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c0c:	f000 f826 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	490c      	ldr	r1, [pc, #48]	; (8005c50 <HAL_RCC_ClockConfig+0x268>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
 8005c28:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <HAL_RCC_ClockConfig+0x26c>)
 8005c2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_RCC_ClockConfig+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fc fd39 	bl	80026a8 <HAL_InitTick>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40022000 	.word	0x40022000
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	04c4b400 	.word	0x04c4b400
 8005c50:	0800e120 	.word	0x0800e120
 8005c54:	20000018 	.word	0x20000018
 8005c58:	2000001c 	.word	0x2000001c

08005c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b089      	sub	sp, #36	; 0x24
 8005c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6a:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c74:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x34>
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d121      	bne.n	8005cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d11e      	bne.n	8005cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c9c:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	e005      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cb8:	4a2b      	ldr	r2, [pc, #172]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d102      	bne.n	8005cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e004      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d134      	bne.n	8005d54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cea:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d003      	beq.n	8005d02 <HAL_RCC_GetSysClockFreq+0xa6>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCC_GetSysClockFreq+0xac>
 8005d00:	e005      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8005d04:	617b      	str	r3, [r7, #20]
      break;
 8005d06:	e005      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d0a:	617b      	str	r3, [r7, #20]
      break;
 8005d0c:	e002      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	617b      	str	r3, [r7, #20]
      break;
 8005d12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d14:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	3301      	adds	r3, #1
 8005d20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	fb03 f202 	mul.w	r2, r3, r2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	0e5b      	lsrs	r3, r3, #25
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	3301      	adds	r3, #1
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d54:	69bb      	ldr	r3, [r7, #24]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3724      	adds	r7, #36	; 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	0800e138 	.word	0x0800e138
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	007a1200 	.word	0x007a1200

08005d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d78:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000018 	.word	0x20000018

08005d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d90:	f7ff fff0 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	4904      	ldr	r1, [pc, #16]	; (8005db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005da2:	5ccb      	ldrb	r3, [r1, r3]
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800e130 	.word	0x0800e130

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dbc:	f7ff ffda 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	0adb      	lsrs	r3, r3, #11
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4904      	ldr	r1, [pc, #16]	; (8005de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	0800e130 	.word	0x0800e130

08005de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dfc:	f7ff f916 	bl	800502c <HAL_PWREx_GetVoltageRange>
 8005e00:	6178      	str	r0, [r7, #20]
 8005e02:	e014      	b.n	8005e2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e10:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e1c:	f7ff f906 	bl	800502c <HAL_PWREx_GetVoltageRange>
 8005e20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e34:	d10b      	bne.n	8005e4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b80      	cmp	r3, #128	; 0x80
 8005e3a:	d913      	bls.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2ba0      	cmp	r3, #160	; 0xa0
 8005e40:	d902      	bls.n	8005e48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e42:	2302      	movs	r3, #2
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	e00d      	b.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e48:	2301      	movs	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e00a      	b.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b7f      	cmp	r3, #127	; 0x7f
 8005e52:	d902      	bls.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e54:	2302      	movs	r3, #2
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	e004      	b.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b70      	cmp	r3, #112	; 0x70
 8005e5e:	d101      	bne.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e60:	2301      	movs	r3, #1
 8005e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 020f 	bic.w	r2, r3, #15
 8005e6c:	4909      	ldr	r1, [pc, #36]	; (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d001      	beq.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40022000 	.word	0x40022000

08005e98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d00b      	beq.n	8005ec6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d825      	bhi.n	8005f00 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d008      	beq.n	8005ecc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d11f      	bne.n	8005f00 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ec2:	613b      	str	r3, [r7, #16]
    break;
 8005ec4:	e01f      	b.n	8005f06 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005ec6:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005ec8:	613b      	str	r3, [r7, #16]
    break;
 8005eca:	e01c      	b.n	8005f06 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ecc:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e005      	b.n	8005ef4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005ef4:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efc:	613b      	str	r3, [r7, #16]
    break;
 8005efe:	e002      	b.n	8005f06 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
    break;
 8005f04:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	3301      	adds	r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	fb03 f202 	mul.w	r2, r3, r2
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	0e5b      	lsrs	r3, r3, #25
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	3301      	adds	r3, #1
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f46:	683b      	ldr	r3, [r7, #0]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40021000 	.word	0x40021000
 8005f58:	00f42400 	.word	0x00f42400
 8005f5c:	007a1200 	.word	0x007a1200
 8005f60:	0800e138 	.word	0x0800e138

08005f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f70:	2300      	movs	r3, #0
 8005f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d040      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d02a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d825      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f8c:	2b60      	cmp	r3, #96	; 0x60
 8005f8e:	d026      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d821      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d006      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d81d      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005fa4:	e018      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fa6:	4b89      	ldr	r3, [pc, #548]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4a88      	ldr	r2, [pc, #544]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fb2:	e015      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb12 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fc4:	e00c      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3320      	adds	r3, #32
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fbfd 	bl	80067cc <RCCEx_PLLSAI2_Config>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fd6:	e003      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	74fb      	strb	r3, [r7, #19]
      break;
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fe6:	4b79      	ldr	r3, [pc, #484]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	4975      	ldr	r1, [pc, #468]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ffc:	e001      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d047      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006016:	d030      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d82a      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800601e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006022:	d02a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006028:	d824      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602e:	d008      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006034:	d81e      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800603a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603e:	d010      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006040:	e018      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006042:	4b62      	ldr	r3, [pc, #392]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4a61      	ldr	r2, [pc, #388]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800604e:	e015      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fac4 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006060:	e00c      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3320      	adds	r3, #32
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fbaf 	bl	80067cc <RCCEx_PLLSAI2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006072:	e003      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	74fb      	strb	r3, [r7, #19]
      break;
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800607a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800607c:	7cfb      	ldrb	r3, [r7, #19]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006082:	4b52      	ldr	r3, [pc, #328]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	494e      	ldr	r1, [pc, #312]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006098:	e001      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	7cfb      	ldrb	r3, [r7, #19]
 800609c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 809f 	beq.w	80061ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ac:	2300      	movs	r3, #0
 80060ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060b0:	4b46      	ldr	r3, [pc, #280]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060c6:	4b41      	ldr	r3, [pc, #260]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	4a40      	ldr	r2, [pc, #256]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d0:	6593      	str	r3, [r2, #88]	; 0x58
 80060d2:	4b3e      	ldr	r3, [pc, #248]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060de:	2301      	movs	r3, #1
 80060e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e2:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a3a      	ldr	r2, [pc, #232]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ee:	f7fc fb2b 	bl	8002748 <HAL_GetTick>
 80060f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060f4:	e009      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f6:	f7fc fb27 	bl	8002748 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d902      	bls.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	74fb      	strb	r3, [r7, #19]
        break;
 8006108:	e005      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ef      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006116:	7cfb      	ldrb	r3, [r7, #19]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d15b      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800611c:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006126:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01f      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	429a      	cmp	r2, r3
 8006138:	d019      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006146:	4b21      	ldr	r3, [pc, #132]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615c:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006166:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d016      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fc fae6 	bl	8002748 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617e:	e00b      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006180:	f7fc fae2 	bl	8002748 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	; 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d902      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	74fb      	strb	r3, [r7, #19]
            break;
 8006196:	e006      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0ec      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10c      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
 80061c8:	74bb      	strb	r3, [r7, #18]
 80061ca:	e005      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80061cc:	40021000 	.word	0x40021000
 80061d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061d8:	7c7b      	ldrb	r3, [r7, #17]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d105      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061de:	4ba0      	ldr	r3, [pc, #640]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	4a9f      	ldr	r2, [pc, #636]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061f6:	4b9a      	ldr	r3, [pc, #616]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f023 0203 	bic.w	r2, r3, #3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	4996      	ldr	r1, [pc, #600]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006218:	4b91      	ldr	r3, [pc, #580]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f023 020c 	bic.w	r2, r3, #12
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	498e      	ldr	r1, [pc, #568]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800623a:	4b89      	ldr	r3, [pc, #548]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	4985      	ldr	r1, [pc, #532]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800625c:	4b80      	ldr	r3, [pc, #512]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	497d      	ldr	r1, [pc, #500]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800627e:	4b78      	ldr	r3, [pc, #480]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	4974      	ldr	r1, [pc, #464]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062a0:	4b6f      	ldr	r3, [pc, #444]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	496c      	ldr	r1, [pc, #432]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062c2:	4b67      	ldr	r3, [pc, #412]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d0:	4963      	ldr	r1, [pc, #396]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062e4:	4b5e      	ldr	r3, [pc, #376]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f2:	495b      	ldr	r1, [pc, #364]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006306:	4b56      	ldr	r3, [pc, #344]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006314:	4952      	ldr	r1, [pc, #328]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006328:	4b4d      	ldr	r3, [pc, #308]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	494a      	ldr	r1, [pc, #296]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800634a:	4b45      	ldr	r3, [pc, #276]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006358:	4941      	ldr	r1, [pc, #260]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800636c:	4b3c      	ldr	r3, [pc, #240]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637a:	4939      	ldr	r1, [pc, #228]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d028      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800638e:	4b34      	ldr	r3, [pc, #208]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639c:	4930      	ldr	r1, [pc, #192]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ac:	d106      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4a2b      	ldr	r2, [pc, #172]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b8:	60d3      	str	r3, [r2, #12]
 80063ba:	e011      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f909 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d04d      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f4:	d108      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006402:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006406:	e012      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800640e:	4a14      	ldr	r2, [pc, #80]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006414:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006426:	490e      	ldr	r1, [pc, #56]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006436:	d106      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a08      	ldr	r2, [pc, #32]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006442:	60d3      	str	r3, [r2, #12]
 8006444:	e020      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644e:	d109      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006450:	4b03      	ldr	r3, [pc, #12]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a02      	ldr	r2, [pc, #8]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645a:	60d3      	str	r3, [r2, #12]
 800645c:	e014      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800645e:	bf00      	nop
 8006460:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800646c:	d10c      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	2101      	movs	r1, #1
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f8b5 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d028      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006494:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a2:	4947      	ldr	r1, [pc, #284]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b2:	d106      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064b4:	4b42      	ldr	r3, [pc, #264]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4a41      	ldr	r2, [pc, #260]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064be:	60d3      	str	r3, [r2, #12]
 80064c0:	e011      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	2101      	movs	r1, #1
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f886 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80064e2:	7cfb      	ldrb	r3, [r7, #19]
 80064e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01e      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f2:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006502:	492f      	ldr	r1, [pc, #188]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006514:	d10c      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 f861 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006526:	7cfb      	ldrb	r3, [r7, #19]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	f023 0204 	bic.w	r2, r3, #4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654c:	491c      	ldr	r1, [pc, #112]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006560:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006566:	f023 0218 	bic.w	r2, r3, #24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	4913      	ldr	r1, [pc, #76]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d017      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800658a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006594:	490a      	ldr	r1, [pc, #40]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065a6:	d105      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4a04      	ldr	r2, [pc, #16]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6013      	str	r3, [r2, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000

080065e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065f2:	4b72      	ldr	r3, [pc, #456]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065fe:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0203 	and.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d103      	bne.n	8006616 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
       ||
 8006612:	2b00      	cmp	r3, #0
 8006614:	d142      	bne.n	800669c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e03f      	b.n	800669c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d018      	beq.n	8006656 <RCCEx_PLLSAI1_Config+0x72>
 8006624:	2b03      	cmp	r3, #3
 8006626:	d825      	bhi.n	8006674 <RCCEx_PLLSAI1_Config+0x90>
 8006628:	2b01      	cmp	r3, #1
 800662a:	d002      	beq.n	8006632 <RCCEx_PLLSAI1_Config+0x4e>
 800662c:	2b02      	cmp	r3, #2
 800662e:	d009      	beq.n	8006644 <RCCEx_PLLSAI1_Config+0x60>
 8006630:	e020      	b.n	8006674 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006632:	4b62      	ldr	r3, [pc, #392]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11d      	bne.n	800667a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006642:	e01a      	b.n	800667a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006644:	4b5d      	ldr	r3, [pc, #372]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664c:	2b00      	cmp	r3, #0
 800664e:	d116      	bne.n	800667e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006654:	e013      	b.n	800667e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006656:	4b59      	ldr	r3, [pc, #356]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10f      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006672:	e006      	b.n	8006682 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
      break;
 8006678:	e004      	b.n	8006684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006682:	bf00      	nop
    }

    if(status == HAL_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800668a:	4b4c      	ldr	r3, [pc, #304]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f023 0203 	bic.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4949      	ldr	r1, [pc, #292]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006698:	4313      	orrs	r3, r2
 800669a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 8086 	bne.w	80067b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066a4:	4b45      	ldr	r3, [pc, #276]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a44      	ldr	r2, [pc, #272]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b0:	f7fc f84a 	bl	8002748 <HAL_GetTick>
 80066b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066b6:	e009      	b.n	80066cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066b8:	f7fc f846 	bl	8002748 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d902      	bls.n	80066cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	73fb      	strb	r3, [r7, #15]
        break;
 80066ca:	e005      	b.n	80066d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066cc:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ef      	bne.n	80066b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d168      	bne.n	80067b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d113      	bne.n	800670c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066e4:	4b35      	ldr	r3, [pc, #212]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6892      	ldr	r2, [r2, #8]
 80066f0:	0211      	lsls	r1, r2, #8
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68d2      	ldr	r2, [r2, #12]
 80066f6:	06d2      	lsls	r2, r2, #27
 80066f8:	4311      	orrs	r1, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6852      	ldr	r2, [r2, #4]
 80066fe:	3a01      	subs	r2, #1
 8006700:	0112      	lsls	r2, r2, #4
 8006702:	430a      	orrs	r2, r1
 8006704:	492d      	ldr	r1, [pc, #180]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]
 800670a:	e02d      	b.n	8006768 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d115      	bne.n	800673e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006712:	4b2a      	ldr	r3, [pc, #168]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006718:	4013      	ands	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6892      	ldr	r2, [r2, #8]
 800671e:	0211      	lsls	r1, r2, #8
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6912      	ldr	r2, [r2, #16]
 8006724:	0852      	lsrs	r2, r2, #1
 8006726:	3a01      	subs	r2, #1
 8006728:	0552      	lsls	r2, r2, #21
 800672a:	4311      	orrs	r1, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6852      	ldr	r2, [r2, #4]
 8006730:	3a01      	subs	r2, #1
 8006732:	0112      	lsls	r2, r2, #4
 8006734:	430a      	orrs	r2, r1
 8006736:	4921      	ldr	r1, [pc, #132]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006738:	4313      	orrs	r3, r2
 800673a:	610b      	str	r3, [r1, #16]
 800673c:	e014      	b.n	8006768 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800673e:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6892      	ldr	r2, [r2, #8]
 800674a:	0211      	lsls	r1, r2, #8
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6952      	ldr	r2, [r2, #20]
 8006750:	0852      	lsrs	r2, r2, #1
 8006752:	3a01      	subs	r2, #1
 8006754:	0652      	lsls	r2, r2, #25
 8006756:	4311      	orrs	r1, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6852      	ldr	r2, [r2, #4]
 800675c:	3a01      	subs	r2, #1
 800675e:	0112      	lsls	r2, r2, #4
 8006760:	430a      	orrs	r2, r1
 8006762:	4916      	ldr	r1, [pc, #88]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006764:	4313      	orrs	r3, r2
 8006766:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006768:	4b14      	ldr	r3, [pc, #80]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a13      	ldr	r2, [pc, #76]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800676e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fb ffe8 	bl	8002748 <HAL_GetTick>
 8006778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800677a:	e009      	b.n	8006790 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800677c:	f7fb ffe4 	bl	8002748 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d902      	bls.n	8006790 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	73fb      	strb	r3, [r7, #15]
          break;
 800678e:	e005      	b.n	800679c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ef      	beq.n	800677c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	4904      	ldr	r1, [pc, #16]	; (80067bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000
 80067c0:	07ff800f 	.word	0x07ff800f
 80067c4:	ff9f800f 	.word	0xff9f800f
 80067c8:	f9ff800f 	.word	0xf9ff800f

080067cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067da:	4b72      	ldr	r3, [pc, #456]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067e6:	4b6f      	ldr	r3, [pc, #444]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0203 	and.w	r2, r3, #3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d103      	bne.n	80067fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
       ||
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d142      	bne.n	8006884 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	73fb      	strb	r3, [r7, #15]
 8006802:	e03f      	b.n	8006884 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b03      	cmp	r3, #3
 800680a:	d018      	beq.n	800683e <RCCEx_PLLSAI2_Config+0x72>
 800680c:	2b03      	cmp	r3, #3
 800680e:	d825      	bhi.n	800685c <RCCEx_PLLSAI2_Config+0x90>
 8006810:	2b01      	cmp	r3, #1
 8006812:	d002      	beq.n	800681a <RCCEx_PLLSAI2_Config+0x4e>
 8006814:	2b02      	cmp	r3, #2
 8006816:	d009      	beq.n	800682c <RCCEx_PLLSAI2_Config+0x60>
 8006818:	e020      	b.n	800685c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800681a:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11d      	bne.n	8006862 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800682a:	e01a      	b.n	8006862 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800682c:	4b5d      	ldr	r3, [pc, #372]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d116      	bne.n	8006866 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800683c:	e013      	b.n	8006866 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800683e:	4b59      	ldr	r3, [pc, #356]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10f      	bne.n	800686a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800684a:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800685a:	e006      	b.n	800686a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
      break;
 8006860:	e004      	b.n	800686c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006862:	bf00      	nop
 8006864:	e002      	b.n	800686c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006866:	bf00      	nop
 8006868:	e000      	b.n	800686c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800686a:	bf00      	nop
    }

    if(status == HAL_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d108      	bne.n	8006884 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006872:	4b4c      	ldr	r3, [pc, #304]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f023 0203 	bic.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4949      	ldr	r1, [pc, #292]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006880:	4313      	orrs	r3, r2
 8006882:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 8086 	bne.w	8006998 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800688c:	4b45      	ldr	r3, [pc, #276]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a44      	ldr	r2, [pc, #272]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006898:	f7fb ff56 	bl	8002748 <HAL_GetTick>
 800689c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800689e:	e009      	b.n	80068b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068a0:	f7fb ff52 	bl	8002748 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d902      	bls.n	80068b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	73fb      	strb	r3, [r7, #15]
        break;
 80068b2:	e005      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068b4:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ef      	bne.n	80068a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d168      	bne.n	8006998 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d113      	bne.n	80068f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068cc:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	0211      	lsls	r1, r2, #8
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68d2      	ldr	r2, [r2, #12]
 80068de:	06d2      	lsls	r2, r2, #27
 80068e0:	4311      	orrs	r1, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6852      	ldr	r2, [r2, #4]
 80068e6:	3a01      	subs	r2, #1
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	430a      	orrs	r2, r1
 80068ec:	492d      	ldr	r1, [pc, #180]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	614b      	str	r3, [r1, #20]
 80068f2:	e02d      	b.n	8006950 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d115      	bne.n	8006926 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068fa:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	0211      	lsls	r1, r2, #8
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6912      	ldr	r2, [r2, #16]
 800690c:	0852      	lsrs	r2, r2, #1
 800690e:	3a01      	subs	r2, #1
 8006910:	0552      	lsls	r2, r2, #21
 8006912:	4311      	orrs	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6852      	ldr	r2, [r2, #4]
 8006918:	3a01      	subs	r2, #1
 800691a:	0112      	lsls	r2, r2, #4
 800691c:	430a      	orrs	r2, r1
 800691e:	4921      	ldr	r1, [pc, #132]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	614b      	str	r3, [r1, #20]
 8006924:	e014      	b.n	8006950 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006926:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800692c:	4013      	ands	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6892      	ldr	r2, [r2, #8]
 8006932:	0211      	lsls	r1, r2, #8
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6952      	ldr	r2, [r2, #20]
 8006938:	0852      	lsrs	r2, r2, #1
 800693a:	3a01      	subs	r2, #1
 800693c:	0652      	lsls	r2, r2, #25
 800693e:	4311      	orrs	r1, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6852      	ldr	r2, [r2, #4]
 8006944:	3a01      	subs	r2, #1
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	430a      	orrs	r2, r1
 800694a:	4916      	ldr	r1, [pc, #88]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800694c:	4313      	orrs	r3, r2
 800694e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006950:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fb fef4 	bl	8002748 <HAL_GetTick>
 8006960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006962:	e009      	b.n	8006978 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006964:	f7fb fef0 	bl	8002748 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d902      	bls.n	8006978 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	73fb      	strb	r3, [r7, #15]
          break;
 8006976:	e005      	b.n	8006984 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ef      	beq.n	8006964 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	4904      	ldr	r1, [pc, #16]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006994:	4313      	orrs	r3, r2
 8006996:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000
 80069a8:	07ff800f 	.word	0x07ff800f
 80069ac:	ff9f800f 	.word	0xff9f800f
 80069b0:	f9ff800f 	.word	0xf9ff800f

080069b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e095      	b.n	8006af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e005      	b.n	80069ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fb fb3e 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a2c:	d902      	bls.n	8006a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e002      	b.n	8006a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a42:	d007      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	ea42 0103 	orr.w	r1, r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 0204 	and.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ad0:	ea42 0103 	orr.w	r1, r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e042      	b.n	8006b92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fb fb28 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0201 	bic.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbb3 	bl	80072b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8b4 	bl	8006cb8 <UART_SetConfig>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e01b      	b.n	8006b92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc32 	bl	80073f4 <UART_CheckIdleState>
 8006b90:	4603      	mov	r3, r0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b08a      	sub	sp, #40	; 0x28
 8006b9e:	af02      	add	r7, sp, #8
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d17c      	bne.n	8006cae <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Transmit+0x26>
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e075      	b.n	8006cb0 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2221      	movs	r2, #33	; 0x21
 8006bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bd4:	f7fb fdb8 	bl	8002748 <HAL_GetTick>
 8006bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d108      	bne.n	8006c06 <HAL_UART_Transmit+0x6c>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e003      	b.n	8006c0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c0e:	e031      	b.n	8006c74 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2200      	movs	r2, #0
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fc94 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e03e      	b.n	8006cb0 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	b292      	uxth	r2, r2
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e008      	b.n	8006c62 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b292      	uxth	r2, r2
 8006c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1c7      	bne.n	8006c10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2140      	movs	r1, #64	; 0x40
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fc5c 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e006      	b.n	8006cb0 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e000      	b.n	8006cb0 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
  }
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cbc:	b08c      	sub	sp, #48	; 0x30
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4baa      	ldr	r3, [pc, #680]	; (8006f90 <UART_SetConfig+0x2d8>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a9f      	ldr	r2, [pc, #636]	; (8006f94 <UART_SetConfig+0x2dc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d20:	4313      	orrs	r3, r2
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	f023 010f 	bic.w	r1, r3, #15
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a90      	ldr	r2, [pc, #576]	; (8006f98 <UART_SetConfig+0x2e0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d125      	bne.n	8006da8 <UART_SetConfig+0xf0>
 8006d5c:	4b8f      	ldr	r3, [pc, #572]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d81a      	bhi.n	8006da0 <UART_SetConfig+0xe8>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0xb8>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d91 	.word	0x08006d91
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d86:	e116      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8e:	e112      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006d90:	2304      	movs	r3, #4
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d96:	e10e      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006d98:	2308      	movs	r3, #8
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9e:	e10a      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006da0:	2310      	movs	r3, #16
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da6:	e106      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a7c      	ldr	r2, [pc, #496]	; (8006fa0 <UART_SetConfig+0x2e8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d138      	bne.n	8006e24 <UART_SetConfig+0x16c>
 8006db2:	4b7a      	ldr	r3, [pc, #488]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	2b0c      	cmp	r3, #12
 8006dbe:	d82d      	bhi.n	8006e1c <UART_SetConfig+0x164>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x110>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dfd 	.word	0x08006dfd
 8006dcc:	08006e1d 	.word	0x08006e1d
 8006dd0:	08006e1d 	.word	0x08006e1d
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	08006e1d 	.word	0x08006e1d
 8006de0:	08006e1d 	.word	0x08006e1d
 8006de4:	08006e1d 	.word	0x08006e1d
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e0d8      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e04:	2302      	movs	r3, #2
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e0d4      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e0d0      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1a:	e0cc      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e22:	e0c8      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5e      	ldr	r2, [pc, #376]	; (8006fa4 <UART_SetConfig+0x2ec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d125      	bne.n	8006e7a <UART_SetConfig+0x1c2>
 8006e2e:	4b5b      	ldr	r3, [pc, #364]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d016      	beq.n	8006e6a <UART_SetConfig+0x1b2>
 8006e3c:	2b30      	cmp	r3, #48	; 0x30
 8006e3e:	d818      	bhi.n	8006e72 <UART_SetConfig+0x1ba>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d00a      	beq.n	8006e5a <UART_SetConfig+0x1a2>
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d814      	bhi.n	8006e72 <UART_SetConfig+0x1ba>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <UART_SetConfig+0x19a>
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d008      	beq.n	8006e62 <UART_SetConfig+0x1aa>
 8006e50:	e00f      	b.n	8006e72 <UART_SetConfig+0x1ba>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e58:	e0ad      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e60:	e0a9      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e62:	2304      	movs	r3, #4
 8006e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e68:	e0a5      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e70:	e0a1      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e72:	2310      	movs	r3, #16
 8006e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e78:	e09d      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a4a      	ldr	r2, [pc, #296]	; (8006fa8 <UART_SetConfig+0x2f0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d125      	bne.n	8006ed0 <UART_SetConfig+0x218>
 8006e84:	4b45      	ldr	r3, [pc, #276]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e90:	d016      	beq.n	8006ec0 <UART_SetConfig+0x208>
 8006e92:	2bc0      	cmp	r3, #192	; 0xc0
 8006e94:	d818      	bhi.n	8006ec8 <UART_SetConfig+0x210>
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d00a      	beq.n	8006eb0 <UART_SetConfig+0x1f8>
 8006e9a:	2b80      	cmp	r3, #128	; 0x80
 8006e9c:	d814      	bhi.n	8006ec8 <UART_SetConfig+0x210>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <UART_SetConfig+0x1f0>
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d008      	beq.n	8006eb8 <UART_SetConfig+0x200>
 8006ea6:	e00f      	b.n	8006ec8 <UART_SetConfig+0x210>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eae:	e082      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	e07e      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ebe:	e07a      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec6:	e076      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006ec8:	2310      	movs	r3, #16
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ece:	e072      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a35      	ldr	r2, [pc, #212]	; (8006fac <UART_SetConfig+0x2f4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d12a      	bne.n	8006f30 <UART_SetConfig+0x278>
 8006eda:	4b30      	ldr	r3, [pc, #192]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee8:	d01a      	beq.n	8006f20 <UART_SetConfig+0x268>
 8006eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eee:	d81b      	bhi.n	8006f28 <UART_SetConfig+0x270>
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef4:	d00c      	beq.n	8006f10 <UART_SetConfig+0x258>
 8006ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efa:	d815      	bhi.n	8006f28 <UART_SetConfig+0x270>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <UART_SetConfig+0x250>
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f04:	d008      	beq.n	8006f18 <UART_SetConfig+0x260>
 8006f06:	e00f      	b.n	8006f28 <UART_SetConfig+0x270>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e052      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f10:	2302      	movs	r3, #2
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e04e      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e04a      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f20:	2308      	movs	r3, #8
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f26:	e046      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2e:	e042      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <UART_SetConfig+0x2dc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d13a      	bne.n	8006fb0 <UART_SetConfig+0x2f8>
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <UART_SetConfig+0x2e4>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f48:	d01a      	beq.n	8006f80 <UART_SetConfig+0x2c8>
 8006f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f4e:	d81b      	bhi.n	8006f88 <UART_SetConfig+0x2d0>
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d00c      	beq.n	8006f70 <UART_SetConfig+0x2b8>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d815      	bhi.n	8006f88 <UART_SetConfig+0x2d0>
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <UART_SetConfig+0x2b0>
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d008      	beq.n	8006f78 <UART_SetConfig+0x2c0>
 8006f66:	e00f      	b.n	8006f88 <UART_SetConfig+0x2d0>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e022      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f70:	2302      	movs	r3, #2
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e01e      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e01a      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e016      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8e:	e012      	b.n	8006fb6 <UART_SetConfig+0x2fe>
 8006f90:	cfff69f3 	.word	0xcfff69f3
 8006f94:	40008000 	.word	0x40008000
 8006f98:	40013800 	.word	0x40013800
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40004400 	.word	0x40004400
 8006fa4:	40004800 	.word	0x40004800
 8006fa8:	40004c00 	.word	0x40004c00
 8006fac:	40005000 	.word	0x40005000
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4aae      	ldr	r2, [pc, #696]	; (8007274 <UART_SetConfig+0x5bc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	f040 8097 	bne.w	80070f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d823      	bhi.n	8007012 <UART_SetConfig+0x35a>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x318>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08007013 	.word	0x08007013
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08007013 	.word	0x08007013
 8006fe0:	08007003 	.word	0x08007003
 8006fe4:	08007013 	.word	0x08007013
 8006fe8:	08007013 	.word	0x08007013
 8006fec:	08007013 	.word	0x08007013
 8006ff0:	0800700b 	.word	0x0800700b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff4:	f7fe feca 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ffa:	e010      	b.n	800701e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ffc:	4b9e      	ldr	r3, [pc, #632]	; (8007278 <UART_SetConfig+0x5c0>)
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007000:	e00d      	b.n	800701e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007002:	f7fe fe2b 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007008:	e009      	b.n	800701e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007010:	e005      	b.n	800701e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800701c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8130 	beq.w	8007286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	4a94      	ldr	r2, [pc, #592]	; (800727c <UART_SetConfig+0x5c4>)
 800702c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007030:	461a      	mov	r2, r3
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	fbb3 f3f2 	udiv	r3, r3, r2
 8007038:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4413      	add	r3, r2
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	429a      	cmp	r2, r3
 8007048:	d305      	bcc.n	8007056 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	429a      	cmp	r2, r3
 8007054:	d903      	bls.n	800705e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800705c:	e113      	b.n	8007286 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	2200      	movs	r2, #0
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	60fa      	str	r2, [r7, #12]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	4a84      	ldr	r2, [pc, #528]	; (800727c <UART_SetConfig+0x5c4>)
 800706c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007070:	b29b      	uxth	r3, r3
 8007072:	2200      	movs	r2, #0
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007080:	f7f9 fe1a 	bl	8000cb8 <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	020b      	lsls	r3, r1, #8
 8007096:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800709a:	0202      	lsls	r2, r0, #8
 800709c:	6979      	ldr	r1, [r7, #20]
 800709e:	6849      	ldr	r1, [r1, #4]
 80070a0:	0849      	lsrs	r1, r1, #1
 80070a2:	2000      	movs	r0, #0
 80070a4:	460c      	mov	r4, r1
 80070a6:	4605      	mov	r5, r0
 80070a8:	eb12 0804 	adds.w	r8, r2, r4
 80070ac:	eb43 0905 	adc.w	r9, r3, r5
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	469a      	mov	sl, r3
 80070b8:	4693      	mov	fp, r2
 80070ba:	4652      	mov	r2, sl
 80070bc:	465b      	mov	r3, fp
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	f7f9 fdf9 	bl	8000cb8 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4613      	mov	r3, r2
 80070cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d4:	d308      	bcc.n	80070e8 <UART_SetConfig+0x430>
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070dc:	d204      	bcs.n	80070e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a3a      	ldr	r2, [r7, #32]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	e0ce      	b.n	8007286 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070ee:	e0ca      	b.n	8007286 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f8:	d166      	bne.n	80071c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80070fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d827      	bhi.n	8007152 <UART_SetConfig+0x49a>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x450>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800712d 	.word	0x0800712d
 800710c:	08007135 	.word	0x08007135
 8007110:	0800713d 	.word	0x0800713d
 8007114:	08007153 	.word	0x08007153
 8007118:	08007143 	.word	0x08007143
 800711c:	08007153 	.word	0x08007153
 8007120:	08007153 	.word	0x08007153
 8007124:	08007153 	.word	0x08007153
 8007128:	0800714b 	.word	0x0800714b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800712c:	f7fe fe2e 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8007130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007132:	e014      	b.n	800715e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007134:	f7fe fe40 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8007138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800713a:	e010      	b.n	800715e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800713c:	4b4e      	ldr	r3, [pc, #312]	; (8007278 <UART_SetConfig+0x5c0>)
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007140:	e00d      	b.n	800715e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007142:	f7fe fd8b 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007148:	e009      	b.n	800715e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007150:	e005      	b.n	800715e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800715c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8090 	beq.w	8007286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	4a44      	ldr	r2, [pc, #272]	; (800727c <UART_SetConfig+0x5c4>)
 800716c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007170:	461a      	mov	r2, r3
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	fbb3 f3f2 	udiv	r3, r3, r2
 8007178:	005a      	lsls	r2, r3, #1
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	441a      	add	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	fbb2 f3f3 	udiv	r3, r2, r3
 800718a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b0f      	cmp	r3, #15
 8007190:	d916      	bls.n	80071c0 <UART_SetConfig+0x508>
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d212      	bcs.n	80071c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f023 030f 	bic.w	r3, r3, #15
 80071a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	8bfb      	ldrh	r3, [r7, #30]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	8bfa      	ldrh	r2, [r7, #30]
 80071bc:	60da      	str	r2, [r3, #12]
 80071be:	e062      	b.n	8007286 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071c6:	e05e      	b.n	8007286 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d828      	bhi.n	8007222 <UART_SetConfig+0x56a>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <UART_SetConfig+0x520>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	08007205 	.word	0x08007205
 80071e0:	0800720d 	.word	0x0800720d
 80071e4:	08007223 	.word	0x08007223
 80071e8:	08007213 	.word	0x08007213
 80071ec:	08007223 	.word	0x08007223
 80071f0:	08007223 	.word	0x08007223
 80071f4:	08007223 	.word	0x08007223
 80071f8:	0800721b 	.word	0x0800721b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071fc:	f7fe fdc6 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007202:	e014      	b.n	800722e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007204:	f7fe fdd8 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <UART_SetConfig+0x5c0>)
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007210:	e00d      	b.n	800722e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007212:	f7fe fd23 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007218:	e009      	b.n	800722e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007220:	e005      	b.n	800722e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800722c:	bf00      	nop
    }

    if (pclk != 0U)
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d028      	beq.n	8007286 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	4a10      	ldr	r2, [pc, #64]	; (800727c <UART_SetConfig+0x5c4>)
 800723a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723e:	461a      	mov	r2, r3
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	fbb3 f2f2 	udiv	r2, r3, r2
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	441a      	add	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d910      	bls.n	8007280 <UART_SetConfig+0x5c8>
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007264:	d20c      	bcs.n	8007280 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b29a      	uxth	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e009      	b.n	8007286 <UART_SetConfig+0x5ce>
 8007272:	bf00      	nop
 8007274:	40008000 	.word	0x40008000
 8007278:	00f42400 	.word	0x00f42400
 800727c:	0800e168 	.word	0x0800e168
      }
      else
      {
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2201      	movs	r2, #1
 800728a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2201      	movs	r2, #1
 8007292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80072a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3730      	adds	r7, #48	; 0x30
 80072aa:	46bd      	mov	sp, r7
 80072ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ae:	d10a      	bne.n	80073c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b098      	sub	sp, #96	; 0x60
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007404:	f7fb f9a0 	bl	8002748 <HAL_GetTick>
 8007408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b08      	cmp	r3, #8
 8007416:	d12f      	bne.n	8007478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007420:	2200      	movs	r2, #0
 8007422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f88e 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d022      	beq.n	8007478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e063      	b.n	8007540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b04      	cmp	r3, #4
 8007484:	d149      	bne.n	800751a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748e:	2200      	movs	r2, #0
 8007490:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f857 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d03c      	beq.n	800751a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
 80074c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f2:	61fa      	str	r2, [r7, #28]
 80074f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	69b9      	ldr	r1, [r7, #24]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e012      	b.n	8007540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3758      	adds	r7, #88	; 0x58
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007558:	e049      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d045      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fb f8f1 	bl	8002748 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <UART_WaitOnFlagUntilTimeout+0x30>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e048      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	d031      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b08      	cmp	r3, #8
 8007596:	d110      	bne.n	80075ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2208      	movs	r2, #8
 800759e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f838 	bl	8007616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2208      	movs	r2, #8
 80075aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e029      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c8:	d111      	bne.n	80075ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f81e 	bl	8007616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00f      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d0a6      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007616:	b480      	push	{r7}
 8007618:	b095      	sub	sp, #84	; 0x54
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
 800763e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007666:	f023 0301 	bic.w	r3, r3, #1
 800766a:	64bb      	str	r3, [r7, #72]	; 0x48
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800767a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e3      	bne.n	8007650 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d118      	bne.n	80076c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	60bb      	str	r3, [r7, #8]
   return(result);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f023 0310 	bic.w	r3, r3, #16
 80076a4:	647b      	str	r3, [r7, #68]	; 0x44
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6979      	ldr	r1, [r7, #20]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	613b      	str	r3, [r7, #16]
   return(result);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076d6:	bf00      	nop
 80076d8:	3754      	adds	r7, #84	; 0x54
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e027      	b.n	8007748 <HAL_UARTEx_DisableFifoMode+0x66>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2224      	movs	r2, #36	; 0x24
 8007704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007726:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007768:	2302      	movs	r3, #2
 800776a:	e02d      	b.n	80077c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0201 	bic.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f84f 	bl	800784c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e02d      	b.n	8007844 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2224      	movs	r2, #36	; 0x24
 80077f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f811 	bl	800784c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007858:	2b00      	cmp	r3, #0
 800785a:	d108      	bne.n	800786e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800786c:	e031      	b.n	80078d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800786e:	2308      	movs	r3, #8
 8007870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007872:	2308      	movs	r3, #8
 8007874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	0e5b      	lsrs	r3, r3, #25
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	0f5b      	lsrs	r3, r3, #29
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	7b3a      	ldrb	r2, [r7, #12]
 800789a:	4911      	ldr	r1, [pc, #68]	; (80078e0 <UARTEx_SetNbDataToProcess+0x94>)
 800789c:	5c8a      	ldrb	r2, [r1, r2]
 800789e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078a2:	7b3a      	ldrb	r2, [r7, #12]
 80078a4:	490f      	ldr	r1, [pc, #60]	; (80078e4 <UARTEx_SetNbDataToProcess+0x98>)
 80078a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	7b7a      	ldrb	r2, [r7, #13]
 80078b8:	4909      	ldr	r1, [pc, #36]	; (80078e0 <UARTEx_SetNbDataToProcess+0x94>)
 80078ba:	5c8a      	ldrb	r2, [r1, r2]
 80078bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078c0:	7b7a      	ldrb	r2, [r7, #13]
 80078c2:	4908      	ldr	r1, [pc, #32]	; (80078e4 <UARTEx_SetNbDataToProcess+0x98>)
 80078c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	0800e180 	.word	0x0800e180
 80078e4:	0800e188 	.word	0x0800e188

080078e8 <neai_classification_init>:
 80078e8:	4958      	ldr	r1, [pc, #352]	; (8007a4c <neai_classification_init+0x164>)
 80078ea:	4b59      	ldr	r3, [pc, #356]	; (8007a50 <neai_classification_init+0x168>)
 80078ec:	4a59      	ldr	r2, [pc, #356]	; (8007a54 <neai_classification_init+0x16c>)
 80078ee:	b430      	push	{r4, r5}
 80078f0:	f44f 7480 	mov.w	r4, #256	; 0x100
 80078f4:	800c      	strh	r4, [r1, #0]
 80078f6:	4958      	ldr	r1, [pc, #352]	; (8007a58 <neai_classification_init+0x170>)
 80078f8:	f44f 7400 	mov.w	r4, #512	; 0x200
 80078fc:	800c      	strh	r4, [r1, #0]
 80078fe:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8007902:	f104 7440 	add.w	r4, r4, #50331648	; 0x3000000
 8007906:	e9c3 5400 	strd	r5, r4, [r3]
 800790a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800790e:	4c53      	ldr	r4, [pc, #332]	; (8007a5c <neai_classification_init+0x174>)
 8007910:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8007914:	4d52      	ldr	r5, [pc, #328]	; (8007a60 <neai_classification_init+0x178>)
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800791c:	6055      	str	r5, [r2, #4]
 800791e:	4951      	ldr	r1, [pc, #324]	; (8007a64 <neai_classification_init+0x17c>)
 8007920:	4c51      	ldr	r4, [pc, #324]	; (8007a68 <neai_classification_init+0x180>)
 8007922:	f500 5084 	add.w	r0, r0, #4224	; 0x1080
 8007926:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 800792a:	eeb4 7a67 	vcmp.f32	s14, s15
 800792e:	6015      	str	r5, [r2, #0]
 8007930:	3010      	adds	r0, #16
 8007932:	226a      	movs	r2, #106	; 0x6a
 8007934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007938:	6020      	str	r0, [r4, #0]
 800793a:	600a      	str	r2, [r1, #0]
 800793c:	f040 8081 	bne.w	8007a42 <neai_classification_init+0x15a>
 8007940:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8007944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007948:	eeb4 7a67 	vcmp.f32	s14, s15
 800794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007950:	d177      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007952:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007a6c <neai_classification_init+0x184>
 8007956:	edd3 6a30 	vldr	s13, [r3, #192]	; 0xc0
 800795a:	eef4 6a47 	vcmp.f32	s13, s14
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	d16e      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007964:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8007968:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007970:	d167      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007972:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8007976:	eeb4 7a67 	vcmp.f32	s14, s15
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	d160      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007980:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8007984:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798c:	d159      	bne.n	8007a42 <neai_classification_init+0x15a>
 800798e:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8007992:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8007996:	eeb4 7a67 	vcmp.f32	s14, s15
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	d150      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079a0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80079a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ac:	d149      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079ae:	eddf 7a30 	vldr	s15, [pc, #192]	; 8007a70 <neai_classification_init+0x188>
 80079b2:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80079b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80079ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079be:	d140      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079c0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80079c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079cc:	d139      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079ce:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80079d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	d132      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079dc:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80079e0:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80079e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80079e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ec:	d129      	bne.n	8007a42 <neai_classification_init+0x15a>
 80079ee:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 80079f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80079f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80079fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fe:	d120      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007a00:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8007a04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0c:	d119      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007a0e:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8007a12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	d112      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007a1c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8007a20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a28:	d10b      	bne.n	8007a42 <neai_classification_init+0x15a>
 8007a2a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a74 <neai_classification_init+0x18c>
 8007a2e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8007a32:	eeb4 7a67 	vcmp.f32	s14, s15
 8007a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3a:	bf14      	ite	ne
 8007a3c:	207d      	movne	r0, #125	; 0x7d
 8007a3e:	2000      	moveq	r0, #0
 8007a40:	e000      	b.n	8007a44 <neai_classification_init+0x15c>
 8007a42:	207d      	movs	r0, #125	; 0x7d
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <neai_classification_init+0x190>)
 8007a46:	7018      	strb	r0, [r3, #0]
 8007a48:	bc30      	pop	{r4, r5}
 8007a4a:	4770      	bx	lr
 8007a4c:	20001722 	.word	0x20001722
 8007a50:	2000172c 	.word	0x2000172c
 8007a54:	20001724 	.word	0x20001724
 8007a58:	20001720 	.word	0x20001720
 8007a5c:	20001718 	.word	0x20001718
 8007a60:	01800100 	.word	0x01800100
 8007a64:	2000171c 	.word	0x2000171c
 8007a68:	20001714 	.word	0x20001714
 8007a6c:	44800000 	.word	0x44800000
 8007a70:	42a60000 	.word	0x42a60000
 8007a74:	49742400 	.word	0x49742400
 8007a78:	20000021 	.word	0x20000021

08007a7c <neai_classification>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	ed2d 8b06 	vpush	{d8-d10}
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <neai_classification+0x24>)
 8007a86:	b089      	sub	sp, #36	; 0x24
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	9205      	str	r2, [sp, #20]
 8007a8c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8007a90:	b143      	cbz	r3, 8007aa4 <neai_classification+0x28>
 8007a92:	9803      	ldr	r0, [sp, #12]
 8007a94:	b009      	add	sp, #36	; 0x24
 8007a96:	ecbd 8b06 	vpop	{d8-d10}
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000021 	.word	0x20000021
 8007aa4:	48c9      	ldr	r0, [pc, #804]	; (8007dcc <neai_classification+0x350>)
 8007aa6:	f8df b338 	ldr.w	fp, [pc, #824]	; 8007de0 <neai_classification+0x364>
 8007aaa:	460f      	mov	r7, r1
 8007aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f001 fc75 	bl	80093a0 <memset>
 8007ab6:	4bc6      	ldr	r3, [pc, #792]	; (8007dd0 <neai_classification+0x354>)
 8007ab8:	881d      	ldrh	r5, [r3, #0]
 8007aba:	4bc6      	ldr	r3, [pc, #792]	; (8007dd4 <neai_classification+0x358>)
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4bc6      	ldr	r3, [pc, #792]	; (8007dd8 <neai_classification+0x35c>)
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	086b      	lsrs	r3, r5, #1
 8007ac4:	eb0b 0685 	add.w	r6, fp, r5, lsl #2
 8007ac8:	9302      	str	r3, [sp, #8]
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	f000 8399 	beq.w	8008202 <neai_classification+0x786>
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	49c2      	ldr	r1, [pc, #776]	; (8007ddc <neai_classification+0x360>)
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	18ac      	adds	r4, r5, r2
 8007ada:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ade:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007ae2:	4bbf      	ldr	r3, [pc, #764]	; (8007de0 <neai_classification+0x364>)
 8007ae4:	f04f 0c00 	mov.w	ip, #0
 8007ae8:	f852 0b04 	ldr.w	r0, [r2], #4
 8007aec:	f843 0b04 	str.w	r0, [r3], #4
 8007af0:	4294      	cmp	r4, r2
 8007af2:	f841 cb04 	str.w	ip, [r1], #4
 8007af6:	d1f7      	bne.n	8007ae8 <neai_classification+0x6c>
 8007af8:	2d01      	cmp	r5, #1
 8007afa:	eddb 7a00 	vldr	s15, [fp]
 8007afe:	d906      	bls.n	8007b0e <neai_classification+0x92>
 8007b00:	4bb8      	ldr	r3, [pc, #736]	; (8007de4 <neai_classification+0x368>)
 8007b02:	ecb3 7a01 	vldmia	r3!, {s14}
 8007b06:	429e      	cmp	r6, r3
 8007b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b0c:	d1f9      	bne.n	8007b02 <neai_classification+0x86>
 8007b0e:	ee07 5a10 	vmov	s14, r5
 8007b12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b16:	4bb2      	ldr	r3, [pc, #712]	; (8007de0 <neai_classification+0x364>)
 8007b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b1c:	46a8      	mov	r8, r5
 8007b1e:	edd3 7a00 	vldr	s15, [r3]
 8007b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b26:	ece3 7a01 	vstmia	r3!, {s15}
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	d1f7      	bne.n	8007b1e <neai_classification+0xa2>
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7f8 fd10 	bl	8000554 <__aeabi_i2d>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007b3e:	f7f8 fe9d 	bl	800087c <__aeabi_ddiv>
 8007b42:	f7f9 f869 	bl	8000c18 <__aeabi_d2f>
 8007b46:	07ea      	lsls	r2, r5, #31
 8007b48:	ee09 0a10 	vmov	s18, r0
 8007b4c:	f100 8362 	bmi.w	8008214 <neai_classification+0x798>
 8007b50:	9902      	ldr	r1, [sp, #8]
 8007b52:	2400      	movs	r4, #0
 8007b54:	3401      	adds	r4, #1
 8007b56:	b2a4      	uxth	r4, r4
 8007b58:	fa48 f304 	asr.w	r3, r8, r4
 8007b5c:	07db      	lsls	r3, r3, #31
 8007b5e:	d5f9      	bpl.n	8007b54 <neai_classification+0xd8>
 8007b60:	f1b8 0f01 	cmp.w	r8, #1
 8007b64:	dd22      	ble.n	8007bac <neai_classification+0x130>
 8007b66:	2000      	movs	r0, #0
 8007b68:	f8df c274 	ldr.w	ip, [pc, #628]	; 8007de0 <neai_classification+0x364>
 8007b6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b70:	4602      	mov	r2, r0
 8007b72:	b283      	uxth	r3, r0
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d909      	bls.n	8007b8c <neai_classification+0x110>
 8007b78:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8007b7c:	f8dc e000 	ldr.w	lr, [ip]
 8007b80:	f8d3 9000 	ldr.w	r9, [r3]
 8007b84:	f8cc 9000 	str.w	r9, [ip]
 8007b88:	f8c3 e000 	str.w	lr, [r3]
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	460b      	mov	r3, r1
 8007b90:	d305      	bcc.n	8007b9e <neai_classification+0x122>
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	b292      	uxth	r2, r2
 8007b96:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d2f9      	bcs.n	8007b92 <neai_classification+0x116>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4540      	cmp	r0, r8
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f10c 0c04 	add.w	ip, ip, #4
 8007baa:	dbe2      	blt.n	8007b72 <neai_classification+0xf6>
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	f000 808f 	beq.w	8007cd0 <neai_classification+0x254>
 8007bb2:	eddf 8a8d 	vldr	s17, [pc, #564]	; 8007de8 <neai_classification+0x36c>
 8007bb6:	f8df a224 	ldr.w	sl, [pc, #548]	; 8007ddc <neai_classification+0x360>
 8007bba:	e9cd 6106 	strd	r6, r1, [sp, #24]
 8007bbe:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8007bc2:	eeb0 aa68 	vmov.f32	s20, s17
 8007bc6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	f04f 0801 	mov.w	r8, #1
 8007bd2:	eef0 aa49 	vmov.f32	s21, s18
 8007bd6:	4646      	mov	r6, r8
 8007bd8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007bdc:	fa1f f888 	uxth.w	r8, r8
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	d051      	beq.n	8007c88 <neai_classification+0x20c>
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	d04f      	beq.n	8007c88 <neai_classification+0x20c>
 8007be8:	2200      	movs	r2, #0
 8007bea:	42ae      	cmp	r6, r5
 8007bec:	4631      	mov	r1, r6
 8007bee:	eef0 6a4a 	vmov.f32	s13, s20
 8007bf2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007bf6:	bf28      	it	cs
 8007bf8:	4629      	movcs	r1, r5
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	18f0      	adds	r0, r6, r3
 8007bfe:	b280      	uxth	r0, r0
 8007c00:	eb0b 0c80 	add.w	ip, fp, r0, lsl #2
 8007c04:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8007c08:	eddc 5a00 	vldr	s11, [ip]
 8007c0c:	ed90 7a00 	vldr	s14, [r0]
 8007c10:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8007c14:	ee27 5a26 	vmul.f32	s10, s14, s13
 8007c18:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8007c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c20:	eb0b 0e83 	add.w	lr, fp, r3, lsl #2
 8007c24:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007c28:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007c2c:	edde 5a00 	vldr	s11, [lr]
 8007c30:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8007c34:	edcc 5a00 	vstr	s11, [ip]
 8007c38:	edde 5a00 	vldr	s11, [lr]
 8007c3c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007c40:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 8007c44:	ed8e 6a00 	vstr	s12, [lr]
 8007c48:	ed9c 6a00 	vldr	s12, [ip]
 8007c4c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007c50:	4443      	add	r3, r8
 8007c52:	ed80 6a00 	vstr	s12, [r0]
 8007c56:	ed9c 6a00 	vldr	s12, [ip]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	ed8c 7a00 	vstr	s14, [ip]
 8007c66:	d3c9      	bcc.n	8007bfc <neai_classification+0x180>
 8007c68:	3201      	adds	r2, #1
 8007c6a:	ee68 5aa6 	vmul.f32	s11, s17, s13
 8007c6e:	ee28 6aa7 	vmul.f32	s12, s17, s15
 8007c72:	ee27 7a88 	vmul.f32	s14, s15, s16
 8007c76:	ee66 6a88 	vmul.f32	s13, s13, s16
 8007c7a:	b293      	uxth	r3, r2
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	ee77 7a65 	vsub.f32	s15, s14, s11
 8007c82:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007c86:	d3b9      	bcc.n	8007bfc <neai_classification+0x180>
 8007c88:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8007c8c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8007c90:	ee20 0a09 	vmul.f32	s0, s0, s18
 8007c94:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	f100 82d0 	bmi.w	8008240 <neai_classification+0x7c4>
 8007ca0:	eef1 8ac0 	vsqrt.f32	s17, s0
 8007ca4:	ee38 8a29 	vadd.f32	s16, s16, s19
 8007ca8:	eef1 8a68 	vneg.f32	s17, s17
 8007cac:	ee28 0a09 	vmul.f32	s0, s16, s18
 8007cb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb8:	f100 82bd 	bmi.w	8008236 <neai_classification+0x7ba>
 8007cbc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007cc0:	f109 0901 	add.w	r9, r9, #1
 8007cc4:	45a1      	cmp	r9, r4
 8007cc6:	d186      	bne.n	8007bd6 <neai_classification+0x15a>
 8007cc8:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
 8007ccc:	eeb0 9a6a 	vmov.f32	s18, s21
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	f000 828c 	beq.w	80081ee <neai_classification+0x772>
 8007cd6:	4a41      	ldr	r2, [pc, #260]	; (8007ddc <neai_classification+0x360>)
 8007cd8:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <neai_classification+0x364>)
 8007cda:	4610      	mov	r0, r2
 8007cdc:	ed93 7a00 	vldr	s14, [r3]
 8007ce0:	edd0 7a00 	vldr	s15, [r0]
 8007ce4:	ee27 7a09 	vmul.f32	s14, s14, s18
 8007ce8:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007cec:	eca3 7a01 	vstmia	r3!, {s14}
 8007cf0:	429e      	cmp	r6, r3
 8007cf2:	ece0 7a01 	vstmia	r0!, {s15}
 8007cf6:	d1f1      	bne.n	8007cdc <neai_classification+0x260>
 8007cf8:	b371      	cbz	r1, 8007d58 <neai_classification+0x2dc>
 8007cfa:	483a      	ldr	r0, [pc, #232]	; (8007de4 <neai_classification+0x368>)
 8007cfc:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <neai_classification+0x360>)
 8007cfe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007d02:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d06:	ecf0 7a01 	vldmia	r0!, {s15}
 8007d0a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d16:	ece3 7a01 	vstmia	r3!, {s15}
 8007d1a:	428b      	cmp	r3, r1
 8007d1c:	d1f1      	bne.n	8007d02 <neai_classification+0x286>
 8007d1e:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <neai_classification+0x360>)
 8007d20:	2000      	movs	r0, #0
 8007d22:	ecf3 7a01 	vldmia	r3!, {s15}
 8007d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	f280 824a 	bge.w	80081c6 <neai_classification+0x74a>
 8007d32:	428b      	cmp	r3, r1
 8007d34:	f843 0c04 	str.w	r0, [r3, #-4]
 8007d38:	d1f3      	bne.n	8007d22 <neai_classification+0x2a6>
 8007d3a:	9b01      	ldr	r3, [sp, #4]
 8007d3c:	8818      	ldrh	r0, [r3, #0]
 8007d3e:	4b23      	ldr	r3, [pc, #140]	; (8007dcc <neai_classification+0x350>)
 8007d40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007d44:	edd3 7a00 	vldr	s15, [r3]
 8007d48:	ecb2 7a01 	vldmia	r2!, {s14}
 8007d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d50:	428a      	cmp	r2, r1
 8007d52:	ece3 7a01 	vstmia	r3!, {s15}
 8007d56:	d1f5      	bne.n	8007d44 <neai_classification+0x2c8>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	9201      	str	r2, [sp, #4]
 8007d60:	4a22      	ldr	r2, [pc, #136]	; (8007dec <neai_classification+0x370>)
 8007d62:	3302      	adds	r3, #2
 8007d64:	429a      	cmp	r2, r3
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	f47f aeb2 	bne.w	8007ad0 <neai_classification+0x54>
 8007d6c:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <neai_classification+0x374>)
 8007d6e:	881a      	ldrh	r2, [r3, #0]
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	f000 825e 	beq.w	8008232 <neai_classification+0x7b6>
 8007d76:	4e15      	ldr	r6, [pc, #84]	; (8007dcc <neai_classification+0x350>)
 8007d78:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007df4 <neai_classification+0x378>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	2300      	movs	r3, #0
 8007d80:	ecf1 7a01 	vldmia	r1!, {s15}
 8007d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	da07      	bge.n	8007d9e <neai_classification+0x322>
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d9a:	ed41 7a01 	vstr	s15, [r1, #-4]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d1ed      	bne.n	8007d80 <neai_classification+0x304>
 8007da4:	2a6a      	cmp	r2, #106	; 0x6a
 8007da6:	edd6 aa00 	vldr	s21, [r6]
 8007daa:	f240 823b 	bls.w	8008224 <neai_classification+0x7a8>
 8007dae:	ee07 2a90 	vmov	s15, r2
 8007db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007db6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007df8 <neai_classification+0x37c>
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <neai_classification+0x380>)
 8007dbc:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8007dc0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007dc4:	eef0 8a6a 	vmov.f32	s17, s21
 8007dc8:	e01a      	b.n	8007e00 <neai_classification+0x384>
 8007dca:	bf00      	nop
 8007dcc:	20001734 	.word	0x20001734
 8007dd0:	20001722 	.word	0x20001722
 8007dd4:	2000172c 	.word	0x2000172c
 8007dd8:	20001724 	.word	0x20001724
 8007ddc:	20002f34 	.word	0x20002f34
 8007de0:	20001f34 	.word	0x20001f34
 8007de4:	20001f38 	.word	0x20001f38
 8007de8:	00000000 	.word	0x00000000
 8007dec:	20001734 	.word	0x20001734
 8007df0:	20001720 	.word	0x20001720
 8007df4:	3b03126f 	.word	0x3b03126f
 8007df8:	42d40000 	.word	0x42d40000
 8007dfc:	20001738 	.word	0x20001738
 8007e00:	ecf3 7a01 	vldmia	r3!, {s15}
 8007e04:	eef4 7a68 	vcmp.f32	s15, s17
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	bf48      	it	mi
 8007e0e:	eef0 8a67 	vmovmi.f32	s17, s15
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d1f4      	bne.n	8007e00 <neai_classification+0x384>
 8007e16:	4cb0      	ldr	r4, [pc, #704]	; (80080d8 <neai_classification+0x65c>)
 8007e18:	eddf 7ab0 	vldr	s15, [pc, #704]	; 80080dc <neai_classification+0x660>
 8007e1c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007e20:	f04f 0a00 	mov.w	sl, #0
 8007e24:	ee38 9ac9 	vsub.f32	s18, s17, s18
 8007e28:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8007e2c:	46a0      	mov	r8, r4
 8007e2e:	4655      	mov	r5, sl
 8007e30:	46d1      	mov	r9, sl
 8007e32:	f10a 0a01 	add.w	sl, sl, #1
 8007e36:	ee07 aa10 	vmov	s14, sl
 8007e3a:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8007e3e:	eca8 9a01 	vstmia	r8!, {s18}
 8007e42:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8007e46:	eef0 0a49 	vmov.f32	s1, s18
 8007e4a:	ee38 8a69 	vsub.f32	s16, s16, s19
 8007e4e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8007e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e56:	d814      	bhi.n	8007e82 <neai_classification+0x406>
 8007e58:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	ed93 0a00 	vldr	s0, [r3]
 8007e62:	b2ad      	uxth	r5, r5
 8007e64:	f004 feb1 	bl	800cbca <fmaxf>
 8007e68:	ee07 5a90 	vmov	s15, r5
 8007e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e70:	eef0 0a40 	vmov.f32	s1, s0
 8007e74:	eef4 7ac8 	vcmpe.f32	s15, s16
 8007e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7c:	d9ec      	bls.n	8007e58 <neai_classification+0x3dc>
 8007e7e:	ed08 0a01 	vstr	s0, [r8, #-4]
 8007e82:	ed94 7a00 	vldr	s14, [r4]
 8007e86:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8007e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8e:	bf44      	itt	mi
 8007e90:	edc4 aa00 	vstrmi	s21, [r4]
 8007e94:	ed58 0a01 	vldrmi	s1, [r8, #-4]
 8007e98:	eef4 0ae8 	vcmpe.f32	s1, s17
 8007e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea0:	d506      	bpl.n	8007eb0 <neai_classification+0x434>
 8007ea2:	f1b9 0f00 	cmp.w	r9, #0
 8007ea6:	d003      	beq.n	8007eb0 <neai_classification+0x434>
 8007ea8:	f858 3c08 	ldr.w	r3, [r8, #-8]
 8007eac:	f848 3c04 	str.w	r3, [r8, #-4]
 8007eb0:	f1ba 0f6a 	cmp.w	sl, #106	; 0x6a
 8007eb4:	d1bc      	bne.n	8007e30 <neai_classification+0x3b4>
 8007eb6:	4b8a      	ldr	r3, [pc, #552]	; (80080e0 <neai_classification+0x664>)
 8007eb8:	edd4 7a00 	vldr	s15, [r4]
 8007ebc:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8007ec0:	ecb3 7a01 	vldmia	r3!, {s14}
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eca:	d1f9      	bne.n	8007ec0 <neai_classification+0x444>
 8007ecc:	eddf 6a85 	vldr	s13, [pc, #532]	; 80080e4 <neai_classification+0x668>
 8007ed0:	4b81      	ldr	r3, [pc, #516]	; (80080d8 <neai_classification+0x65c>)
 8007ed2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ed6:	edd3 7a00 	vldr	s15, [r3]
 8007eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ede:	ece3 7a01 	vstmia	r3!, {s15}
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d1f7      	bne.n	8007ed6 <neai_classification+0x45a>
 8007ee6:	4b80      	ldr	r3, [pc, #512]	; (80080e8 <neai_classification+0x66c>)
 8007ee8:	4a80      	ldr	r2, [pc, #512]	; (80080ec <neai_classification+0x670>)
 8007eea:	f8d3 e000 	ldr.w	lr, [r3]
 8007eee:	4b80      	ldr	r3, [pc, #512]	; (80080f0 <neai_classification+0x674>)
 8007ef0:	6816      	ldr	r6, [r2, #0]
 8007ef2:	6819      	ldr	r1, [r3, #0]
 8007ef4:	4b7f      	ldr	r3, [pc, #508]	; (80080f4 <neai_classification+0x678>)
 8007ef6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8007efa:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8007efe:	f103 0814 	add.w	r8, r3, #20
 8007f02:	4618      	mov	r0, r3
 8007f04:	461d      	mov	r5, r3
 8007f06:	f04f 0902 	mov.w	r9, #2
 8007f0a:	f04f 0a01 	mov.w	sl, #1
 8007f0e:	f1be 0f00 	cmp.w	lr, #0
 8007f12:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80080dc <neai_classification+0x660>
 8007f16:	dd0c      	ble.n	8007f32 <neai_classification+0x4b6>
 8007f18:	eba1 020c 	sub.w	r2, r1, ip
 8007f1c:	46a3      	mov	fp, r4
 8007f1e:	ecf2 6a01 	vldmia	r2!, {s13}
 8007f22:	ecfb 7a01 	vldmia	fp!, {s15}
 8007f26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f2a:	428a      	cmp	r2, r1
 8007f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f30:	d1f5      	bne.n	8007f1e <neai_classification+0x4a2>
 8007f32:	ecf6 7a01 	vldmia	r6!, {s15}
 8007f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f3a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f42:	f340 8148 	ble.w	80081d6 <neai_classification+0x75a>
 8007f46:	f825 9b02 	strh.w	r9, [r5], #2
 8007f4a:	4545      	cmp	r5, r8
 8007f4c:	4461      	add	r1, ip
 8007f4e:	d1de      	bne.n	8007f0e <neai_classification+0x492>
 8007f50:	2601      	movs	r6, #1
 8007f52:	2501      	movs	r5, #1
 8007f54:	2101      	movs	r1, #1
 8007f56:	2200      	movs	r2, #0
 8007f58:	1c4c      	adds	r4, r1, #1
 8007f5a:	440a      	add	r2, r1
 8007f5c:	b2a1      	uxth	r1, r4
 8007f5e:	42a9      	cmp	r1, r5
 8007f60:	b292      	uxth	r2, r2
 8007f62:	d9f9      	bls.n	8007f58 <neai_classification+0x4dc>
 8007f64:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8007f68:	3101      	adds	r1, #1
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	1a8c      	subs	r4, r1, r2
 8007f6e:	b2a4      	uxth	r4, r4
 8007f70:	42b4      	cmp	r4, r6
 8007f72:	d804      	bhi.n	8007f7e <neai_classification+0x502>
 8007f74:	3501      	adds	r5, #1
 8007f76:	b2ad      	uxth	r5, r5
 8007f78:	2d05      	cmp	r5, #5
 8007f7a:	d1eb      	bne.n	8007f54 <neai_classification+0x4d8>
 8007f7c:	2115      	movs	r1, #21
 8007f7e:	881c      	ldrh	r4, [r3, #0]
 8007f80:	2c01      	cmp	r4, #1
 8007f82:	d003      	beq.n	8007f8c <neai_classification+0x510>
 8007f84:	2c02      	cmp	r4, #2
 8007f86:	f000 812d 	beq.w	80081e4 <neai_classification+0x768>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	2e0b      	cmp	r6, #11
 8007f90:	f823 5b02 	strh.w	r5, [r3], #2
 8007f94:	d1dd      	bne.n	8007f52 <neai_classification+0x4d6>
 8007f96:	8802      	ldrh	r2, [r0, #0]
 8007f98:	ed9f 8a50 	vldr	s16, [pc, #320]	; 80080dc <neai_classification+0x660>
 8007f9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007fa0:	441a      	add	r2, r3
 8007fa2:	ed87 8a00 	vstr	s16, [r7]
 8007fa6:	ed87 8a01 	vstr	s16, [r7, #4]
 8007faa:	ed87 8a02 	vstr	s16, [r7, #8]
 8007fae:	ed87 8a03 	vstr	s16, [r7, #12]
 8007fb2:	ed87 8a04 	vstr	s16, [r7, #16]
 8007fb6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8007fba:	ed92 7a00 	vldr	s14, [r2]
 8007fbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fc6:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 8007fca:	ed82 7a00 	vstr	s14, [r2]
 8007fce:	8842      	ldrh	r2, [r0, #2]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8007fd6:	ed92 7a00 	vldr	s14, [r2]
 8007fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fde:	463c      	mov	r4, r7
 8007fe0:	ed82 7a00 	vstr	s14, [r2]
 8007fe4:	8882      	ldrh	r2, [r0, #4]
 8007fe6:	441a      	add	r2, r3
 8007fe8:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8007fec:	ed92 7a00 	vldr	s14, [r2]
 8007ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ff4:	f107 0514 	add.w	r5, r7, #20
 8007ff8:	ed82 7a00 	vstr	s14, [r2]
 8007ffc:	88c2      	ldrh	r2, [r0, #6]
 8007ffe:	441a      	add	r2, r3
 8008000:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008004:	ed92 7a00 	vldr	s14, [r2]
 8008008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800800c:	ed82 7a00 	vstr	s14, [r2]
 8008010:	8902      	ldrh	r2, [r0, #8]
 8008012:	441a      	add	r2, r3
 8008014:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008018:	ed92 7a00 	vldr	s14, [r2]
 800801c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008020:	ed82 7a00 	vstr	s14, [r2]
 8008024:	8942      	ldrh	r2, [r0, #10]
 8008026:	441a      	add	r2, r3
 8008028:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800802c:	ed92 7a00 	vldr	s14, [r2]
 8008030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008034:	ed82 7a00 	vstr	s14, [r2]
 8008038:	8982      	ldrh	r2, [r0, #12]
 800803a:	441a      	add	r2, r3
 800803c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008040:	ed92 7a00 	vldr	s14, [r2]
 8008044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008048:	ed82 7a00 	vstr	s14, [r2]
 800804c:	89c2      	ldrh	r2, [r0, #14]
 800804e:	441a      	add	r2, r3
 8008050:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008054:	ed92 7a00 	vldr	s14, [r2]
 8008058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800805c:	ed82 7a00 	vstr	s14, [r2]
 8008060:	8a02      	ldrh	r2, [r0, #16]
 8008062:	441a      	add	r2, r3
 8008064:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008068:	ed92 7a00 	vldr	s14, [r2]
 800806c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008070:	ed82 7a00 	vstr	s14, [r2]
 8008074:	8a42      	ldrh	r2, [r0, #18]
 8008076:	4413      	add	r3, r2
 8008078:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800807c:	ed93 7a00 	vldr	s14, [r3]
 8008080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008084:	edc3 7a00 	vstr	s15, [r3]
 8008088:	edd7 7a00 	vldr	s15, [r7]
 800808c:	edd7 6a01 	vldr	s13, [r7, #4]
 8008090:	ed97 7a02 	vldr	s14, [r7, #8]
 8008094:	edd7 8a04 	vldr	s17, [r7, #16]
 8008098:	eef4 7ae6 	vcmpe.f32	s15, s13
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	bf58      	it	pl
 80080a2:	eef0 6a67 	vmovpl.f32	s13, s15
 80080a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80080aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80080b2:	bfd8      	it	le
 80080b4:	eeb0 7a66 	vmovle.f32	s14, s13
 80080b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c0:	bfd8      	it	le
 80080c2:	eef0 7a47 	vmovle.f32	s15, s14
 80080c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80080ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ce:	bf58      	it	pl
 80080d0:	eef0 8a67 	vmovpl.f32	s17, s15
 80080d4:	e010      	b.n	80080f8 <neai_classification+0x67c>
 80080d6:	bf00      	nop
 80080d8:	20003f34 	.word	0x20003f34
 80080dc:	00000000 	.word	0x00000000
 80080e0:	20003f38 	.word	0x20003f38
 80080e4:	42d40000 	.word	0x42d40000
 80080e8:	2000171c 	.word	0x2000171c
 80080ec:	20001714 	.word	0x20001714
 80080f0:	20001718 	.word	0x20001718
 80080f4:	20001700 	.word	0x20001700
 80080f8:	edd4 7a00 	vldr	s15, [r4]
 80080fc:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8008100:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008104:	ee17 0a90 	vmov	r0, s15
 8008108:	f7f8 fa36 	bl	8000578 <__aeabi_f2d>
 800810c:	ec41 0b10 	vmov	d0, r0, r1
 8008110:	f004 fcea 	bl	800cae8 <exp>
 8008114:	ec51 0b10 	vmov	r0, r1, d0
 8008118:	f7f8 fd7e 	bl	8000c18 <__aeabi_d2f>
 800811c:	f844 0b04 	str.w	r0, [r4], #4
 8008120:	ee07 0a90 	vmov	s15, r0
 8008124:	42ac      	cmp	r4, r5
 8008126:	ee38 8a27 	vadd.f32	s16, s16, s15
 800812a:	d1e5      	bne.n	80080f8 <neai_classification+0x67c>
 800812c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008130:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8008134:	9a05      	ldr	r2, [sp, #20]
 8008136:	9803      	ldr	r0, [sp, #12]
 8008138:	edd7 5a00 	vldr	s11, [r7]
 800813c:	edd7 6a01 	vldr	s13, [r7, #4]
 8008140:	ed97 7a02 	vldr	s14, [r7, #8]
 8008144:	ed97 6a03 	vldr	s12, [r7, #12]
 8008148:	ed97 5a04 	vldr	s10, [r7, #16]
 800814c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008150:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008158:	eef4 6ae5 	vcmpe.f32	s13, s11
 800815c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008160:	edc7 6a01 	vstr	s13, [r7, #4]
 8008164:	bfd8      	it	le
 8008166:	eef0 6a65 	vmovle.f32	s13, s11
 800816a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800816e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8008172:	bfd4      	ite	le
 8008174:	2300      	movle	r3, #0
 8008176:	2301      	movgt	r3, #1
 8008178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817c:	ed87 7a02 	vstr	s14, [r7, #8]
 8008180:	bf58      	it	pl
 8008182:	eeb0 7a66 	vmovpl.f32	s14, s13
 8008186:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800818a:	bf48      	it	mi
 800818c:	2302      	movmi	r3, #2
 800818e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008196:	ed87 6a03 	vstr	s12, [r7, #12]
 800819a:	bf58      	it	pl
 800819c:	eeb0 6a47 	vmovpl.f32	s12, s14
 80081a0:	eef4 7a46 	vcmp.f32	s15, s12
 80081a4:	bf48      	it	mi
 80081a6:	2303      	movmi	r3, #3
 80081a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ac:	bfc8      	it	gt
 80081ae:	2304      	movgt	r3, #4
 80081b0:	3301      	adds	r3, #1
 80081b2:	edc7 5a00 	vstr	s11, [r7]
 80081b6:	edc7 7a04 	vstr	s15, [r7, #16]
 80081ba:	8013      	strh	r3, [r2, #0]
 80081bc:	b009      	add	sp, #36	; 0x24
 80081be:	ecbd 8b06 	vpop	{d8-d10}
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80081ca:	428b      	cmp	r3, r1
 80081cc:	ed03 7a01 	vstr	s14, [r3, #-4]
 80081d0:	f47f ada7 	bne.w	8007d22 <neai_classification+0x2a6>
 80081d4:	e5b1      	b.n	8007d3a <neai_classification+0x2be>
 80081d6:	f825 ab02 	strh.w	sl, [r5], #2
 80081da:	45a8      	cmp	r8, r5
 80081dc:	4461      	add	r1, ip
 80081de:	f47f ae96 	bne.w	8007f0e <neai_classification+0x492>
 80081e2:	e6b5      	b.n	8007f50 <neai_classification+0x4d4>
 80081e4:	1db4      	adds	r4, r6, #6
 80081e6:	4422      	add	r2, r4
 80081e8:	1a52      	subs	r2, r2, r1
 80081ea:	b295      	uxth	r5, r2
 80081ec:	e6ce      	b.n	8007f8c <neai_classification+0x510>
 80081ee:	9a01      	ldr	r2, [sp, #4]
 80081f0:	9b00      	ldr	r3, [sp, #0]
 80081f2:	3202      	adds	r2, #2
 80081f4:	9201      	str	r2, [sp, #4]
 80081f6:	4a17      	ldr	r2, [pc, #92]	; (8008254 <neai_classification+0x7d8>)
 80081f8:	3302      	adds	r3, #2
 80081fa:	429a      	cmp	r2, r3
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	f43f adb5 	beq.w	8007d6c <neai_classification+0x2f0>
 8008202:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008258 <neai_classification+0x7dc>
 8008206:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800820a:	2100      	movs	r1, #0
 800820c:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8008210:	4688      	mov	r8, r1
 8008212:	e49e      	b.n	8007b52 <neai_classification+0xd6>
 8008214:	2d01      	cmp	r5, #1
 8008216:	bf08      	it	eq
 8008218:	2100      	moveq	r1, #0
 800821a:	f43f ad5c 	beq.w	8007cd6 <neai_classification+0x25a>
 800821e:	9902      	ldr	r1, [sp, #8]
 8008220:	2400      	movs	r4, #0
 8008222:	e4a0      	b.n	8007b66 <neai_classification+0xea>
 8008224:	490d      	ldr	r1, [pc, #52]	; (800825c <neai_classification+0x7e0>)
 8008226:	480e      	ldr	r0, [pc, #56]	; (8008260 <neai_classification+0x7e4>)
 8008228:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <neai_classification+0x7e4>)
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	f001 f937 	bl	800949e <memcpy>
 8008230:	e641      	b.n	8007eb6 <neai_classification+0x43a>
 8008232:	4c0b      	ldr	r4, [pc, #44]	; (8008260 <neai_classification+0x7e4>)
 8008234:	e63f      	b.n	8007eb6 <neai_classification+0x43a>
 8008236:	f004 fc9f 	bl	800cb78 <sqrtf>
 800823a:	eeb0 8a40 	vmov.f32	s16, s0
 800823e:	e53f      	b.n	8007cc0 <neai_classification+0x244>
 8008240:	f004 fc9a 	bl	800cb78 <sqrtf>
 8008244:	ee38 8a29 	vadd.f32	s16, s16, s19
 8008248:	eef1 8a40 	vneg.f32	s17, s0
 800824c:	ee28 0a09 	vmul.f32	s0, s16, s18
 8008250:	e534      	b.n	8007cbc <neai_classification+0x240>
 8008252:	bf00      	nop
 8008254:	20001734 	.word	0x20001734
 8008258:	00000000 	.word	0x00000000
 800825c:	20001734 	.word	0x20001734
 8008260:	20003f34 	.word	0x20003f34

08008264 <__cvt>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	ec55 4b10 	vmov	r4, r5, d0
 800826c:	2d00      	cmp	r5, #0
 800826e:	460e      	mov	r6, r1
 8008270:	4619      	mov	r1, r3
 8008272:	462b      	mov	r3, r5
 8008274:	bfbb      	ittet	lt
 8008276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800827a:	461d      	movlt	r5, r3
 800827c:	2300      	movge	r3, #0
 800827e:	232d      	movlt	r3, #45	; 0x2d
 8008280:	700b      	strb	r3, [r1, #0]
 8008282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008288:	4691      	mov	r9, r2
 800828a:	f023 0820 	bic.w	r8, r3, #32
 800828e:	bfbc      	itt	lt
 8008290:	4622      	movlt	r2, r4
 8008292:	4614      	movlt	r4, r2
 8008294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008298:	d005      	beq.n	80082a6 <__cvt+0x42>
 800829a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800829e:	d100      	bne.n	80082a2 <__cvt+0x3e>
 80082a0:	3601      	adds	r6, #1
 80082a2:	2102      	movs	r1, #2
 80082a4:	e000      	b.n	80082a8 <__cvt+0x44>
 80082a6:	2103      	movs	r1, #3
 80082a8:	ab03      	add	r3, sp, #12
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	ab02      	add	r3, sp, #8
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	ec45 4b10 	vmov	d0, r4, r5
 80082b4:	4653      	mov	r3, sl
 80082b6:	4632      	mov	r2, r6
 80082b8:	f001 f98e 	bl	80095d8 <_dtoa_r>
 80082bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082c0:	4607      	mov	r7, r0
 80082c2:	d102      	bne.n	80082ca <__cvt+0x66>
 80082c4:	f019 0f01 	tst.w	r9, #1
 80082c8:	d022      	beq.n	8008310 <__cvt+0xac>
 80082ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082ce:	eb07 0906 	add.w	r9, r7, r6
 80082d2:	d110      	bne.n	80082f6 <__cvt+0x92>
 80082d4:	783b      	ldrb	r3, [r7, #0]
 80082d6:	2b30      	cmp	r3, #48	; 0x30
 80082d8:	d10a      	bne.n	80082f0 <__cvt+0x8c>
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 fc09 	bl	8000af8 <__aeabi_dcmpeq>
 80082e6:	b918      	cbnz	r0, 80082f0 <__cvt+0x8c>
 80082e8:	f1c6 0601 	rsb	r6, r6, #1
 80082ec:	f8ca 6000 	str.w	r6, [sl]
 80082f0:	f8da 3000 	ldr.w	r3, [sl]
 80082f4:	4499      	add	r9, r3
 80082f6:	2200      	movs	r2, #0
 80082f8:	2300      	movs	r3, #0
 80082fa:	4620      	mov	r0, r4
 80082fc:	4629      	mov	r1, r5
 80082fe:	f7f8 fbfb 	bl	8000af8 <__aeabi_dcmpeq>
 8008302:	b108      	cbz	r0, 8008308 <__cvt+0xa4>
 8008304:	f8cd 900c 	str.w	r9, [sp, #12]
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	454b      	cmp	r3, r9
 800830e:	d307      	bcc.n	8008320 <__cvt+0xbc>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008314:	1bdb      	subs	r3, r3, r7
 8008316:	4638      	mov	r0, r7
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	b004      	add	sp, #16
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	1c59      	adds	r1, r3, #1
 8008322:	9103      	str	r1, [sp, #12]
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e7f0      	b.n	800830a <__cvt+0xa6>

08008328 <__exponent>:
 8008328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800832a:	4603      	mov	r3, r0
 800832c:	2900      	cmp	r1, #0
 800832e:	bfb8      	it	lt
 8008330:	4249      	neglt	r1, r1
 8008332:	f803 2b02 	strb.w	r2, [r3], #2
 8008336:	bfb4      	ite	lt
 8008338:	222d      	movlt	r2, #45	; 0x2d
 800833a:	222b      	movge	r2, #43	; 0x2b
 800833c:	2909      	cmp	r1, #9
 800833e:	7042      	strb	r2, [r0, #1]
 8008340:	dd2a      	ble.n	8008398 <__exponent+0x70>
 8008342:	f10d 0207 	add.w	r2, sp, #7
 8008346:	4617      	mov	r7, r2
 8008348:	260a      	movs	r6, #10
 800834a:	4694      	mov	ip, r2
 800834c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008350:	fb06 1415 	mls	r4, r6, r5, r1
 8008354:	3430      	adds	r4, #48	; 0x30
 8008356:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800835a:	460c      	mov	r4, r1
 800835c:	2c63      	cmp	r4, #99	; 0x63
 800835e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008362:	4629      	mov	r1, r5
 8008364:	dcf1      	bgt.n	800834a <__exponent+0x22>
 8008366:	3130      	adds	r1, #48	; 0x30
 8008368:	f1ac 0402 	sub.w	r4, ip, #2
 800836c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008370:	1c41      	adds	r1, r0, #1
 8008372:	4622      	mov	r2, r4
 8008374:	42ba      	cmp	r2, r7
 8008376:	d30a      	bcc.n	800838e <__exponent+0x66>
 8008378:	f10d 0209 	add.w	r2, sp, #9
 800837c:	eba2 020c 	sub.w	r2, r2, ip
 8008380:	42bc      	cmp	r4, r7
 8008382:	bf88      	it	hi
 8008384:	2200      	movhi	r2, #0
 8008386:	4413      	add	r3, r2
 8008388:	1a18      	subs	r0, r3, r0
 800838a:	b003      	add	sp, #12
 800838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800838e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008392:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008396:	e7ed      	b.n	8008374 <__exponent+0x4c>
 8008398:	2330      	movs	r3, #48	; 0x30
 800839a:	3130      	adds	r1, #48	; 0x30
 800839c:	7083      	strb	r3, [r0, #2]
 800839e:	70c1      	strb	r1, [r0, #3]
 80083a0:	1d03      	adds	r3, r0, #4
 80083a2:	e7f1      	b.n	8008388 <__exponent+0x60>

080083a4 <_printf_float>:
 80083a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	ed2d 8b02 	vpush	{d8}
 80083ac:	b08d      	sub	sp, #52	; 0x34
 80083ae:	460c      	mov	r4, r1
 80083b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083b4:	4616      	mov	r6, r2
 80083b6:	461f      	mov	r7, r3
 80083b8:	4605      	mov	r5, r0
 80083ba:	f000 fff9 	bl	80093b0 <_localeconv_r>
 80083be:	f8d0 a000 	ldr.w	sl, [r0]
 80083c2:	4650      	mov	r0, sl
 80083c4:	f7f7 ff6c 	bl	80002a0 <strlen>
 80083c8:	2300      	movs	r3, #0
 80083ca:	930a      	str	r3, [sp, #40]	; 0x28
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	9305      	str	r3, [sp, #20]
 80083d0:	f8d8 3000 	ldr.w	r3, [r8]
 80083d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083d8:	3307      	adds	r3, #7
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	f103 0208 	add.w	r2, r3, #8
 80083e2:	f8c8 2000 	str.w	r2, [r8]
 80083e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80083f4:	ee08 0a10 	vmov	s16, r0
 80083f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80083fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008400:	4b9e      	ldr	r3, [pc, #632]	; (800867c <_printf_float+0x2d8>)
 8008402:	f04f 32ff 	mov.w	r2, #4294967295
 8008406:	f7f8 fba9 	bl	8000b5c <__aeabi_dcmpun>
 800840a:	bb88      	cbnz	r0, 8008470 <_printf_float+0xcc>
 800840c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008410:	4b9a      	ldr	r3, [pc, #616]	; (800867c <_printf_float+0x2d8>)
 8008412:	f04f 32ff 	mov.w	r2, #4294967295
 8008416:	f7f8 fb83 	bl	8000b20 <__aeabi_dcmple>
 800841a:	bb48      	cbnz	r0, 8008470 <_printf_float+0xcc>
 800841c:	2200      	movs	r2, #0
 800841e:	2300      	movs	r3, #0
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f8 fb72 	bl	8000b0c <__aeabi_dcmplt>
 8008428:	b110      	cbz	r0, 8008430 <_printf_float+0x8c>
 800842a:	232d      	movs	r3, #45	; 0x2d
 800842c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008430:	4a93      	ldr	r2, [pc, #588]	; (8008680 <_printf_float+0x2dc>)
 8008432:	4b94      	ldr	r3, [pc, #592]	; (8008684 <_printf_float+0x2e0>)
 8008434:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008438:	bf94      	ite	ls
 800843a:	4690      	movls	r8, r2
 800843c:	4698      	movhi	r8, r3
 800843e:	2303      	movs	r3, #3
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	9b05      	ldr	r3, [sp, #20]
 8008444:	f023 0304 	bic.w	r3, r3, #4
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	9700      	str	r7, [sp, #0]
 8008450:	4633      	mov	r3, r6
 8008452:	aa0b      	add	r2, sp, #44	; 0x2c
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f9da 	bl	8008810 <_printf_common>
 800845c:	3001      	adds	r0, #1
 800845e:	f040 8090 	bne.w	8008582 <_printf_float+0x1de>
 8008462:	f04f 30ff 	mov.w	r0, #4294967295
 8008466:	b00d      	add	sp, #52	; 0x34
 8008468:	ecbd 8b02 	vpop	{d8}
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	4640      	mov	r0, r8
 8008476:	4649      	mov	r1, r9
 8008478:	f7f8 fb70 	bl	8000b5c <__aeabi_dcmpun>
 800847c:	b140      	cbz	r0, 8008490 <_printf_float+0xec>
 800847e:	464b      	mov	r3, r9
 8008480:	2b00      	cmp	r3, #0
 8008482:	bfbc      	itt	lt
 8008484:	232d      	movlt	r3, #45	; 0x2d
 8008486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800848a:	4a7f      	ldr	r2, [pc, #508]	; (8008688 <_printf_float+0x2e4>)
 800848c:	4b7f      	ldr	r3, [pc, #508]	; (800868c <_printf_float+0x2e8>)
 800848e:	e7d1      	b.n	8008434 <_printf_float+0x90>
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008496:	9206      	str	r2, [sp, #24]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	d13f      	bne.n	800851c <_printf_float+0x178>
 800849c:	2306      	movs	r3, #6
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	9b05      	ldr	r3, [sp, #20]
 80084a2:	6861      	ldr	r1, [r4, #4]
 80084a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084a8:	2300      	movs	r3, #0
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	ab0a      	add	r3, sp, #40	; 0x28
 80084ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084b2:	ab09      	add	r3, sp, #36	; 0x24
 80084b4:	ec49 8b10 	vmov	d0, r8, r9
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	6022      	str	r2, [r4, #0]
 80084bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084c0:	4628      	mov	r0, r5
 80084c2:	f7ff fecf 	bl	8008264 <__cvt>
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ca:	2b47      	cmp	r3, #71	; 0x47
 80084cc:	4680      	mov	r8, r0
 80084ce:	d108      	bne.n	80084e2 <_printf_float+0x13e>
 80084d0:	1cc8      	adds	r0, r1, #3
 80084d2:	db02      	blt.n	80084da <_printf_float+0x136>
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	dd41      	ble.n	800855e <_printf_float+0x1ba>
 80084da:	f1ab 0302 	sub.w	r3, fp, #2
 80084de:	fa5f fb83 	uxtb.w	fp, r3
 80084e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084e6:	d820      	bhi.n	800852a <_printf_float+0x186>
 80084e8:	3901      	subs	r1, #1
 80084ea:	465a      	mov	r2, fp
 80084ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084f0:	9109      	str	r1, [sp, #36]	; 0x24
 80084f2:	f7ff ff19 	bl	8008328 <__exponent>
 80084f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f8:	1813      	adds	r3, r2, r0
 80084fa:	2a01      	cmp	r2, #1
 80084fc:	4681      	mov	r9, r0
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	dc02      	bgt.n	8008508 <_printf_float+0x164>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	07d2      	lsls	r2, r2, #31
 8008506:	d501      	bpl.n	800850c <_printf_float+0x168>
 8008508:	3301      	adds	r3, #1
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008510:	2b00      	cmp	r3, #0
 8008512:	d09c      	beq.n	800844e <_printf_float+0xaa>
 8008514:	232d      	movs	r3, #45	; 0x2d
 8008516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800851a:	e798      	b.n	800844e <_printf_float+0xaa>
 800851c:	9a06      	ldr	r2, [sp, #24]
 800851e:	2a47      	cmp	r2, #71	; 0x47
 8008520:	d1be      	bne.n	80084a0 <_printf_float+0xfc>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1bc      	bne.n	80084a0 <_printf_float+0xfc>
 8008526:	2301      	movs	r3, #1
 8008528:	e7b9      	b.n	800849e <_printf_float+0xfa>
 800852a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800852e:	d118      	bne.n	8008562 <_printf_float+0x1be>
 8008530:	2900      	cmp	r1, #0
 8008532:	6863      	ldr	r3, [r4, #4]
 8008534:	dd0b      	ble.n	800854e <_printf_float+0x1aa>
 8008536:	6121      	str	r1, [r4, #16]
 8008538:	b913      	cbnz	r3, 8008540 <_printf_float+0x19c>
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	07d0      	lsls	r0, r2, #31
 800853e:	d502      	bpl.n	8008546 <_printf_float+0x1a2>
 8008540:	3301      	adds	r3, #1
 8008542:	440b      	add	r3, r1
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	65a1      	str	r1, [r4, #88]	; 0x58
 8008548:	f04f 0900 	mov.w	r9, #0
 800854c:	e7de      	b.n	800850c <_printf_float+0x168>
 800854e:	b913      	cbnz	r3, 8008556 <_printf_float+0x1b2>
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	07d2      	lsls	r2, r2, #31
 8008554:	d501      	bpl.n	800855a <_printf_float+0x1b6>
 8008556:	3302      	adds	r3, #2
 8008558:	e7f4      	b.n	8008544 <_printf_float+0x1a0>
 800855a:	2301      	movs	r3, #1
 800855c:	e7f2      	b.n	8008544 <_printf_float+0x1a0>
 800855e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008564:	4299      	cmp	r1, r3
 8008566:	db05      	blt.n	8008574 <_printf_float+0x1d0>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	6121      	str	r1, [r4, #16]
 800856c:	07d8      	lsls	r0, r3, #31
 800856e:	d5ea      	bpl.n	8008546 <_printf_float+0x1a2>
 8008570:	1c4b      	adds	r3, r1, #1
 8008572:	e7e7      	b.n	8008544 <_printf_float+0x1a0>
 8008574:	2900      	cmp	r1, #0
 8008576:	bfd4      	ite	le
 8008578:	f1c1 0202 	rsble	r2, r1, #2
 800857c:	2201      	movgt	r2, #1
 800857e:	4413      	add	r3, r2
 8008580:	e7e0      	b.n	8008544 <_printf_float+0x1a0>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	055a      	lsls	r2, r3, #21
 8008586:	d407      	bmi.n	8008598 <_printf_float+0x1f4>
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	4642      	mov	r2, r8
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	d12c      	bne.n	80085f0 <_printf_float+0x24c>
 8008596:	e764      	b.n	8008462 <_printf_float+0xbe>
 8008598:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800859c:	f240 80e0 	bls.w	8008760 <_printf_float+0x3bc>
 80085a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085a4:	2200      	movs	r2, #0
 80085a6:	2300      	movs	r3, #0
 80085a8:	f7f8 faa6 	bl	8000af8 <__aeabi_dcmpeq>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d034      	beq.n	800861a <_printf_float+0x276>
 80085b0:	4a37      	ldr	r2, [pc, #220]	; (8008690 <_printf_float+0x2ec>)
 80085b2:	2301      	movs	r3, #1
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f af51 	beq.w	8008462 <_printf_float+0xbe>
 80085c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085c4:	429a      	cmp	r2, r3
 80085c6:	db02      	blt.n	80085ce <_printf_float+0x22a>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	07d8      	lsls	r0, r3, #31
 80085cc:	d510      	bpl.n	80085f0 <_printf_float+0x24c>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f af41 	beq.w	8008462 <_printf_float+0xbe>
 80085e0:	f04f 0800 	mov.w	r8, #0
 80085e4:	f104 091a 	add.w	r9, r4, #26
 80085e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4543      	cmp	r3, r8
 80085ee:	dc09      	bgt.n	8008604 <_printf_float+0x260>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	079b      	lsls	r3, r3, #30
 80085f4:	f100 8107 	bmi.w	8008806 <_printf_float+0x462>
 80085f8:	68e0      	ldr	r0, [r4, #12]
 80085fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fc:	4298      	cmp	r0, r3
 80085fe:	bfb8      	it	lt
 8008600:	4618      	movlt	r0, r3
 8008602:	e730      	b.n	8008466 <_printf_float+0xc2>
 8008604:	2301      	movs	r3, #1
 8008606:	464a      	mov	r2, r9
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af27 	beq.w	8008462 <_printf_float+0xbe>
 8008614:	f108 0801 	add.w	r8, r8, #1
 8008618:	e7e6      	b.n	80085e8 <_printf_float+0x244>
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc39      	bgt.n	8008694 <_printf_float+0x2f0>
 8008620:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <_printf_float+0x2ec>)
 8008622:	2301      	movs	r3, #1
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f af19 	beq.w	8008462 <_printf_float+0xbe>
 8008630:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008634:	4313      	orrs	r3, r2
 8008636:	d102      	bne.n	800863e <_printf_float+0x29a>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	07d9      	lsls	r1, r3, #31
 800863c:	d5d8      	bpl.n	80085f0 <_printf_float+0x24c>
 800863e:	ee18 3a10 	vmov	r3, s16
 8008642:	4652      	mov	r2, sl
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	f43f af09 	beq.w	8008462 <_printf_float+0xbe>
 8008650:	f04f 0900 	mov.w	r9, #0
 8008654:	f104 0a1a 	add.w	sl, r4, #26
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	425b      	negs	r3, r3
 800865c:	454b      	cmp	r3, r9
 800865e:	dc01      	bgt.n	8008664 <_printf_float+0x2c0>
 8008660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008662:	e792      	b.n	800858a <_printf_float+0x1e6>
 8008664:	2301      	movs	r3, #1
 8008666:	4652      	mov	r2, sl
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	f43f aef7 	beq.w	8008462 <_printf_float+0xbe>
 8008674:	f109 0901 	add.w	r9, r9, #1
 8008678:	e7ee      	b.n	8008658 <_printf_float+0x2b4>
 800867a:	bf00      	nop
 800867c:	7fefffff 	.word	0x7fefffff
 8008680:	0800e190 	.word	0x0800e190
 8008684:	0800e194 	.word	0x0800e194
 8008688:	0800e198 	.word	0x0800e198
 800868c:	0800e19c 	.word	0x0800e19c
 8008690:	0800e1a0 	.word	0x0800e1a0
 8008694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008698:	429a      	cmp	r2, r3
 800869a:	bfa8      	it	ge
 800869c:	461a      	movge	r2, r3
 800869e:	2a00      	cmp	r2, #0
 80086a0:	4691      	mov	r9, r2
 80086a2:	dc37      	bgt.n	8008714 <_printf_float+0x370>
 80086a4:	f04f 0b00 	mov.w	fp, #0
 80086a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ac:	f104 021a 	add.w	r2, r4, #26
 80086b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	eba3 0309 	sub.w	r3, r3, r9
 80086b8:	455b      	cmp	r3, fp
 80086ba:	dc33      	bgt.n	8008724 <_printf_float+0x380>
 80086bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086c0:	429a      	cmp	r2, r3
 80086c2:	db3b      	blt.n	800873c <_printf_float+0x398>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07da      	lsls	r2, r3, #31
 80086c8:	d438      	bmi.n	800873c <_printf_float+0x398>
 80086ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086ce:	eba2 0903 	sub.w	r9, r2, r3
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	4591      	cmp	r9, r2
 80086d8:	bfa8      	it	ge
 80086da:	4691      	movge	r9, r2
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	dc35      	bgt.n	800874e <_printf_float+0x3aa>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ea:	f104 0a1a 	add.w	sl, r4, #26
 80086ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	eba3 0309 	sub.w	r3, r3, r9
 80086f8:	4543      	cmp	r3, r8
 80086fa:	f77f af79 	ble.w	80085f0 <_printf_float+0x24c>
 80086fe:	2301      	movs	r3, #1
 8008700:	4652      	mov	r2, sl
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	f43f aeaa 	beq.w	8008462 <_printf_float+0xbe>
 800870e:	f108 0801 	add.w	r8, r8, #1
 8008712:	e7ec      	b.n	80086ee <_printf_float+0x34a>
 8008714:	4613      	mov	r3, r2
 8008716:	4631      	mov	r1, r6
 8008718:	4642      	mov	r2, r8
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d1c0      	bne.n	80086a4 <_printf_float+0x300>
 8008722:	e69e      	b.n	8008462 <_printf_float+0xbe>
 8008724:	2301      	movs	r3, #1
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	9205      	str	r2, [sp, #20]
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	f43f ae97 	beq.w	8008462 <_printf_float+0xbe>
 8008734:	9a05      	ldr	r2, [sp, #20]
 8008736:	f10b 0b01 	add.w	fp, fp, #1
 800873a:	e7b9      	b.n	80086b0 <_printf_float+0x30c>
 800873c:	ee18 3a10 	vmov	r3, s16
 8008740:	4652      	mov	r2, sl
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	d1be      	bne.n	80086ca <_printf_float+0x326>
 800874c:	e689      	b.n	8008462 <_printf_float+0xbe>
 800874e:	9a05      	ldr	r2, [sp, #20]
 8008750:	464b      	mov	r3, r9
 8008752:	4442      	add	r2, r8
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	d1c1      	bne.n	80086e2 <_printf_float+0x33e>
 800875e:	e680      	b.n	8008462 <_printf_float+0xbe>
 8008760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008762:	2a01      	cmp	r2, #1
 8008764:	dc01      	bgt.n	800876a <_printf_float+0x3c6>
 8008766:	07db      	lsls	r3, r3, #31
 8008768:	d53a      	bpl.n	80087e0 <_printf_float+0x43c>
 800876a:	2301      	movs	r3, #1
 800876c:	4642      	mov	r2, r8
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f ae74 	beq.w	8008462 <_printf_float+0xbe>
 800877a:	ee18 3a10 	vmov	r3, s16
 800877e:	4652      	mov	r2, sl
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	47b8      	blx	r7
 8008786:	3001      	adds	r0, #1
 8008788:	f43f ae6b 	beq.w	8008462 <_printf_float+0xbe>
 800878c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008790:	2200      	movs	r2, #0
 8008792:	2300      	movs	r3, #0
 8008794:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008798:	f7f8 f9ae 	bl	8000af8 <__aeabi_dcmpeq>
 800879c:	b9d8      	cbnz	r0, 80087d6 <_printf_float+0x432>
 800879e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80087a2:	f108 0201 	add.w	r2, r8, #1
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	d10e      	bne.n	80087ce <_printf_float+0x42a>
 80087b0:	e657      	b.n	8008462 <_printf_float+0xbe>
 80087b2:	2301      	movs	r3, #1
 80087b4:	4652      	mov	r2, sl
 80087b6:	4631      	mov	r1, r6
 80087b8:	4628      	mov	r0, r5
 80087ba:	47b8      	blx	r7
 80087bc:	3001      	adds	r0, #1
 80087be:	f43f ae50 	beq.w	8008462 <_printf_float+0xbe>
 80087c2:	f108 0801 	add.w	r8, r8, #1
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	3b01      	subs	r3, #1
 80087ca:	4543      	cmp	r3, r8
 80087cc:	dcf1      	bgt.n	80087b2 <_printf_float+0x40e>
 80087ce:	464b      	mov	r3, r9
 80087d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087d4:	e6da      	b.n	800858c <_printf_float+0x1e8>
 80087d6:	f04f 0800 	mov.w	r8, #0
 80087da:	f104 0a1a 	add.w	sl, r4, #26
 80087de:	e7f2      	b.n	80087c6 <_printf_float+0x422>
 80087e0:	2301      	movs	r3, #1
 80087e2:	4642      	mov	r2, r8
 80087e4:	e7df      	b.n	80087a6 <_printf_float+0x402>
 80087e6:	2301      	movs	r3, #1
 80087e8:	464a      	mov	r2, r9
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f ae36 	beq.w	8008462 <_printf_float+0xbe>
 80087f6:	f108 0801 	add.w	r8, r8, #1
 80087fa:	68e3      	ldr	r3, [r4, #12]
 80087fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087fe:	1a5b      	subs	r3, r3, r1
 8008800:	4543      	cmp	r3, r8
 8008802:	dcf0      	bgt.n	80087e6 <_printf_float+0x442>
 8008804:	e6f8      	b.n	80085f8 <_printf_float+0x254>
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	f104 0919 	add.w	r9, r4, #25
 800880e:	e7f4      	b.n	80087fa <_printf_float+0x456>

08008810 <_printf_common>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	4616      	mov	r6, r2
 8008816:	4699      	mov	r9, r3
 8008818:	688a      	ldr	r2, [r1, #8]
 800881a:	690b      	ldr	r3, [r1, #16]
 800881c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008820:	4293      	cmp	r3, r2
 8008822:	bfb8      	it	lt
 8008824:	4613      	movlt	r3, r2
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800882c:	4607      	mov	r7, r0
 800882e:	460c      	mov	r4, r1
 8008830:	b10a      	cbz	r2, 8008836 <_printf_common+0x26>
 8008832:	3301      	adds	r3, #1
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	0699      	lsls	r1, r3, #26
 800883a:	bf42      	ittt	mi
 800883c:	6833      	ldrmi	r3, [r6, #0]
 800883e:	3302      	addmi	r3, #2
 8008840:	6033      	strmi	r3, [r6, #0]
 8008842:	6825      	ldr	r5, [r4, #0]
 8008844:	f015 0506 	ands.w	r5, r5, #6
 8008848:	d106      	bne.n	8008858 <_printf_common+0x48>
 800884a:	f104 0a19 	add.w	sl, r4, #25
 800884e:	68e3      	ldr	r3, [r4, #12]
 8008850:	6832      	ldr	r2, [r6, #0]
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	42ab      	cmp	r3, r5
 8008856:	dc26      	bgt.n	80088a6 <_printf_common+0x96>
 8008858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800885c:	1e13      	subs	r3, r2, #0
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	bf18      	it	ne
 8008862:	2301      	movne	r3, #1
 8008864:	0692      	lsls	r2, r2, #26
 8008866:	d42b      	bmi.n	80088c0 <_printf_common+0xb0>
 8008868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800886c:	4649      	mov	r1, r9
 800886e:	4638      	mov	r0, r7
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d01e      	beq.n	80088b4 <_printf_common+0xa4>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	f003 0306 	and.w	r3, r3, #6
 800887e:	2b04      	cmp	r3, #4
 8008880:	bf02      	ittt	eq
 8008882:	68e5      	ldreq	r5, [r4, #12]
 8008884:	6833      	ldreq	r3, [r6, #0]
 8008886:	1aed      	subeq	r5, r5, r3
 8008888:	68a3      	ldr	r3, [r4, #8]
 800888a:	bf0c      	ite	eq
 800888c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008890:	2500      	movne	r5, #0
 8008892:	4293      	cmp	r3, r2
 8008894:	bfc4      	itt	gt
 8008896:	1a9b      	subgt	r3, r3, r2
 8008898:	18ed      	addgt	r5, r5, r3
 800889a:	2600      	movs	r6, #0
 800889c:	341a      	adds	r4, #26
 800889e:	42b5      	cmp	r5, r6
 80088a0:	d11a      	bne.n	80088d8 <_printf_common+0xc8>
 80088a2:	2000      	movs	r0, #0
 80088a4:	e008      	b.n	80088b8 <_printf_common+0xa8>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4652      	mov	r2, sl
 80088aa:	4649      	mov	r1, r9
 80088ac:	4638      	mov	r0, r7
 80088ae:	47c0      	blx	r8
 80088b0:	3001      	adds	r0, #1
 80088b2:	d103      	bne.n	80088bc <_printf_common+0xac>
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088bc:	3501      	adds	r5, #1
 80088be:	e7c6      	b.n	800884e <_printf_common+0x3e>
 80088c0:	18e1      	adds	r1, r4, r3
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	2030      	movs	r0, #48	; 0x30
 80088c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ca:	4422      	add	r2, r4
 80088cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088d4:	3302      	adds	r3, #2
 80088d6:	e7c7      	b.n	8008868 <_printf_common+0x58>
 80088d8:	2301      	movs	r3, #1
 80088da:	4622      	mov	r2, r4
 80088dc:	4649      	mov	r1, r9
 80088de:	4638      	mov	r0, r7
 80088e0:	47c0      	blx	r8
 80088e2:	3001      	adds	r0, #1
 80088e4:	d0e6      	beq.n	80088b4 <_printf_common+0xa4>
 80088e6:	3601      	adds	r6, #1
 80088e8:	e7d9      	b.n	800889e <_printf_common+0x8e>
	...

080088ec <_printf_i>:
 80088ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	7e0f      	ldrb	r7, [r1, #24]
 80088f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088f4:	2f78      	cmp	r7, #120	; 0x78
 80088f6:	4691      	mov	r9, r2
 80088f8:	4680      	mov	r8, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	469a      	mov	sl, r3
 80088fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008902:	d807      	bhi.n	8008914 <_printf_i+0x28>
 8008904:	2f62      	cmp	r7, #98	; 0x62
 8008906:	d80a      	bhi.n	800891e <_printf_i+0x32>
 8008908:	2f00      	cmp	r7, #0
 800890a:	f000 80d4 	beq.w	8008ab6 <_printf_i+0x1ca>
 800890e:	2f58      	cmp	r7, #88	; 0x58
 8008910:	f000 80c0 	beq.w	8008a94 <_printf_i+0x1a8>
 8008914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800891c:	e03a      	b.n	8008994 <_printf_i+0xa8>
 800891e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008922:	2b15      	cmp	r3, #21
 8008924:	d8f6      	bhi.n	8008914 <_printf_i+0x28>
 8008926:	a101      	add	r1, pc, #4	; (adr r1, 800892c <_printf_i+0x40>)
 8008928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800892c:	08008985 	.word	0x08008985
 8008930:	08008999 	.word	0x08008999
 8008934:	08008915 	.word	0x08008915
 8008938:	08008915 	.word	0x08008915
 800893c:	08008915 	.word	0x08008915
 8008940:	08008915 	.word	0x08008915
 8008944:	08008999 	.word	0x08008999
 8008948:	08008915 	.word	0x08008915
 800894c:	08008915 	.word	0x08008915
 8008950:	08008915 	.word	0x08008915
 8008954:	08008915 	.word	0x08008915
 8008958:	08008a9d 	.word	0x08008a9d
 800895c:	080089c5 	.word	0x080089c5
 8008960:	08008a57 	.word	0x08008a57
 8008964:	08008915 	.word	0x08008915
 8008968:	08008915 	.word	0x08008915
 800896c:	08008abf 	.word	0x08008abf
 8008970:	08008915 	.word	0x08008915
 8008974:	080089c5 	.word	0x080089c5
 8008978:	08008915 	.word	0x08008915
 800897c:	08008915 	.word	0x08008915
 8008980:	08008a5f 	.word	0x08008a5f
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	602a      	str	r2, [r5, #0]
 800898c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008994:	2301      	movs	r3, #1
 8008996:	e09f      	b.n	8008ad8 <_printf_i+0x1ec>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	0607      	lsls	r7, r0, #24
 800899e:	f103 0104 	add.w	r1, r3, #4
 80089a2:	6029      	str	r1, [r5, #0]
 80089a4:	d501      	bpl.n	80089aa <_printf_i+0xbe>
 80089a6:	681e      	ldr	r6, [r3, #0]
 80089a8:	e003      	b.n	80089b2 <_printf_i+0xc6>
 80089aa:	0646      	lsls	r6, r0, #25
 80089ac:	d5fb      	bpl.n	80089a6 <_printf_i+0xba>
 80089ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	da03      	bge.n	80089be <_printf_i+0xd2>
 80089b6:	232d      	movs	r3, #45	; 0x2d
 80089b8:	4276      	negs	r6, r6
 80089ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089be:	485a      	ldr	r0, [pc, #360]	; (8008b28 <_printf_i+0x23c>)
 80089c0:	230a      	movs	r3, #10
 80089c2:	e012      	b.n	80089ea <_printf_i+0xfe>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	6820      	ldr	r0, [r4, #0]
 80089c8:	1d19      	adds	r1, r3, #4
 80089ca:	6029      	str	r1, [r5, #0]
 80089cc:	0605      	lsls	r5, r0, #24
 80089ce:	d501      	bpl.n	80089d4 <_printf_i+0xe8>
 80089d0:	681e      	ldr	r6, [r3, #0]
 80089d2:	e002      	b.n	80089da <_printf_i+0xee>
 80089d4:	0641      	lsls	r1, r0, #25
 80089d6:	d5fb      	bpl.n	80089d0 <_printf_i+0xe4>
 80089d8:	881e      	ldrh	r6, [r3, #0]
 80089da:	4853      	ldr	r0, [pc, #332]	; (8008b28 <_printf_i+0x23c>)
 80089dc:	2f6f      	cmp	r7, #111	; 0x6f
 80089de:	bf0c      	ite	eq
 80089e0:	2308      	moveq	r3, #8
 80089e2:	230a      	movne	r3, #10
 80089e4:	2100      	movs	r1, #0
 80089e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ea:	6865      	ldr	r5, [r4, #4]
 80089ec:	60a5      	str	r5, [r4, #8]
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	bfa2      	ittt	ge
 80089f2:	6821      	ldrge	r1, [r4, #0]
 80089f4:	f021 0104 	bicge.w	r1, r1, #4
 80089f8:	6021      	strge	r1, [r4, #0]
 80089fa:	b90e      	cbnz	r6, 8008a00 <_printf_i+0x114>
 80089fc:	2d00      	cmp	r5, #0
 80089fe:	d04b      	beq.n	8008a98 <_printf_i+0x1ac>
 8008a00:	4615      	mov	r5, r2
 8008a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a06:	fb03 6711 	mls	r7, r3, r1, r6
 8008a0a:	5dc7      	ldrb	r7, [r0, r7]
 8008a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a10:	4637      	mov	r7, r6
 8008a12:	42bb      	cmp	r3, r7
 8008a14:	460e      	mov	r6, r1
 8008a16:	d9f4      	bls.n	8008a02 <_printf_i+0x116>
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d10b      	bne.n	8008a34 <_printf_i+0x148>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	07de      	lsls	r6, r3, #31
 8008a20:	d508      	bpl.n	8008a34 <_printf_i+0x148>
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	4299      	cmp	r1, r3
 8008a28:	bfde      	ittt	le
 8008a2a:	2330      	movle	r3, #48	; 0x30
 8008a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a34:	1b52      	subs	r2, r2, r5
 8008a36:	6122      	str	r2, [r4, #16]
 8008a38:	f8cd a000 	str.w	sl, [sp]
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	aa03      	add	r2, sp, #12
 8008a40:	4621      	mov	r1, r4
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff fee4 	bl	8008810 <_printf_common>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d14a      	bne.n	8008ae2 <_printf_i+0x1f6>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b004      	add	sp, #16
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	f043 0320 	orr.w	r3, r3, #32
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	4833      	ldr	r0, [pc, #204]	; (8008b2c <_printf_i+0x240>)
 8008a60:	2778      	movs	r7, #120	; 0x78
 8008a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	6829      	ldr	r1, [r5, #0]
 8008a6a:	061f      	lsls	r7, r3, #24
 8008a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a70:	d402      	bmi.n	8008a78 <_printf_i+0x18c>
 8008a72:	065f      	lsls	r7, r3, #25
 8008a74:	bf48      	it	mi
 8008a76:	b2b6      	uxthmi	r6, r6
 8008a78:	07df      	lsls	r7, r3, #31
 8008a7a:	bf48      	it	mi
 8008a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a80:	6029      	str	r1, [r5, #0]
 8008a82:	bf48      	it	mi
 8008a84:	6023      	strmi	r3, [r4, #0]
 8008a86:	b91e      	cbnz	r6, 8008a90 <_printf_i+0x1a4>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	f023 0320 	bic.w	r3, r3, #32
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	2310      	movs	r3, #16
 8008a92:	e7a7      	b.n	80089e4 <_printf_i+0xf8>
 8008a94:	4824      	ldr	r0, [pc, #144]	; (8008b28 <_printf_i+0x23c>)
 8008a96:	e7e4      	b.n	8008a62 <_printf_i+0x176>
 8008a98:	4615      	mov	r5, r2
 8008a9a:	e7bd      	b.n	8008a18 <_printf_i+0x12c>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	6826      	ldr	r6, [r4, #0]
 8008aa0:	6961      	ldr	r1, [r4, #20]
 8008aa2:	1d18      	adds	r0, r3, #4
 8008aa4:	6028      	str	r0, [r5, #0]
 8008aa6:	0635      	lsls	r5, r6, #24
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0x1c4>
 8008aac:	6019      	str	r1, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0x1ca>
 8008ab0:	0670      	lsls	r0, r6, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0x1c0>
 8008ab4:	8019      	strh	r1, [r3, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	4615      	mov	r5, r2
 8008abc:	e7bc      	b.n	8008a38 <_printf_i+0x14c>
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	602a      	str	r2, [r5, #0]
 8008ac4:	681d      	ldr	r5, [r3, #0]
 8008ac6:	6862      	ldr	r2, [r4, #4]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7f7 fb98 	bl	8000200 <memchr>
 8008ad0:	b108      	cbz	r0, 8008ad6 <_printf_i+0x1ea>
 8008ad2:	1b40      	subs	r0, r0, r5
 8008ad4:	6060      	str	r0, [r4, #4]
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	6123      	str	r3, [r4, #16]
 8008ada:	2300      	movs	r3, #0
 8008adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae0:	e7aa      	b.n	8008a38 <_printf_i+0x14c>
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4640      	mov	r0, r8
 8008aea:	47d0      	blx	sl
 8008aec:	3001      	adds	r0, #1
 8008aee:	d0ad      	beq.n	8008a4c <_printf_i+0x160>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	079b      	lsls	r3, r3, #30
 8008af4:	d413      	bmi.n	8008b1e <_printf_i+0x232>
 8008af6:	68e0      	ldr	r0, [r4, #12]
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	4298      	cmp	r0, r3
 8008afc:	bfb8      	it	lt
 8008afe:	4618      	movlt	r0, r3
 8008b00:	e7a6      	b.n	8008a50 <_printf_i+0x164>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4632      	mov	r2, r6
 8008b06:	4649      	mov	r1, r9
 8008b08:	4640      	mov	r0, r8
 8008b0a:	47d0      	blx	sl
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d09d      	beq.n	8008a4c <_printf_i+0x160>
 8008b10:	3501      	adds	r5, #1
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	1a5b      	subs	r3, r3, r1
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dcf2      	bgt.n	8008b02 <_printf_i+0x216>
 8008b1c:	e7eb      	b.n	8008af6 <_printf_i+0x20a>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	f104 0619 	add.w	r6, r4, #25
 8008b24:	e7f5      	b.n	8008b12 <_printf_i+0x226>
 8008b26:	bf00      	nop
 8008b28:	0800e1a2 	.word	0x0800e1a2
 8008b2c:	0800e1b3 	.word	0x0800e1b3

08008b30 <_scanf_float>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	b087      	sub	sp, #28
 8008b36:	4617      	mov	r7, r2
 8008b38:	9303      	str	r3, [sp, #12]
 8008b3a:	688b      	ldr	r3, [r1, #8]
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b42:	bf83      	ittte	hi
 8008b44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b48:	195b      	addhi	r3, r3, r5
 8008b4a:	9302      	strhi	r3, [sp, #8]
 8008b4c:	2300      	movls	r3, #0
 8008b4e:	bf86      	itte	hi
 8008b50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b54:	608b      	strhi	r3, [r1, #8]
 8008b56:	9302      	strls	r3, [sp, #8]
 8008b58:	680b      	ldr	r3, [r1, #0]
 8008b5a:	468b      	mov	fp, r1
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b62:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	465e      	mov	r6, fp
 8008b70:	46aa      	mov	sl, r5
 8008b72:	46a9      	mov	r9, r5
 8008b74:	9501      	str	r5, [sp, #4]
 8008b76:	68a2      	ldr	r2, [r4, #8]
 8008b78:	b152      	cbz	r2, 8008b90 <_scanf_float+0x60>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b4e      	cmp	r3, #78	; 0x4e
 8008b80:	d864      	bhi.n	8008c4c <_scanf_float+0x11c>
 8008b82:	2b40      	cmp	r3, #64	; 0x40
 8008b84:	d83c      	bhi.n	8008c00 <_scanf_float+0xd0>
 8008b86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b8a:	b2c8      	uxtb	r0, r1
 8008b8c:	280e      	cmp	r0, #14
 8008b8e:	d93a      	bls.n	8008c06 <_scanf_float+0xd6>
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	d003      	beq.n	8008b9e <_scanf_float+0x6e>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ba2:	f1ba 0f01 	cmp.w	sl, #1
 8008ba6:	f200 8113 	bhi.w	8008dd0 <_scanf_float+0x2a0>
 8008baa:	455e      	cmp	r6, fp
 8008bac:	f200 8105 	bhi.w	8008dba <_scanf_float+0x28a>
 8008bb0:	2501      	movs	r5, #1
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	b007      	add	sp, #28
 8008bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008bbe:	2a0d      	cmp	r2, #13
 8008bc0:	d8e6      	bhi.n	8008b90 <_scanf_float+0x60>
 8008bc2:	a101      	add	r1, pc, #4	; (adr r1, 8008bc8 <_scanf_float+0x98>)
 8008bc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bc8:	08008d07 	.word	0x08008d07
 8008bcc:	08008b91 	.word	0x08008b91
 8008bd0:	08008b91 	.word	0x08008b91
 8008bd4:	08008b91 	.word	0x08008b91
 8008bd8:	08008d67 	.word	0x08008d67
 8008bdc:	08008d3f 	.word	0x08008d3f
 8008be0:	08008b91 	.word	0x08008b91
 8008be4:	08008b91 	.word	0x08008b91
 8008be8:	08008d15 	.word	0x08008d15
 8008bec:	08008b91 	.word	0x08008b91
 8008bf0:	08008b91 	.word	0x08008b91
 8008bf4:	08008b91 	.word	0x08008b91
 8008bf8:	08008b91 	.word	0x08008b91
 8008bfc:	08008ccd 	.word	0x08008ccd
 8008c00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c04:	e7db      	b.n	8008bbe <_scanf_float+0x8e>
 8008c06:	290e      	cmp	r1, #14
 8008c08:	d8c2      	bhi.n	8008b90 <_scanf_float+0x60>
 8008c0a:	a001      	add	r0, pc, #4	; (adr r0, 8008c10 <_scanf_float+0xe0>)
 8008c0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c10:	08008cbf 	.word	0x08008cbf
 8008c14:	08008b91 	.word	0x08008b91
 8008c18:	08008cbf 	.word	0x08008cbf
 8008c1c:	08008d53 	.word	0x08008d53
 8008c20:	08008b91 	.word	0x08008b91
 8008c24:	08008c6d 	.word	0x08008c6d
 8008c28:	08008ca9 	.word	0x08008ca9
 8008c2c:	08008ca9 	.word	0x08008ca9
 8008c30:	08008ca9 	.word	0x08008ca9
 8008c34:	08008ca9 	.word	0x08008ca9
 8008c38:	08008ca9 	.word	0x08008ca9
 8008c3c:	08008ca9 	.word	0x08008ca9
 8008c40:	08008ca9 	.word	0x08008ca9
 8008c44:	08008ca9 	.word	0x08008ca9
 8008c48:	08008ca9 	.word	0x08008ca9
 8008c4c:	2b6e      	cmp	r3, #110	; 0x6e
 8008c4e:	d809      	bhi.n	8008c64 <_scanf_float+0x134>
 8008c50:	2b60      	cmp	r3, #96	; 0x60
 8008c52:	d8b2      	bhi.n	8008bba <_scanf_float+0x8a>
 8008c54:	2b54      	cmp	r3, #84	; 0x54
 8008c56:	d077      	beq.n	8008d48 <_scanf_float+0x218>
 8008c58:	2b59      	cmp	r3, #89	; 0x59
 8008c5a:	d199      	bne.n	8008b90 <_scanf_float+0x60>
 8008c5c:	2d07      	cmp	r5, #7
 8008c5e:	d197      	bne.n	8008b90 <_scanf_float+0x60>
 8008c60:	2508      	movs	r5, #8
 8008c62:	e029      	b.n	8008cb8 <_scanf_float+0x188>
 8008c64:	2b74      	cmp	r3, #116	; 0x74
 8008c66:	d06f      	beq.n	8008d48 <_scanf_float+0x218>
 8008c68:	2b79      	cmp	r3, #121	; 0x79
 8008c6a:	e7f6      	b.n	8008c5a <_scanf_float+0x12a>
 8008c6c:	6821      	ldr	r1, [r4, #0]
 8008c6e:	05c8      	lsls	r0, r1, #23
 8008c70:	d51a      	bpl.n	8008ca8 <_scanf_float+0x178>
 8008c72:	9b02      	ldr	r3, [sp, #8]
 8008c74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c78:	6021      	str	r1, [r4, #0]
 8008c7a:	f109 0901 	add.w	r9, r9, #1
 8008c7e:	b11b      	cbz	r3, 8008c88 <_scanf_float+0x158>
 8008c80:	3b01      	subs	r3, #1
 8008c82:	3201      	adds	r2, #1
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	60a2      	str	r2, [r4, #8]
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	3301      	adds	r3, #1
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	f340 8084 	ble.w	8008da8 <_scanf_float+0x278>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	603b      	str	r3, [r7, #0]
 8008ca6:	e766      	b.n	8008b76 <_scanf_float+0x46>
 8008ca8:	eb1a 0f05 	cmn.w	sl, r5
 8008cac:	f47f af70 	bne.w	8008b90 <_scanf_float+0x60>
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008cb6:	6022      	str	r2, [r4, #0]
 8008cb8:	f806 3b01 	strb.w	r3, [r6], #1
 8008cbc:	e7e4      	b.n	8008c88 <_scanf_float+0x158>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	0610      	lsls	r0, r2, #24
 8008cc2:	f57f af65 	bpl.w	8008b90 <_scanf_float+0x60>
 8008cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cca:	e7f4      	b.n	8008cb6 <_scanf_float+0x186>
 8008ccc:	f1ba 0f00 	cmp.w	sl, #0
 8008cd0:	d10e      	bne.n	8008cf0 <_scanf_float+0x1c0>
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	d10e      	bne.n	8008cf6 <_scanf_float+0x1c6>
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ce2:	d108      	bne.n	8008cf6 <_scanf_float+0x1c6>
 8008ce4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	f04f 0a01 	mov.w	sl, #1
 8008cee:	e7e3      	b.n	8008cb8 <_scanf_float+0x188>
 8008cf0:	f1ba 0f02 	cmp.w	sl, #2
 8008cf4:	d055      	beq.n	8008da2 <_scanf_float+0x272>
 8008cf6:	2d01      	cmp	r5, #1
 8008cf8:	d002      	beq.n	8008d00 <_scanf_float+0x1d0>
 8008cfa:	2d04      	cmp	r5, #4
 8008cfc:	f47f af48 	bne.w	8008b90 <_scanf_float+0x60>
 8008d00:	3501      	adds	r5, #1
 8008d02:	b2ed      	uxtb	r5, r5
 8008d04:	e7d8      	b.n	8008cb8 <_scanf_float+0x188>
 8008d06:	f1ba 0f01 	cmp.w	sl, #1
 8008d0a:	f47f af41 	bne.w	8008b90 <_scanf_float+0x60>
 8008d0e:	f04f 0a02 	mov.w	sl, #2
 8008d12:	e7d1      	b.n	8008cb8 <_scanf_float+0x188>
 8008d14:	b97d      	cbnz	r5, 8008d36 <_scanf_float+0x206>
 8008d16:	f1b9 0f00 	cmp.w	r9, #0
 8008d1a:	f47f af3c 	bne.w	8008b96 <_scanf_float+0x66>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d28:	f47f af39 	bne.w	8008b9e <_scanf_float+0x6e>
 8008d2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	2501      	movs	r5, #1
 8008d34:	e7c0      	b.n	8008cb8 <_scanf_float+0x188>
 8008d36:	2d03      	cmp	r5, #3
 8008d38:	d0e2      	beq.n	8008d00 <_scanf_float+0x1d0>
 8008d3a:	2d05      	cmp	r5, #5
 8008d3c:	e7de      	b.n	8008cfc <_scanf_float+0x1cc>
 8008d3e:	2d02      	cmp	r5, #2
 8008d40:	f47f af26 	bne.w	8008b90 <_scanf_float+0x60>
 8008d44:	2503      	movs	r5, #3
 8008d46:	e7b7      	b.n	8008cb8 <_scanf_float+0x188>
 8008d48:	2d06      	cmp	r5, #6
 8008d4a:	f47f af21 	bne.w	8008b90 <_scanf_float+0x60>
 8008d4e:	2507      	movs	r5, #7
 8008d50:	e7b2      	b.n	8008cb8 <_scanf_float+0x188>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	0591      	lsls	r1, r2, #22
 8008d56:	f57f af1b 	bpl.w	8008b90 <_scanf_float+0x60>
 8008d5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008d5e:	6022      	str	r2, [r4, #0]
 8008d60:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d64:	e7a8      	b.n	8008cb8 <_scanf_float+0x188>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d70:	d006      	beq.n	8008d80 <_scanf_float+0x250>
 8008d72:	0550      	lsls	r0, r2, #21
 8008d74:	f57f af0c 	bpl.w	8008b90 <_scanf_float+0x60>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	f43f af0f 	beq.w	8008b9e <_scanf_float+0x6e>
 8008d80:	0591      	lsls	r1, r2, #22
 8008d82:	bf58      	it	pl
 8008d84:	9901      	ldrpl	r1, [sp, #4]
 8008d86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d8a:	bf58      	it	pl
 8008d8c:	eba9 0101 	subpl.w	r1, r9, r1
 8008d90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d94:	bf58      	it	pl
 8008d96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	f04f 0900 	mov.w	r9, #0
 8008da0:	e78a      	b.n	8008cb8 <_scanf_float+0x188>
 8008da2:	f04f 0a03 	mov.w	sl, #3
 8008da6:	e787      	b.n	8008cb8 <_scanf_float+0x188>
 8008da8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008dac:	4639      	mov	r1, r7
 8008dae:	4640      	mov	r0, r8
 8008db0:	4798      	blx	r3
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f43f aedf 	beq.w	8008b76 <_scanf_float+0x46>
 8008db8:	e6ea      	b.n	8008b90 <_scanf_float+0x60>
 8008dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4798      	blx	r3
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	e6ec      	b.n	8008baa <_scanf_float+0x7a>
 8008dd0:	1e6b      	subs	r3, r5, #1
 8008dd2:	2b06      	cmp	r3, #6
 8008dd4:	d825      	bhi.n	8008e22 <_scanf_float+0x2f2>
 8008dd6:	2d02      	cmp	r5, #2
 8008dd8:	d836      	bhi.n	8008e48 <_scanf_float+0x318>
 8008dda:	455e      	cmp	r6, fp
 8008ddc:	f67f aee8 	bls.w	8008bb0 <_scanf_float+0x80>
 8008de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008de4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008de8:	463a      	mov	r2, r7
 8008dea:	4640      	mov	r0, r8
 8008dec:	4798      	blx	r3
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	e7f1      	b.n	8008dda <_scanf_float+0x2aa>
 8008df6:	9802      	ldr	r0, [sp, #8]
 8008df8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dfc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e00:	9002      	str	r0, [sp, #8]
 8008e02:	463a      	mov	r2, r7
 8008e04:	4640      	mov	r0, r8
 8008e06:	4798      	blx	r3
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	6123      	str	r3, [r4, #16]
 8008e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e12:	fa5f fa8a 	uxtb.w	sl, sl
 8008e16:	f1ba 0f02 	cmp.w	sl, #2
 8008e1a:	d1ec      	bne.n	8008df6 <_scanf_float+0x2c6>
 8008e1c:	3d03      	subs	r5, #3
 8008e1e:	b2ed      	uxtb	r5, r5
 8008e20:	1b76      	subs	r6, r6, r5
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	05da      	lsls	r2, r3, #23
 8008e26:	d52f      	bpl.n	8008e88 <_scanf_float+0x358>
 8008e28:	055b      	lsls	r3, r3, #21
 8008e2a:	d510      	bpl.n	8008e4e <_scanf_float+0x31e>
 8008e2c:	455e      	cmp	r6, fp
 8008e2e:	f67f aebf 	bls.w	8008bb0 <_scanf_float+0x80>
 8008e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4798      	blx	r3
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	e7f1      	b.n	8008e2c <_scanf_float+0x2fc>
 8008e48:	46aa      	mov	sl, r5
 8008e4a:	9602      	str	r6, [sp, #8]
 8008e4c:	e7df      	b.n	8008e0e <_scanf_float+0x2de>
 8008e4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	2965      	cmp	r1, #101	; 0x65
 8008e56:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	d00c      	beq.n	8008e7c <_scanf_float+0x34c>
 8008e62:	2945      	cmp	r1, #69	; 0x45
 8008e64:	d00a      	beq.n	8008e7c <_scanf_float+0x34c>
 8008e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4798      	blx	r3
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	1eb5      	subs	r5, r6, #2
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e80:	463a      	mov	r2, r7
 8008e82:	4640      	mov	r0, r8
 8008e84:	4798      	blx	r3
 8008e86:	462e      	mov	r6, r5
 8008e88:	6825      	ldr	r5, [r4, #0]
 8008e8a:	f015 0510 	ands.w	r5, r5, #16
 8008e8e:	d158      	bne.n	8008f42 <_scanf_float+0x412>
 8008e90:	7035      	strb	r5, [r6, #0]
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9c:	d11c      	bne.n	8008ed8 <_scanf_float+0x3a8>
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	454b      	cmp	r3, r9
 8008ea2:	eba3 0209 	sub.w	r2, r3, r9
 8008ea6:	d124      	bne.n	8008ef2 <_scanf_float+0x3c2>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4659      	mov	r1, fp
 8008eac:	4640      	mov	r0, r8
 8008eae:	f002 fd3f 	bl	800b930 <_strtod_r>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	6821      	ldr	r1, [r4, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f011 0f02 	tst.w	r1, #2
 8008ebc:	ec57 6b10 	vmov	r6, r7, d0
 8008ec0:	f103 0204 	add.w	r2, r3, #4
 8008ec4:	d020      	beq.n	8008f08 <_scanf_float+0x3d8>
 8008ec6:	9903      	ldr	r1, [sp, #12]
 8008ec8:	600a      	str	r2, [r1, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	e9c3 6700 	strd	r6, r7, [r3]
 8008ed0:	68e3      	ldr	r3, [r4, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60e3      	str	r3, [r4, #12]
 8008ed6:	e66c      	b.n	8008bb2 <_scanf_float+0x82>
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0e4      	beq.n	8008ea8 <_scanf_float+0x378>
 8008ede:	9905      	ldr	r1, [sp, #20]
 8008ee0:	230a      	movs	r3, #10
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f002 fdaa 	bl	800ba40 <_strtol_r>
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	9e05      	ldr	r6, [sp, #20]
 8008ef0:	1ac2      	subs	r2, r0, r3
 8008ef2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ef6:	429e      	cmp	r6, r3
 8008ef8:	bf28      	it	cs
 8008efa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008efe:	4912      	ldr	r1, [pc, #72]	; (8008f48 <_scanf_float+0x418>)
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f955 	bl	80091b0 <siprintf>
 8008f06:	e7cf      	b.n	8008ea8 <_scanf_float+0x378>
 8008f08:	f011 0f04 	tst.w	r1, #4
 8008f0c:	9903      	ldr	r1, [sp, #12]
 8008f0e:	600a      	str	r2, [r1, #0]
 8008f10:	d1db      	bne.n	8008eca <_scanf_float+0x39a>
 8008f12:	f8d3 8000 	ldr.w	r8, [r3]
 8008f16:	ee10 2a10 	vmov	r2, s0
 8008f1a:	ee10 0a10 	vmov	r0, s0
 8008f1e:	463b      	mov	r3, r7
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 fe1b 	bl	8000b5c <__aeabi_dcmpun>
 8008f26:	b128      	cbz	r0, 8008f34 <_scanf_float+0x404>
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <_scanf_float+0x41c>)
 8008f2a:	f000 fac7 	bl	80094bc <nanf>
 8008f2e:	ed88 0a00 	vstr	s0, [r8]
 8008f32:	e7cd      	b.n	8008ed0 <_scanf_float+0x3a0>
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 fe6e 	bl	8000c18 <__aeabi_d2f>
 8008f3c:	f8c8 0000 	str.w	r0, [r8]
 8008f40:	e7c6      	b.n	8008ed0 <_scanf_float+0x3a0>
 8008f42:	2500      	movs	r5, #0
 8008f44:	e635      	b.n	8008bb2 <_scanf_float+0x82>
 8008f46:	bf00      	nop
 8008f48:	0800e1c4 	.word	0x0800e1c4
 8008f4c:	0800e555 	.word	0x0800e555

08008f50 <std>:
 8008f50:	2300      	movs	r3, #0
 8008f52:	b510      	push	{r4, lr}
 8008f54:	4604      	mov	r4, r0
 8008f56:	e9c0 3300 	strd	r3, r3, [r0]
 8008f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f5e:	6083      	str	r3, [r0, #8]
 8008f60:	8181      	strh	r1, [r0, #12]
 8008f62:	6643      	str	r3, [r0, #100]	; 0x64
 8008f64:	81c2      	strh	r2, [r0, #14]
 8008f66:	6183      	str	r3, [r0, #24]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	305c      	adds	r0, #92	; 0x5c
 8008f6e:	f000 fa17 	bl	80093a0 <memset>
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <std+0x58>)
 8008f74:	6263      	str	r3, [r4, #36]	; 0x24
 8008f76:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <std+0x5c>)
 8008f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <std+0x60>)
 8008f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <std+0x64>)
 8008f80:	6323      	str	r3, [r4, #48]	; 0x30
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <std+0x68>)
 8008f84:	6224      	str	r4, [r4, #32]
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d006      	beq.n	8008f98 <std+0x48>
 8008f8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f8e:	4294      	cmp	r4, r2
 8008f90:	d002      	beq.n	8008f98 <std+0x48>
 8008f92:	33d0      	adds	r3, #208	; 0xd0
 8008f94:	429c      	cmp	r4, r3
 8008f96:	d105      	bne.n	8008fa4 <std+0x54>
 8008f98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa0:	f000 ba7a 	b.w	8009498 <__retarget_lock_init_recursive>
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	bf00      	nop
 8008fa8:	080091f1 	.word	0x080091f1
 8008fac:	08009213 	.word	0x08009213
 8008fb0:	0800924b 	.word	0x0800924b
 8008fb4:	0800926f 	.word	0x0800926f
 8008fb8:	200040dc 	.word	0x200040dc

08008fbc <stdio_exit_handler>:
 8008fbc:	4a02      	ldr	r2, [pc, #8]	; (8008fc8 <stdio_exit_handler+0xc>)
 8008fbe:	4903      	ldr	r1, [pc, #12]	; (8008fcc <stdio_exit_handler+0x10>)
 8008fc0:	4803      	ldr	r0, [pc, #12]	; (8008fd0 <stdio_exit_handler+0x14>)
 8008fc2:	f000 b869 	b.w	8009098 <_fwalk_sglue>
 8008fc6:	bf00      	nop
 8008fc8:	20000024 	.word	0x20000024
 8008fcc:	0800c089 	.word	0x0800c089
 8008fd0:	20000030 	.word	0x20000030

08008fd4 <cleanup_stdio>:
 8008fd4:	6841      	ldr	r1, [r0, #4]
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <cleanup_stdio+0x34>)
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	d001      	beq.n	8008fe4 <cleanup_stdio+0x10>
 8008fe0:	f003 f852 	bl	800c088 <_fflush_r>
 8008fe4:	68a1      	ldr	r1, [r4, #8]
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <cleanup_stdio+0x38>)
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	d002      	beq.n	8008ff2 <cleanup_stdio+0x1e>
 8008fec:	4620      	mov	r0, r4
 8008fee:	f003 f84b 	bl	800c088 <_fflush_r>
 8008ff2:	68e1      	ldr	r1, [r4, #12]
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <cleanup_stdio+0x3c>)
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	d004      	beq.n	8009004 <cleanup_stdio+0x30>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009000:	f003 b842 	b.w	800c088 <_fflush_r>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	bf00      	nop
 8009008:	200040dc 	.word	0x200040dc
 800900c:	20004144 	.word	0x20004144
 8009010:	200041ac 	.word	0x200041ac

08009014 <global_stdio_init.part.0>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <global_stdio_init.part.0+0x30>)
 8009018:	4c0b      	ldr	r4, [pc, #44]	; (8009048 <global_stdio_init.part.0+0x34>)
 800901a:	4a0c      	ldr	r2, [pc, #48]	; (800904c <global_stdio_init.part.0+0x38>)
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	4620      	mov	r0, r4
 8009020:	2200      	movs	r2, #0
 8009022:	2104      	movs	r1, #4
 8009024:	f7ff ff94 	bl	8008f50 <std>
 8009028:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800902c:	2201      	movs	r2, #1
 800902e:	2109      	movs	r1, #9
 8009030:	f7ff ff8e 	bl	8008f50 <std>
 8009034:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009038:	2202      	movs	r2, #2
 800903a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800903e:	2112      	movs	r1, #18
 8009040:	f7ff bf86 	b.w	8008f50 <std>
 8009044:	20004214 	.word	0x20004214
 8009048:	200040dc 	.word	0x200040dc
 800904c:	08008fbd 	.word	0x08008fbd

08009050 <__sfp_lock_acquire>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__sfp_lock_acquire+0x8>)
 8009052:	f000 ba22 	b.w	800949a <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	2000421d 	.word	0x2000421d

0800905c <__sfp_lock_release>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__sfp_lock_release+0x8>)
 800905e:	f000 ba1d 	b.w	800949c <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	2000421d 	.word	0x2000421d

08009068 <__sinit>:
 8009068:	b510      	push	{r4, lr}
 800906a:	4604      	mov	r4, r0
 800906c:	f7ff fff0 	bl	8009050 <__sfp_lock_acquire>
 8009070:	6a23      	ldr	r3, [r4, #32]
 8009072:	b11b      	cbz	r3, 800907c <__sinit+0x14>
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f7ff bff0 	b.w	800905c <__sfp_lock_release>
 800907c:	4b04      	ldr	r3, [pc, #16]	; (8009090 <__sinit+0x28>)
 800907e:	6223      	str	r3, [r4, #32]
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <__sinit+0x2c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1f5      	bne.n	8009074 <__sinit+0xc>
 8009088:	f7ff ffc4 	bl	8009014 <global_stdio_init.part.0>
 800908c:	e7f2      	b.n	8009074 <__sinit+0xc>
 800908e:	bf00      	nop
 8009090:	08008fd5 	.word	0x08008fd5
 8009094:	20004214 	.word	0x20004214

08009098 <_fwalk_sglue>:
 8009098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800909c:	4607      	mov	r7, r0
 800909e:	4688      	mov	r8, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	2600      	movs	r6, #0
 80090a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a8:	f1b9 0901 	subs.w	r9, r9, #1
 80090ac:	d505      	bpl.n	80090ba <_fwalk_sglue+0x22>
 80090ae:	6824      	ldr	r4, [r4, #0]
 80090b0:	2c00      	cmp	r4, #0
 80090b2:	d1f7      	bne.n	80090a4 <_fwalk_sglue+0xc>
 80090b4:	4630      	mov	r0, r6
 80090b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d907      	bls.n	80090d0 <_fwalk_sglue+0x38>
 80090c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090c4:	3301      	adds	r3, #1
 80090c6:	d003      	beq.n	80090d0 <_fwalk_sglue+0x38>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c0      	blx	r8
 80090ce:	4306      	orrs	r6, r0
 80090d0:	3568      	adds	r5, #104	; 0x68
 80090d2:	e7e9      	b.n	80090a8 <_fwalk_sglue+0x10>

080090d4 <iprintf>:
 80090d4:	b40f      	push	{r0, r1, r2, r3}
 80090d6:	b507      	push	{r0, r1, r2, lr}
 80090d8:	4906      	ldr	r1, [pc, #24]	; (80090f4 <iprintf+0x20>)
 80090da:	ab04      	add	r3, sp, #16
 80090dc:	6808      	ldr	r0, [r1, #0]
 80090de:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e2:	6881      	ldr	r1, [r0, #8]
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	f002 fe2f 	bl	800bd48 <_vfiprintf_r>
 80090ea:	b003      	add	sp, #12
 80090ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f0:	b004      	add	sp, #16
 80090f2:	4770      	bx	lr
 80090f4:	2000007c 	.word	0x2000007c

080090f8 <_puts_r>:
 80090f8:	6a03      	ldr	r3, [r0, #32]
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	6884      	ldr	r4, [r0, #8]
 80090fe:	4605      	mov	r5, r0
 8009100:	460e      	mov	r6, r1
 8009102:	b90b      	cbnz	r3, 8009108 <_puts_r+0x10>
 8009104:	f7ff ffb0 	bl	8009068 <__sinit>
 8009108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910a:	07db      	lsls	r3, r3, #31
 800910c:	d405      	bmi.n	800911a <_puts_r+0x22>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	0598      	lsls	r0, r3, #22
 8009112:	d402      	bmi.n	800911a <_puts_r+0x22>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f000 f9c0 	bl	800949a <__retarget_lock_acquire_recursive>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	0719      	lsls	r1, r3, #28
 800911e:	d513      	bpl.n	8009148 <_puts_r+0x50>
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	b18b      	cbz	r3, 8009148 <_puts_r+0x50>
 8009124:	3e01      	subs	r6, #1
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800912c:	3b01      	subs	r3, #1
 800912e:	60a3      	str	r3, [r4, #8]
 8009130:	b9e9      	cbnz	r1, 800916e <_puts_r+0x76>
 8009132:	2b00      	cmp	r3, #0
 8009134:	da2e      	bge.n	8009194 <_puts_r+0x9c>
 8009136:	4622      	mov	r2, r4
 8009138:	210a      	movs	r1, #10
 800913a:	4628      	mov	r0, r5
 800913c:	f000 f89b 	bl	8009276 <__swbuf_r>
 8009140:	3001      	adds	r0, #1
 8009142:	d007      	beq.n	8009154 <_puts_r+0x5c>
 8009144:	250a      	movs	r5, #10
 8009146:	e007      	b.n	8009158 <_puts_r+0x60>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f8d0 	bl	80092f0 <__swsetup_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	d0e7      	beq.n	8009124 <_puts_r+0x2c>
 8009154:	f04f 35ff 	mov.w	r5, #4294967295
 8009158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800915a:	07da      	lsls	r2, r3, #31
 800915c:	d405      	bmi.n	800916a <_puts_r+0x72>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	059b      	lsls	r3, r3, #22
 8009162:	d402      	bmi.n	800916a <_puts_r+0x72>
 8009164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009166:	f000 f999 	bl	800949c <__retarget_lock_release_recursive>
 800916a:	4628      	mov	r0, r5
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	2b00      	cmp	r3, #0
 8009170:	da04      	bge.n	800917c <_puts_r+0x84>
 8009172:	69a2      	ldr	r2, [r4, #24]
 8009174:	429a      	cmp	r2, r3
 8009176:	dc06      	bgt.n	8009186 <_puts_r+0x8e>
 8009178:	290a      	cmp	r1, #10
 800917a:	d004      	beq.n	8009186 <_puts_r+0x8e>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	7019      	strb	r1, [r3, #0]
 8009184:	e7cf      	b.n	8009126 <_puts_r+0x2e>
 8009186:	4622      	mov	r2, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f874 	bl	8009276 <__swbuf_r>
 800918e:	3001      	adds	r0, #1
 8009190:	d1c9      	bne.n	8009126 <_puts_r+0x2e>
 8009192:	e7df      	b.n	8009154 <_puts_r+0x5c>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	250a      	movs	r5, #10
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	701d      	strb	r5, [r3, #0]
 800919e:	e7db      	b.n	8009158 <_puts_r+0x60>

080091a0 <puts>:
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <puts+0xc>)
 80091a2:	4601      	mov	r1, r0
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f7ff bfa7 	b.w	80090f8 <_puts_r>
 80091aa:	bf00      	nop
 80091ac:	2000007c 	.word	0x2000007c

080091b0 <siprintf>:
 80091b0:	b40e      	push	{r1, r2, r3}
 80091b2:	b500      	push	{lr}
 80091b4:	b09c      	sub	sp, #112	; 0x70
 80091b6:	ab1d      	add	r3, sp, #116	; 0x74
 80091b8:	9002      	str	r0, [sp, #8]
 80091ba:	9006      	str	r0, [sp, #24]
 80091bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091c0:	4809      	ldr	r0, [pc, #36]	; (80091e8 <siprintf+0x38>)
 80091c2:	9107      	str	r1, [sp, #28]
 80091c4:	9104      	str	r1, [sp, #16]
 80091c6:	4909      	ldr	r1, [pc, #36]	; (80091ec <siprintf+0x3c>)
 80091c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	a902      	add	r1, sp, #8
 80091d4:	f002 fc90 	bl	800baf8 <_svfiprintf_r>
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	b01c      	add	sp, #112	; 0x70
 80091e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	2000007c 	.word	0x2000007c
 80091ec:	ffff0208 	.word	0xffff0208

080091f0 <__sread>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	460c      	mov	r4, r1
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	f000 f900 	bl	80093fc <_read_r>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	bfab      	itete	ge
 8009200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009202:	89a3      	ldrhlt	r3, [r4, #12]
 8009204:	181b      	addge	r3, r3, r0
 8009206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800920a:	bfac      	ite	ge
 800920c:	6563      	strge	r3, [r4, #84]	; 0x54
 800920e:	81a3      	strhlt	r3, [r4, #12]
 8009210:	bd10      	pop	{r4, pc}

08009212 <__swrite>:
 8009212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009216:	461f      	mov	r7, r3
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	05db      	lsls	r3, r3, #23
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	4616      	mov	r6, r2
 8009222:	d505      	bpl.n	8009230 <__swrite+0x1e>
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	2302      	movs	r3, #2
 800922a:	2200      	movs	r2, #0
 800922c:	f000 f8d4 	bl	80093d8 <_lseek_r>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	4628      	mov	r0, r5
 8009242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	f000 b8eb 	b.w	8009420 <_write_r>

0800924a <__sseek>:
 800924a:	b510      	push	{r4, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009252:	f000 f8c1 	bl	80093d8 <_lseek_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	bf15      	itete	ne
 800925c:	6560      	strne	r0, [r4, #84]	; 0x54
 800925e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009266:	81a3      	strheq	r3, [r4, #12]
 8009268:	bf18      	it	ne
 800926a:	81a3      	strhne	r3, [r4, #12]
 800926c:	bd10      	pop	{r4, pc}

0800926e <__sclose>:
 800926e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009272:	f000 b8a1 	b.w	80093b8 <_close_r>

08009276 <__swbuf_r>:
 8009276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009278:	460e      	mov	r6, r1
 800927a:	4614      	mov	r4, r2
 800927c:	4605      	mov	r5, r0
 800927e:	b118      	cbz	r0, 8009288 <__swbuf_r+0x12>
 8009280:	6a03      	ldr	r3, [r0, #32]
 8009282:	b90b      	cbnz	r3, 8009288 <__swbuf_r+0x12>
 8009284:	f7ff fef0 	bl	8009068 <__sinit>
 8009288:	69a3      	ldr	r3, [r4, #24]
 800928a:	60a3      	str	r3, [r4, #8]
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	071a      	lsls	r2, r3, #28
 8009290:	d525      	bpl.n	80092de <__swbuf_r+0x68>
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	b31b      	cbz	r3, 80092de <__swbuf_r+0x68>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	6922      	ldr	r2, [r4, #16]
 800929a:	1a98      	subs	r0, r3, r2
 800929c:	6963      	ldr	r3, [r4, #20]
 800929e:	b2f6      	uxtb	r6, r6
 80092a0:	4283      	cmp	r3, r0
 80092a2:	4637      	mov	r7, r6
 80092a4:	dc04      	bgt.n	80092b0 <__swbuf_r+0x3a>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f002 feed 	bl	800c088 <_fflush_r>
 80092ae:	b9e0      	cbnz	r0, 80092ea <__swbuf_r+0x74>
 80092b0:	68a3      	ldr	r3, [r4, #8]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	701e      	strb	r6, [r3, #0]
 80092be:	6962      	ldr	r2, [r4, #20]
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d004      	beq.n	80092d0 <__swbuf_r+0x5a>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	07db      	lsls	r3, r3, #31
 80092ca:	d506      	bpl.n	80092da <__swbuf_r+0x64>
 80092cc:	2e0a      	cmp	r6, #10
 80092ce:	d104      	bne.n	80092da <__swbuf_r+0x64>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f002 fed8 	bl	800c088 <_fflush_r>
 80092d8:	b938      	cbnz	r0, 80092ea <__swbuf_r+0x74>
 80092da:	4638      	mov	r0, r7
 80092dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 f805 	bl	80092f0 <__swsetup_r>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0d5      	beq.n	8009296 <__swbuf_r+0x20>
 80092ea:	f04f 37ff 	mov.w	r7, #4294967295
 80092ee:	e7f4      	b.n	80092da <__swbuf_r+0x64>

080092f0 <__swsetup_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4b2a      	ldr	r3, [pc, #168]	; (800939c <__swsetup_r+0xac>)
 80092f4:	4605      	mov	r5, r0
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	460c      	mov	r4, r1
 80092fa:	b118      	cbz	r0, 8009304 <__swsetup_r+0x14>
 80092fc:	6a03      	ldr	r3, [r0, #32]
 80092fe:	b90b      	cbnz	r3, 8009304 <__swsetup_r+0x14>
 8009300:	f7ff feb2 	bl	8009068 <__sinit>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800930a:	0718      	lsls	r0, r3, #28
 800930c:	d422      	bmi.n	8009354 <__swsetup_r+0x64>
 800930e:	06d9      	lsls	r1, r3, #27
 8009310:	d407      	bmi.n	8009322 <__swsetup_r+0x32>
 8009312:	2309      	movs	r3, #9
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e034      	b.n	800938c <__swsetup_r+0x9c>
 8009322:	0758      	lsls	r0, r3, #29
 8009324:	d512      	bpl.n	800934c <__swsetup_r+0x5c>
 8009326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009328:	b141      	cbz	r1, 800933c <__swsetup_r+0x4c>
 800932a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800932e:	4299      	cmp	r1, r3
 8009330:	d002      	beq.n	8009338 <__swsetup_r+0x48>
 8009332:	4628      	mov	r0, r5
 8009334:	f000 ff42 	bl	800a1bc <_free_r>
 8009338:	2300      	movs	r3, #0
 800933a:	6363      	str	r3, [r4, #52]	; 0x34
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	2300      	movs	r3, #0
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f043 0308 	orr.w	r3, r3, #8
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	b94b      	cbnz	r3, 800936c <__swsetup_r+0x7c>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800935e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009362:	d003      	beq.n	800936c <__swsetup_r+0x7c>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f002 fedc 	bl	800c124 <__smakebuf_r>
 800936c:	89a0      	ldrh	r0, [r4, #12]
 800936e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009372:	f010 0301 	ands.w	r3, r0, #1
 8009376:	d00a      	beq.n	800938e <__swsetup_r+0x9e>
 8009378:	2300      	movs	r3, #0
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	6963      	ldr	r3, [r4, #20]
 800937e:	425b      	negs	r3, r3
 8009380:	61a3      	str	r3, [r4, #24]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	b943      	cbnz	r3, 8009398 <__swsetup_r+0xa8>
 8009386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800938a:	d1c4      	bne.n	8009316 <__swsetup_r+0x26>
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	0781      	lsls	r1, r0, #30
 8009390:	bf58      	it	pl
 8009392:	6963      	ldrpl	r3, [r4, #20]
 8009394:	60a3      	str	r3, [r4, #8]
 8009396:	e7f4      	b.n	8009382 <__swsetup_r+0x92>
 8009398:	2000      	movs	r0, #0
 800939a:	e7f7      	b.n	800938c <__swsetup_r+0x9c>
 800939c:	2000007c 	.word	0x2000007c

080093a0 <memset>:
 80093a0:	4402      	add	r2, r0
 80093a2:	4603      	mov	r3, r0
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d100      	bne.n	80093aa <memset+0xa>
 80093a8:	4770      	bx	lr
 80093aa:	f803 1b01 	strb.w	r1, [r3], #1
 80093ae:	e7f9      	b.n	80093a4 <memset+0x4>

080093b0 <_localeconv_r>:
 80093b0:	4800      	ldr	r0, [pc, #0]	; (80093b4 <_localeconv_r+0x4>)
 80093b2:	4770      	bx	lr
 80093b4:	20000170 	.word	0x20000170

080093b8 <_close_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_close_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f9 f8b2 	bl	800252c <_close>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_close_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_close_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20004218 	.word	0x20004218

080093d8 <_lseek_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	; (80093f8 <_lseek_r+0x20>)
 80093dc:	4604      	mov	r4, r0
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f9 f8c7 	bl	800257a <_lseek>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_lseek_r+0x1e>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_lseek_r+0x1e>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20004218 	.word	0x20004218

080093fc <_read_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d07      	ldr	r5, [pc, #28]	; (800941c <_read_r+0x20>)
 8009400:	4604      	mov	r4, r0
 8009402:	4608      	mov	r0, r1
 8009404:	4611      	mov	r1, r2
 8009406:	2200      	movs	r2, #0
 8009408:	602a      	str	r2, [r5, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	f7f9 f855 	bl	80024ba <_read>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_read_r+0x1e>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_read_r+0x1e>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	20004218 	.word	0x20004218

08009420 <_write_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_write_r+0x20>)
 8009424:	4604      	mov	r4, r0
 8009426:	4608      	mov	r0, r1
 8009428:	4611      	mov	r1, r2
 800942a:	2200      	movs	r2, #0
 800942c:	602a      	str	r2, [r5, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	f7f9 f860 	bl	80024f4 <_write>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_write_r+0x1e>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_write_r+0x1e>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20004218 	.word	0x20004218

08009444 <__errno>:
 8009444:	4b01      	ldr	r3, [pc, #4]	; (800944c <__errno+0x8>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	2000007c 	.word	0x2000007c

08009450 <__libc_init_array>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4d0d      	ldr	r5, [pc, #52]	; (8009488 <__libc_init_array+0x38>)
 8009454:	4c0d      	ldr	r4, [pc, #52]	; (800948c <__libc_init_array+0x3c>)
 8009456:	1b64      	subs	r4, r4, r5
 8009458:	10a4      	asrs	r4, r4, #2
 800945a:	2600      	movs	r6, #0
 800945c:	42a6      	cmp	r6, r4
 800945e:	d109      	bne.n	8009474 <__libc_init_array+0x24>
 8009460:	4d0b      	ldr	r5, [pc, #44]	; (8009490 <__libc_init_array+0x40>)
 8009462:	4c0c      	ldr	r4, [pc, #48]	; (8009494 <__libc_init_array+0x44>)
 8009464:	f003 fd9e 	bl	800cfa4 <_init>
 8009468:	1b64      	subs	r4, r4, r5
 800946a:	10a4      	asrs	r4, r4, #2
 800946c:	2600      	movs	r6, #0
 800946e:	42a6      	cmp	r6, r4
 8009470:	d105      	bne.n	800947e <__libc_init_array+0x2e>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	f855 3b04 	ldr.w	r3, [r5], #4
 8009478:	4798      	blx	r3
 800947a:	3601      	adds	r6, #1
 800947c:	e7ee      	b.n	800945c <__libc_init_array+0xc>
 800947e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009482:	4798      	blx	r3
 8009484:	3601      	adds	r6, #1
 8009486:	e7f2      	b.n	800946e <__libc_init_array+0x1e>
 8009488:	0800e5f0 	.word	0x0800e5f0
 800948c:	0800e5f0 	.word	0x0800e5f0
 8009490:	0800e5f0 	.word	0x0800e5f0
 8009494:	0800e5f4 	.word	0x0800e5f4

08009498 <__retarget_lock_init_recursive>:
 8009498:	4770      	bx	lr

0800949a <__retarget_lock_acquire_recursive>:
 800949a:	4770      	bx	lr

0800949c <__retarget_lock_release_recursive>:
 800949c:	4770      	bx	lr

0800949e <memcpy>:
 800949e:	440a      	add	r2, r1
 80094a0:	4291      	cmp	r1, r2
 80094a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a6:	d100      	bne.n	80094aa <memcpy+0xc>
 80094a8:	4770      	bx	lr
 80094aa:	b510      	push	{r4, lr}
 80094ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b4:	4291      	cmp	r1, r2
 80094b6:	d1f9      	bne.n	80094ac <memcpy+0xe>
 80094b8:	bd10      	pop	{r4, pc}
	...

080094bc <nanf>:
 80094bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094c4 <nanf+0x8>
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	7fc00000 	.word	0x7fc00000

080094c8 <quorem>:
 80094c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	6903      	ldr	r3, [r0, #16]
 80094ce:	690c      	ldr	r4, [r1, #16]
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	4607      	mov	r7, r0
 80094d4:	db7e      	blt.n	80095d4 <quorem+0x10c>
 80094d6:	3c01      	subs	r4, #1
 80094d8:	f101 0814 	add.w	r8, r1, #20
 80094dc:	f100 0514 	add.w	r5, r0, #20
 80094e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ee:	3301      	adds	r3, #1
 80094f0:	429a      	cmp	r2, r3
 80094f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80094fe:	d331      	bcc.n	8009564 <quorem+0x9c>
 8009500:	f04f 0e00 	mov.w	lr, #0
 8009504:	4640      	mov	r0, r8
 8009506:	46ac      	mov	ip, r5
 8009508:	46f2      	mov	sl, lr
 800950a:	f850 2b04 	ldr.w	r2, [r0], #4
 800950e:	b293      	uxth	r3, r2
 8009510:	fb06 e303 	mla	r3, r6, r3, lr
 8009514:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009518:	0c1a      	lsrs	r2, r3, #16
 800951a:	b29b      	uxth	r3, r3
 800951c:	ebaa 0303 	sub.w	r3, sl, r3
 8009520:	f8dc a000 	ldr.w	sl, [ip]
 8009524:	fa13 f38a 	uxtah	r3, r3, sl
 8009528:	fb06 220e 	mla	r2, r6, lr, r2
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	9b00      	ldr	r3, [sp, #0]
 8009530:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009534:	b292      	uxth	r2, r2
 8009536:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800953a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800953e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009542:	4581      	cmp	r9, r0
 8009544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009548:	f84c 3b04 	str.w	r3, [ip], #4
 800954c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009550:	d2db      	bcs.n	800950a <quorem+0x42>
 8009552:	f855 300b 	ldr.w	r3, [r5, fp]
 8009556:	b92b      	cbnz	r3, 8009564 <quorem+0x9c>
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	3b04      	subs	r3, #4
 800955c:	429d      	cmp	r5, r3
 800955e:	461a      	mov	r2, r3
 8009560:	d32c      	bcc.n	80095bc <quorem+0xf4>
 8009562:	613c      	str	r4, [r7, #16]
 8009564:	4638      	mov	r0, r7
 8009566:	f001 f9ef 	bl	800a948 <__mcmp>
 800956a:	2800      	cmp	r0, #0
 800956c:	db22      	blt.n	80095b4 <quorem+0xec>
 800956e:	3601      	adds	r6, #1
 8009570:	4629      	mov	r1, r5
 8009572:	2000      	movs	r0, #0
 8009574:	f858 2b04 	ldr.w	r2, [r8], #4
 8009578:	f8d1 c000 	ldr.w	ip, [r1]
 800957c:	b293      	uxth	r3, r2
 800957e:	1ac3      	subs	r3, r0, r3
 8009580:	0c12      	lsrs	r2, r2, #16
 8009582:	fa13 f38c 	uxtah	r3, r3, ip
 8009586:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800958a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009594:	45c1      	cmp	r9, r8
 8009596:	f841 3b04 	str.w	r3, [r1], #4
 800959a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800959e:	d2e9      	bcs.n	8009574 <quorem+0xac>
 80095a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a8:	b922      	cbnz	r2, 80095b4 <quorem+0xec>
 80095aa:	3b04      	subs	r3, #4
 80095ac:	429d      	cmp	r5, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	d30a      	bcc.n	80095c8 <quorem+0x100>
 80095b2:	613c      	str	r4, [r7, #16]
 80095b4:	4630      	mov	r0, r6
 80095b6:	b003      	add	sp, #12
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	3b04      	subs	r3, #4
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	d1ce      	bne.n	8009562 <quorem+0x9a>
 80095c4:	3c01      	subs	r4, #1
 80095c6:	e7c9      	b.n	800955c <quorem+0x94>
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	3b04      	subs	r3, #4
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	d1f0      	bne.n	80095b2 <quorem+0xea>
 80095d0:	3c01      	subs	r4, #1
 80095d2:	e7eb      	b.n	80095ac <quorem+0xe4>
 80095d4:	2000      	movs	r0, #0
 80095d6:	e7ee      	b.n	80095b6 <quorem+0xee>

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b04 	vpush	{d8-d9}
 80095e0:	69c5      	ldr	r5, [r0, #28]
 80095e2:	b093      	sub	sp, #76	; 0x4c
 80095e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095e8:	ec57 6b10 	vmov	r6, r7, d0
 80095ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095f0:	9107      	str	r1, [sp, #28]
 80095f2:	4604      	mov	r4, r0
 80095f4:	920a      	str	r2, [sp, #40]	; 0x28
 80095f6:	930d      	str	r3, [sp, #52]	; 0x34
 80095f8:	b975      	cbnz	r5, 8009618 <_dtoa_r+0x40>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f000 fe2a 	bl	800a254 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	61e0      	str	r0, [r4, #28]
 8009604:	b920      	cbnz	r0, 8009610 <_dtoa_r+0x38>
 8009606:	4bae      	ldr	r3, [pc, #696]	; (80098c0 <_dtoa_r+0x2e8>)
 8009608:	21ef      	movs	r1, #239	; 0xef
 800960a:	48ae      	ldr	r0, [pc, #696]	; (80098c4 <_dtoa_r+0x2ec>)
 800960c:	f002 fe2c 	bl	800c268 <__assert_func>
 8009610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009614:	6005      	str	r5, [r0, #0]
 8009616:	60c5      	str	r5, [r0, #12]
 8009618:	69e3      	ldr	r3, [r4, #28]
 800961a:	6819      	ldr	r1, [r3, #0]
 800961c:	b151      	cbz	r1, 8009634 <_dtoa_r+0x5c>
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	604a      	str	r2, [r1, #4]
 8009622:	2301      	movs	r3, #1
 8009624:	4093      	lsls	r3, r2
 8009626:	608b      	str	r3, [r1, #8]
 8009628:	4620      	mov	r0, r4
 800962a:	f000 ff07 	bl	800a43c <_Bfree>
 800962e:	69e3      	ldr	r3, [r4, #28]
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	1e3b      	subs	r3, r7, #0
 8009636:	bfbb      	ittet	lt
 8009638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800963c:	9303      	strlt	r3, [sp, #12]
 800963e:	2300      	movge	r3, #0
 8009640:	2201      	movlt	r2, #1
 8009642:	bfac      	ite	ge
 8009644:	f8c8 3000 	strge.w	r3, [r8]
 8009648:	f8c8 2000 	strlt.w	r2, [r8]
 800964c:	4b9e      	ldr	r3, [pc, #632]	; (80098c8 <_dtoa_r+0x2f0>)
 800964e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009652:	ea33 0308 	bics.w	r3, r3, r8
 8009656:	d11b      	bne.n	8009690 <_dtoa_r+0xb8>
 8009658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800965a:	f242 730f 	movw	r3, #9999	; 0x270f
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009664:	4333      	orrs	r3, r6
 8009666:	f000 8593 	beq.w	800a190 <_dtoa_r+0xbb8>
 800966a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800966c:	b963      	cbnz	r3, 8009688 <_dtoa_r+0xb0>
 800966e:	4b97      	ldr	r3, [pc, #604]	; (80098cc <_dtoa_r+0x2f4>)
 8009670:	e027      	b.n	80096c2 <_dtoa_r+0xea>
 8009672:	4b97      	ldr	r3, [pc, #604]	; (80098d0 <_dtoa_r+0x2f8>)
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	9800      	ldr	r0, [sp, #0]
 800967e:	b013      	add	sp, #76	; 0x4c
 8009680:	ecbd 8b04 	vpop	{d8-d9}
 8009684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009688:	4b90      	ldr	r3, [pc, #576]	; (80098cc <_dtoa_r+0x2f4>)
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	3303      	adds	r3, #3
 800968e:	e7f3      	b.n	8009678 <_dtoa_r+0xa0>
 8009690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009694:	2200      	movs	r2, #0
 8009696:	ec51 0b17 	vmov	r0, r1, d7
 800969a:	eeb0 8a47 	vmov.f32	s16, s14
 800969e:	eef0 8a67 	vmov.f32	s17, s15
 80096a2:	2300      	movs	r3, #0
 80096a4:	f7f7 fa28 	bl	8000af8 <__aeabi_dcmpeq>
 80096a8:	4681      	mov	r9, r0
 80096aa:	b160      	cbz	r0, 80096c6 <_dtoa_r+0xee>
 80096ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ae:	2301      	movs	r3, #1
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8568 	beq.w	800a18a <_dtoa_r+0xbb2>
 80096ba:	4b86      	ldr	r3, [pc, #536]	; (80098d4 <_dtoa_r+0x2fc>)
 80096bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	e7da      	b.n	800967c <_dtoa_r+0xa4>
 80096c6:	aa10      	add	r2, sp, #64	; 0x40
 80096c8:	a911      	add	r1, sp, #68	; 0x44
 80096ca:	4620      	mov	r0, r4
 80096cc:	eeb0 0a48 	vmov.f32	s0, s16
 80096d0:	eef0 0a68 	vmov.f32	s1, s17
 80096d4:	f001 fa4e 	bl	800ab74 <__d2b>
 80096d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096dc:	4682      	mov	sl, r0
 80096de:	2d00      	cmp	r5, #0
 80096e0:	d07f      	beq.n	80097e2 <_dtoa_r+0x20a>
 80096e2:	ee18 3a90 	vmov	r3, s17
 80096e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80096ee:	ec51 0b18 	vmov	r0, r1, d8
 80096f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80096fe:	4619      	mov	r1, r3
 8009700:	2200      	movs	r2, #0
 8009702:	4b75      	ldr	r3, [pc, #468]	; (80098d8 <_dtoa_r+0x300>)
 8009704:	f7f6 fdd8 	bl	80002b8 <__aeabi_dsub>
 8009708:	a367      	add	r3, pc, #412	; (adr r3, 80098a8 <_dtoa_r+0x2d0>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 ff8b 	bl	8000628 <__aeabi_dmul>
 8009712:	a367      	add	r3, pc, #412	; (adr r3, 80098b0 <_dtoa_r+0x2d8>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fdd0 	bl	80002bc <__adddf3>
 800971c:	4606      	mov	r6, r0
 800971e:	4628      	mov	r0, r5
 8009720:	460f      	mov	r7, r1
 8009722:	f7f6 ff17 	bl	8000554 <__aeabi_i2d>
 8009726:	a364      	add	r3, pc, #400	; (adr r3, 80098b8 <_dtoa_r+0x2e0>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f7f6 ff7c 	bl	8000628 <__aeabi_dmul>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f6 fdc0 	bl	80002bc <__adddf3>
 800973c:	4606      	mov	r6, r0
 800973e:	460f      	mov	r7, r1
 8009740:	f7f7 fa22 	bl	8000b88 <__aeabi_d2iz>
 8009744:	2200      	movs	r2, #0
 8009746:	4683      	mov	fp, r0
 8009748:	2300      	movs	r3, #0
 800974a:	4630      	mov	r0, r6
 800974c:	4639      	mov	r1, r7
 800974e:	f7f7 f9dd 	bl	8000b0c <__aeabi_dcmplt>
 8009752:	b148      	cbz	r0, 8009768 <_dtoa_r+0x190>
 8009754:	4658      	mov	r0, fp
 8009756:	f7f6 fefd 	bl	8000554 <__aeabi_i2d>
 800975a:	4632      	mov	r2, r6
 800975c:	463b      	mov	r3, r7
 800975e:	f7f7 f9cb 	bl	8000af8 <__aeabi_dcmpeq>
 8009762:	b908      	cbnz	r0, 8009768 <_dtoa_r+0x190>
 8009764:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009768:	f1bb 0f16 	cmp.w	fp, #22
 800976c:	d857      	bhi.n	800981e <_dtoa_r+0x246>
 800976e:	4b5b      	ldr	r3, [pc, #364]	; (80098dc <_dtoa_r+0x304>)
 8009770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	ec51 0b18 	vmov	r0, r1, d8
 800977c:	f7f7 f9c6 	bl	8000b0c <__aeabi_dcmplt>
 8009780:	2800      	cmp	r0, #0
 8009782:	d04e      	beq.n	8009822 <_dtoa_r+0x24a>
 8009784:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009788:	2300      	movs	r3, #0
 800978a:	930c      	str	r3, [sp, #48]	; 0x30
 800978c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800978e:	1b5b      	subs	r3, r3, r5
 8009790:	1e5a      	subs	r2, r3, #1
 8009792:	bf45      	ittet	mi
 8009794:	f1c3 0301 	rsbmi	r3, r3, #1
 8009798:	9305      	strmi	r3, [sp, #20]
 800979a:	2300      	movpl	r3, #0
 800979c:	2300      	movmi	r3, #0
 800979e:	9206      	str	r2, [sp, #24]
 80097a0:	bf54      	ite	pl
 80097a2:	9305      	strpl	r3, [sp, #20]
 80097a4:	9306      	strmi	r3, [sp, #24]
 80097a6:	f1bb 0f00 	cmp.w	fp, #0
 80097aa:	db3c      	blt.n	8009826 <_dtoa_r+0x24e>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80097b2:	445b      	add	r3, fp
 80097b4:	9306      	str	r3, [sp, #24]
 80097b6:	2300      	movs	r3, #0
 80097b8:	9308      	str	r3, [sp, #32]
 80097ba:	9b07      	ldr	r3, [sp, #28]
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d868      	bhi.n	8009892 <_dtoa_r+0x2ba>
 80097c0:	2b05      	cmp	r3, #5
 80097c2:	bfc4      	itt	gt
 80097c4:	3b04      	subgt	r3, #4
 80097c6:	9307      	strgt	r3, [sp, #28]
 80097c8:	9b07      	ldr	r3, [sp, #28]
 80097ca:	f1a3 0302 	sub.w	r3, r3, #2
 80097ce:	bfcc      	ite	gt
 80097d0:	2500      	movgt	r5, #0
 80097d2:	2501      	movle	r5, #1
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	f200 8085 	bhi.w	80098e4 <_dtoa_r+0x30c>
 80097da:	e8df f003 	tbb	[pc, r3]
 80097de:	3b2e      	.short	0x3b2e
 80097e0:	5839      	.short	0x5839
 80097e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097e6:	441d      	add	r5, r3
 80097e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	bfc1      	itttt	gt
 80097f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80097f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80097fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009800:	bfd6      	itet	le
 8009802:	f1c3 0320 	rsble	r3, r3, #32
 8009806:	ea48 0003 	orrgt.w	r0, r8, r3
 800980a:	fa06 f003 	lslle.w	r0, r6, r3
 800980e:	f7f6 fe91 	bl	8000534 <__aeabi_ui2d>
 8009812:	2201      	movs	r2, #1
 8009814:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009818:	3d01      	subs	r5, #1
 800981a:	920e      	str	r2, [sp, #56]	; 0x38
 800981c:	e76f      	b.n	80096fe <_dtoa_r+0x126>
 800981e:	2301      	movs	r3, #1
 8009820:	e7b3      	b.n	800978a <_dtoa_r+0x1b2>
 8009822:	900c      	str	r0, [sp, #48]	; 0x30
 8009824:	e7b2      	b.n	800978c <_dtoa_r+0x1b4>
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	eba3 030b 	sub.w	r3, r3, fp
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	f1cb 0300 	rsb	r3, fp, #0
 8009832:	9308      	str	r3, [sp, #32]
 8009834:	2300      	movs	r3, #0
 8009836:	930b      	str	r3, [sp, #44]	; 0x2c
 8009838:	e7bf      	b.n	80097ba <_dtoa_r+0x1e2>
 800983a:	2300      	movs	r3, #0
 800983c:	9309      	str	r3, [sp, #36]	; 0x24
 800983e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc52      	bgt.n	80098ea <_dtoa_r+0x312>
 8009844:	2301      	movs	r3, #1
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	461a      	mov	r2, r3
 800984c:	920a      	str	r2, [sp, #40]	; 0x28
 800984e:	e00b      	b.n	8009868 <_dtoa_r+0x290>
 8009850:	2301      	movs	r3, #1
 8009852:	e7f3      	b.n	800983c <_dtoa_r+0x264>
 8009854:	2300      	movs	r3, #0
 8009856:	9309      	str	r3, [sp, #36]	; 0x24
 8009858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985a:	445b      	add	r3, fp
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	3301      	adds	r3, #1
 8009860:	2b01      	cmp	r3, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	bfb8      	it	lt
 8009866:	2301      	movlt	r3, #1
 8009868:	69e0      	ldr	r0, [r4, #28]
 800986a:	2100      	movs	r1, #0
 800986c:	2204      	movs	r2, #4
 800986e:	f102 0614 	add.w	r6, r2, #20
 8009872:	429e      	cmp	r6, r3
 8009874:	d93d      	bls.n	80098f2 <_dtoa_r+0x31a>
 8009876:	6041      	str	r1, [r0, #4]
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fd9f 	bl	800a3bc <_Balloc>
 800987e:	9000      	str	r0, [sp, #0]
 8009880:	2800      	cmp	r0, #0
 8009882:	d139      	bne.n	80098f8 <_dtoa_r+0x320>
 8009884:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <_dtoa_r+0x308>)
 8009886:	4602      	mov	r2, r0
 8009888:	f240 11af 	movw	r1, #431	; 0x1af
 800988c:	e6bd      	b.n	800960a <_dtoa_r+0x32>
 800988e:	2301      	movs	r3, #1
 8009890:	e7e1      	b.n	8009856 <_dtoa_r+0x27e>
 8009892:	2501      	movs	r5, #1
 8009894:	2300      	movs	r3, #0
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	9509      	str	r5, [sp, #36]	; 0x24
 800989a:	f04f 33ff 	mov.w	r3, #4294967295
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	2200      	movs	r2, #0
 80098a4:	2312      	movs	r3, #18
 80098a6:	e7d1      	b.n	800984c <_dtoa_r+0x274>
 80098a8:	636f4361 	.word	0x636f4361
 80098ac:	3fd287a7 	.word	0x3fd287a7
 80098b0:	8b60c8b3 	.word	0x8b60c8b3
 80098b4:	3fc68a28 	.word	0x3fc68a28
 80098b8:	509f79fb 	.word	0x509f79fb
 80098bc:	3fd34413 	.word	0x3fd34413
 80098c0:	0800e1d6 	.word	0x0800e1d6
 80098c4:	0800e1ed 	.word	0x0800e1ed
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	0800e1d2 	.word	0x0800e1d2
 80098d0:	0800e1c9 	.word	0x0800e1c9
 80098d4:	0800e1a1 	.word	0x0800e1a1
 80098d8:	3ff80000 	.word	0x3ff80000
 80098dc:	0800e2d8 	.word	0x0800e2d8
 80098e0:	0800e245 	.word	0x0800e245
 80098e4:	2301      	movs	r3, #1
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	e7d7      	b.n	800989a <_dtoa_r+0x2c2>
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	9304      	str	r3, [sp, #16]
 80098f0:	e7ba      	b.n	8009868 <_dtoa_r+0x290>
 80098f2:	3101      	adds	r1, #1
 80098f4:	0052      	lsls	r2, r2, #1
 80098f6:	e7ba      	b.n	800986e <_dtoa_r+0x296>
 80098f8:	69e3      	ldr	r3, [r4, #28]
 80098fa:	9a00      	ldr	r2, [sp, #0]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	2b0e      	cmp	r3, #14
 8009902:	f200 80a8 	bhi.w	8009a56 <_dtoa_r+0x47e>
 8009906:	2d00      	cmp	r5, #0
 8009908:	f000 80a5 	beq.w	8009a56 <_dtoa_r+0x47e>
 800990c:	f1bb 0f00 	cmp.w	fp, #0
 8009910:	dd38      	ble.n	8009984 <_dtoa_r+0x3ac>
 8009912:	4bc0      	ldr	r3, [pc, #768]	; (8009c14 <_dtoa_r+0x63c>)
 8009914:	f00b 020f 	and.w	r2, fp, #15
 8009918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800991c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009920:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009924:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009928:	d019      	beq.n	800995e <_dtoa_r+0x386>
 800992a:	4bbb      	ldr	r3, [pc, #748]	; (8009c18 <_dtoa_r+0x640>)
 800992c:	ec51 0b18 	vmov	r0, r1, d8
 8009930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009934:	f7f6 ffa2 	bl	800087c <__aeabi_ddiv>
 8009938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800993c:	f008 080f 	and.w	r8, r8, #15
 8009940:	2503      	movs	r5, #3
 8009942:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c18 <_dtoa_r+0x640>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d10a      	bne.n	8009962 <_dtoa_r+0x38a>
 800994c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009950:	4632      	mov	r2, r6
 8009952:	463b      	mov	r3, r7
 8009954:	f7f6 ff92 	bl	800087c <__aeabi_ddiv>
 8009958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995c:	e02b      	b.n	80099b6 <_dtoa_r+0x3de>
 800995e:	2502      	movs	r5, #2
 8009960:	e7ef      	b.n	8009942 <_dtoa_r+0x36a>
 8009962:	f018 0f01 	tst.w	r8, #1
 8009966:	d008      	beq.n	800997a <_dtoa_r+0x3a2>
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009970:	f7f6 fe5a 	bl	8000628 <__aeabi_dmul>
 8009974:	3501      	adds	r5, #1
 8009976:	4606      	mov	r6, r0
 8009978:	460f      	mov	r7, r1
 800997a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800997e:	f109 0908 	add.w	r9, r9, #8
 8009982:	e7e0      	b.n	8009946 <_dtoa_r+0x36e>
 8009984:	f000 809f 	beq.w	8009ac6 <_dtoa_r+0x4ee>
 8009988:	f1cb 0600 	rsb	r6, fp, #0
 800998c:	4ba1      	ldr	r3, [pc, #644]	; (8009c14 <_dtoa_r+0x63c>)
 800998e:	4fa2      	ldr	r7, [pc, #648]	; (8009c18 <_dtoa_r+0x640>)
 8009990:	f006 020f 	and.w	r2, r6, #15
 8009994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	ec51 0b18 	vmov	r0, r1, d8
 80099a0:	f7f6 fe42 	bl	8000628 <__aeabi_dmul>
 80099a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a8:	1136      	asrs	r6, r6, #4
 80099aa:	2300      	movs	r3, #0
 80099ac:	2502      	movs	r5, #2
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d17e      	bne.n	8009ab0 <_dtoa_r+0x4d8>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d0      	bne.n	8009958 <_dtoa_r+0x380>
 80099b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 8084 	beq.w	8009aca <_dtoa_r+0x4f2>
 80099c2:	4b96      	ldr	r3, [pc, #600]	; (8009c1c <_dtoa_r+0x644>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f7 f89f 	bl	8000b0c <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d07b      	beq.n	8009aca <_dtoa_r+0x4f2>
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d078      	beq.n	8009aca <_dtoa_r+0x4f2>
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd39      	ble.n	8009a52 <_dtoa_r+0x47a>
 80099de:	4b90      	ldr	r3, [pc, #576]	; (8009c20 <_dtoa_r+0x648>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fe1f 	bl	8000628 <__aeabi_dmul>
 80099ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ee:	9e01      	ldr	r6, [sp, #4]
 80099f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80099f4:	3501      	adds	r5, #1
 80099f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099fa:	4628      	mov	r0, r5
 80099fc:	f7f6 fdaa 	bl	8000554 <__aeabi_i2d>
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	f7f6 fe10 	bl	8000628 <__aeabi_dmul>
 8009a08:	4b86      	ldr	r3, [pc, #536]	; (8009c24 <_dtoa_r+0x64c>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f7f6 fc56 	bl	80002bc <__adddf3>
 8009a10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a18:	9303      	str	r3, [sp, #12]
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	d158      	bne.n	8009ad0 <_dtoa_r+0x4f8>
 8009a1e:	4b82      	ldr	r3, [pc, #520]	; (8009c28 <_dtoa_r+0x650>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	4640      	mov	r0, r8
 8009a24:	4649      	mov	r1, r9
 8009a26:	f7f6 fc47 	bl	80002b8 <__aeabi_dsub>
 8009a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4689      	mov	r9, r1
 8009a32:	f7f7 f889 	bl	8000b48 <__aeabi_dcmpgt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f040 8296 	bne.w	8009f68 <_dtoa_r+0x990>
 8009a3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a40:	4640      	mov	r0, r8
 8009a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a46:	4649      	mov	r1, r9
 8009a48:	f7f7 f860 	bl	8000b0c <__aeabi_dcmplt>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	f040 8289 	bne.w	8009f64 <_dtoa_r+0x98c>
 8009a52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f2c0 814e 	blt.w	8009cfa <_dtoa_r+0x722>
 8009a5e:	f1bb 0f0e 	cmp.w	fp, #14
 8009a62:	f300 814a 	bgt.w	8009cfa <_dtoa_r+0x722>
 8009a66:	4b6b      	ldr	r3, [pc, #428]	; (8009c14 <_dtoa_r+0x63c>)
 8009a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f280 80dc 	bge.w	8009c30 <_dtoa_r+0x658>
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f300 80d8 	bgt.w	8009c30 <_dtoa_r+0x658>
 8009a80:	f040 826f 	bne.w	8009f62 <_dtoa_r+0x98a>
 8009a84:	4b68      	ldr	r3, [pc, #416]	; (8009c28 <_dtoa_r+0x650>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f6 fdcc 	bl	8000628 <__aeabi_dmul>
 8009a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a94:	f7f7 f84e 	bl	8000b34 <__aeabi_dcmpge>
 8009a98:	9e04      	ldr	r6, [sp, #16]
 8009a9a:	4637      	mov	r7, r6
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 8245 	bne.w	8009f2c <_dtoa_r+0x954>
 8009aa2:	9d00      	ldr	r5, [sp, #0]
 8009aa4:	2331      	movs	r3, #49	; 0x31
 8009aa6:	f805 3b01 	strb.w	r3, [r5], #1
 8009aaa:	f10b 0b01 	add.w	fp, fp, #1
 8009aae:	e241      	b.n	8009f34 <_dtoa_r+0x95c>
 8009ab0:	07f2      	lsls	r2, r6, #31
 8009ab2:	d505      	bpl.n	8009ac0 <_dtoa_r+0x4e8>
 8009ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ab8:	f7f6 fdb6 	bl	8000628 <__aeabi_dmul>
 8009abc:	3501      	adds	r5, #1
 8009abe:	2301      	movs	r3, #1
 8009ac0:	1076      	asrs	r6, r6, #1
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	e773      	b.n	80099ae <_dtoa_r+0x3d6>
 8009ac6:	2502      	movs	r5, #2
 8009ac8:	e775      	b.n	80099b6 <_dtoa_r+0x3de>
 8009aca:	9e04      	ldr	r6, [sp, #16]
 8009acc:	465f      	mov	r7, fp
 8009ace:	e792      	b.n	80099f6 <_dtoa_r+0x41e>
 8009ad0:	9900      	ldr	r1, [sp, #0]
 8009ad2:	4b50      	ldr	r3, [pc, #320]	; (8009c14 <_dtoa_r+0x63c>)
 8009ad4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ad8:	4431      	add	r1, r6
 8009ada:	9102      	str	r1, [sp, #8]
 8009adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ade:	eeb0 9a47 	vmov.f32	s18, s14
 8009ae2:	eef0 9a67 	vmov.f32	s19, s15
 8009ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d044      	beq.n	8009b7c <_dtoa_r+0x5a4>
 8009af2:	494e      	ldr	r1, [pc, #312]	; (8009c2c <_dtoa_r+0x654>)
 8009af4:	2000      	movs	r0, #0
 8009af6:	f7f6 fec1 	bl	800087c <__aeabi_ddiv>
 8009afa:	ec53 2b19 	vmov	r2, r3, d9
 8009afe:	f7f6 fbdb 	bl	80002b8 <__aeabi_dsub>
 8009b02:	9d00      	ldr	r5, [sp, #0]
 8009b04:	ec41 0b19 	vmov	d9, r0, r1
 8009b08:	4649      	mov	r1, r9
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	f7f7 f83c 	bl	8000b88 <__aeabi_d2iz>
 8009b10:	4606      	mov	r6, r0
 8009b12:	f7f6 fd1f 	bl	8000554 <__aeabi_i2d>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f6 fbcb 	bl	80002b8 <__aeabi_dsub>
 8009b22:	3630      	adds	r6, #48	; 0x30
 8009b24:	f805 6b01 	strb.w	r6, [r5], #1
 8009b28:	ec53 2b19 	vmov	r2, r3, d9
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4689      	mov	r9, r1
 8009b30:	f7f6 ffec 	bl	8000b0c <__aeabi_dcmplt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d164      	bne.n	8009c02 <_dtoa_r+0x62a>
 8009b38:	4642      	mov	r2, r8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	4937      	ldr	r1, [pc, #220]	; (8009c1c <_dtoa_r+0x644>)
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f7f6 fbba 	bl	80002b8 <__aeabi_dsub>
 8009b44:	ec53 2b19 	vmov	r2, r3, d9
 8009b48:	f7f6 ffe0 	bl	8000b0c <__aeabi_dcmplt>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f040 80b6 	bne.w	8009cbe <_dtoa_r+0x6e6>
 8009b52:	9b02      	ldr	r3, [sp, #8]
 8009b54:	429d      	cmp	r5, r3
 8009b56:	f43f af7c 	beq.w	8009a52 <_dtoa_r+0x47a>
 8009b5a:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <_dtoa_r+0x648>)
 8009b5c:	ec51 0b19 	vmov	r0, r1, d9
 8009b60:	2200      	movs	r2, #0
 8009b62:	f7f6 fd61 	bl	8000628 <__aeabi_dmul>
 8009b66:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <_dtoa_r+0x648>)
 8009b68:	ec41 0b19 	vmov	d9, r0, r1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f6 fd59 	bl	8000628 <__aeabi_dmul>
 8009b76:	4680      	mov	r8, r0
 8009b78:	4689      	mov	r9, r1
 8009b7a:	e7c5      	b.n	8009b08 <_dtoa_r+0x530>
 8009b7c:	ec51 0b17 	vmov	r0, r1, d7
 8009b80:	f7f6 fd52 	bl	8000628 <__aeabi_dmul>
 8009b84:	9b02      	ldr	r3, [sp, #8]
 8009b86:	9d00      	ldr	r5, [sp, #0]
 8009b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b8a:	ec41 0b19 	vmov	d9, r0, r1
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4640      	mov	r0, r8
 8009b92:	f7f6 fff9 	bl	8000b88 <__aeabi_d2iz>
 8009b96:	4606      	mov	r6, r0
 8009b98:	f7f6 fcdc 	bl	8000554 <__aeabi_i2d>
 8009b9c:	3630      	adds	r6, #48	; 0x30
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fb87 	bl	80002b8 <__aeabi_dsub>
 8009baa:	f805 6b01 	strb.w	r6, [r5], #1
 8009bae:	9b02      	ldr	r3, [sp, #8]
 8009bb0:	429d      	cmp	r5, r3
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	d124      	bne.n	8009c06 <_dtoa_r+0x62e>
 8009bbc:	4b1b      	ldr	r3, [pc, #108]	; (8009c2c <_dtoa_r+0x654>)
 8009bbe:	ec51 0b19 	vmov	r0, r1, d9
 8009bc2:	f7f6 fb7b 	bl	80002bc <__adddf3>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 ffbb 	bl	8000b48 <__aeabi_dcmpgt>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d173      	bne.n	8009cbe <_dtoa_r+0x6e6>
 8009bd6:	ec53 2b19 	vmov	r2, r3, d9
 8009bda:	4914      	ldr	r1, [pc, #80]	; (8009c2c <_dtoa_r+0x654>)
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f7f6 fb6b 	bl	80002b8 <__aeabi_dsub>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 ff8f 	bl	8000b0c <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f af2f 	beq.w	8009a52 <_dtoa_r+0x47a>
 8009bf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bf6:	1e6b      	subs	r3, r5, #1
 8009bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bfe:	2b30      	cmp	r3, #48	; 0x30
 8009c00:	d0f8      	beq.n	8009bf4 <_dtoa_r+0x61c>
 8009c02:	46bb      	mov	fp, r7
 8009c04:	e04a      	b.n	8009c9c <_dtoa_r+0x6c4>
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <_dtoa_r+0x648>)
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4689      	mov	r9, r1
 8009c10:	e7bd      	b.n	8009b8e <_dtoa_r+0x5b6>
 8009c12:	bf00      	nop
 8009c14:	0800e2d8 	.word	0x0800e2d8
 8009c18:	0800e2b0 	.word	0x0800e2b0
 8009c1c:	3ff00000 	.word	0x3ff00000
 8009c20:	40240000 	.word	0x40240000
 8009c24:	401c0000 	.word	0x401c0000
 8009c28:	40140000 	.word	0x40140000
 8009c2c:	3fe00000 	.word	0x3fe00000
 8009c30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c34:	9d00      	ldr	r5, [sp, #0]
 8009c36:	4642      	mov	r2, r8
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	f7f6 fe1d 	bl	800087c <__aeabi_ddiv>
 8009c42:	f7f6 ffa1 	bl	8000b88 <__aeabi_d2iz>
 8009c46:	9001      	str	r0, [sp, #4]
 8009c48:	f7f6 fc84 	bl	8000554 <__aeabi_i2d>
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	f7f6 fcea 	bl	8000628 <__aeabi_dmul>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 fb2c 	bl	80002b8 <__aeabi_dsub>
 8009c60:	9e01      	ldr	r6, [sp, #4]
 8009c62:	9f04      	ldr	r7, [sp, #16]
 8009c64:	3630      	adds	r6, #48	; 0x30
 8009c66:	f805 6b01 	strb.w	r6, [r5], #1
 8009c6a:	9e00      	ldr	r6, [sp, #0]
 8009c6c:	1bae      	subs	r6, r5, r6
 8009c6e:	42b7      	cmp	r7, r6
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	d134      	bne.n	8009ce0 <_dtoa_r+0x708>
 8009c76:	f7f6 fb21 	bl	80002bc <__adddf3>
 8009c7a:	4642      	mov	r2, r8
 8009c7c:	464b      	mov	r3, r9
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	f7f6 ff61 	bl	8000b48 <__aeabi_dcmpgt>
 8009c86:	b9c8      	cbnz	r0, 8009cbc <_dtoa_r+0x6e4>
 8009c88:	4642      	mov	r2, r8
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 ff32 	bl	8000af8 <__aeabi_dcmpeq>
 8009c94:	b110      	cbz	r0, 8009c9c <_dtoa_r+0x6c4>
 8009c96:	9b01      	ldr	r3, [sp, #4]
 8009c98:	07db      	lsls	r3, r3, #31
 8009c9a:	d40f      	bmi.n	8009cbc <_dtoa_r+0x6e4>
 8009c9c:	4651      	mov	r1, sl
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fbcc 	bl	800a43c <_Bfree>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca8:	702b      	strb	r3, [r5, #0]
 8009caa:	f10b 0301 	add.w	r3, fp, #1
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f43f ace2 	beq.w	800967c <_dtoa_r+0xa4>
 8009cb8:	601d      	str	r5, [r3, #0]
 8009cba:	e4df      	b.n	800967c <_dtoa_r+0xa4>
 8009cbc:	465f      	mov	r7, fp
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cc6:	2a39      	cmp	r2, #57	; 0x39
 8009cc8:	d106      	bne.n	8009cd8 <_dtoa_r+0x700>
 8009cca:	9a00      	ldr	r2, [sp, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d1f7      	bne.n	8009cc0 <_dtoa_r+0x6e8>
 8009cd0:	9900      	ldr	r1, [sp, #0]
 8009cd2:	2230      	movs	r2, #48	; 0x30
 8009cd4:	3701      	adds	r7, #1
 8009cd6:	700a      	strb	r2, [r1, #0]
 8009cd8:	781a      	ldrb	r2, [r3, #0]
 8009cda:	3201      	adds	r2, #1
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	e790      	b.n	8009c02 <_dtoa_r+0x62a>
 8009ce0:	4ba3      	ldr	r3, [pc, #652]	; (8009f70 <_dtoa_r+0x998>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f7f6 fca0 	bl	8000628 <__aeabi_dmul>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2300      	movs	r3, #0
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	f7f6 ff02 	bl	8000af8 <__aeabi_dcmpeq>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d09e      	beq.n	8009c36 <_dtoa_r+0x65e>
 8009cf8:	e7d0      	b.n	8009c9c <_dtoa_r+0x6c4>
 8009cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	f000 80ca 	beq.w	8009e96 <_dtoa_r+0x8be>
 8009d02:	9a07      	ldr	r2, [sp, #28]
 8009d04:	2a01      	cmp	r2, #1
 8009d06:	f300 80ad 	bgt.w	8009e64 <_dtoa_r+0x88c>
 8009d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	f000 80a5 	beq.w	8009e5c <_dtoa_r+0x884>
 8009d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d16:	9e08      	ldr	r6, [sp, #32]
 8009d18:	9d05      	ldr	r5, [sp, #20]
 8009d1a:	9a05      	ldr	r2, [sp, #20]
 8009d1c:	441a      	add	r2, r3
 8009d1e:	9205      	str	r2, [sp, #20]
 8009d20:	9a06      	ldr	r2, [sp, #24]
 8009d22:	2101      	movs	r1, #1
 8009d24:	441a      	add	r2, r3
 8009d26:	4620      	mov	r0, r4
 8009d28:	9206      	str	r2, [sp, #24]
 8009d2a:	f000 fc87 	bl	800a63c <__i2b>
 8009d2e:	4607      	mov	r7, r0
 8009d30:	b165      	cbz	r5, 8009d4c <_dtoa_r+0x774>
 8009d32:	9b06      	ldr	r3, [sp, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd09      	ble.n	8009d4c <_dtoa_r+0x774>
 8009d38:	42ab      	cmp	r3, r5
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	bfa8      	it	ge
 8009d3e:	462b      	movge	r3, r5
 8009d40:	1ad2      	subs	r2, r2, r3
 8009d42:	9205      	str	r2, [sp, #20]
 8009d44:	9a06      	ldr	r2, [sp, #24]
 8009d46:	1aed      	subs	r5, r5, r3
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	9306      	str	r3, [sp, #24]
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	b1f3      	cbz	r3, 8009d8e <_dtoa_r+0x7b6>
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80a3 	beq.w	8009e9e <_dtoa_r+0x8c6>
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	dd10      	ble.n	8009d7e <_dtoa_r+0x7a6>
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4632      	mov	r2, r6
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fd2b 	bl	800a7bc <__pow5mult>
 8009d66:	4652      	mov	r2, sl
 8009d68:	4601      	mov	r1, r0
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 fc7b 	bl	800a668 <__multiply>
 8009d72:	4651      	mov	r1, sl
 8009d74:	4680      	mov	r8, r0
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fb60 	bl	800a43c <_Bfree>
 8009d7c:	46c2      	mov	sl, r8
 8009d7e:	9b08      	ldr	r3, [sp, #32]
 8009d80:	1b9a      	subs	r2, r3, r6
 8009d82:	d004      	beq.n	8009d8e <_dtoa_r+0x7b6>
 8009d84:	4651      	mov	r1, sl
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fd18 	bl	800a7bc <__pow5mult>
 8009d8c:	4682      	mov	sl, r0
 8009d8e:	2101      	movs	r1, #1
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fc53 	bl	800a63c <__i2b>
 8009d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	f340 8081 	ble.w	8009ea2 <_dtoa_r+0x8ca>
 8009da0:	461a      	mov	r2, r3
 8009da2:	4601      	mov	r1, r0
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 fd09 	bl	800a7bc <__pow5mult>
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	4606      	mov	r6, r0
 8009db0:	dd7a      	ble.n	8009ea8 <_dtoa_r+0x8d0>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	6933      	ldr	r3, [r6, #16]
 8009db8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009dbc:	6918      	ldr	r0, [r3, #16]
 8009dbe:	f000 fbef 	bl	800a5a0 <__hi0bits>
 8009dc2:	f1c0 0020 	rsb	r0, r0, #32
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	4418      	add	r0, r3
 8009dca:	f010 001f 	ands.w	r0, r0, #31
 8009dce:	f000 8094 	beq.w	8009efa <_dtoa_r+0x922>
 8009dd2:	f1c0 0320 	rsb	r3, r0, #32
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	f340 8085 	ble.w	8009ee6 <_dtoa_r+0x90e>
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	f1c0 001c 	rsb	r0, r0, #28
 8009de2:	4403      	add	r3, r0
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	9b06      	ldr	r3, [sp, #24]
 8009de8:	4403      	add	r3, r0
 8009dea:	4405      	add	r5, r0
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	9b05      	ldr	r3, [sp, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dd05      	ble.n	8009e00 <_dtoa_r+0x828>
 8009df4:	4651      	mov	r1, sl
 8009df6:	461a      	mov	r2, r3
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fd39 	bl	800a870 <__lshift>
 8009dfe:	4682      	mov	sl, r0
 8009e00:	9b06      	ldr	r3, [sp, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dd05      	ble.n	8009e12 <_dtoa_r+0x83a>
 8009e06:	4631      	mov	r1, r6
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fd30 	bl	800a870 <__lshift>
 8009e10:	4606      	mov	r6, r0
 8009e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d072      	beq.n	8009efe <_dtoa_r+0x926>
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	f000 fd94 	bl	800a948 <__mcmp>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	da6c      	bge.n	8009efe <_dtoa_r+0x926>
 8009e24:	2300      	movs	r3, #0
 8009e26:	4651      	mov	r1, sl
 8009e28:	220a      	movs	r2, #10
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 fb28 	bl	800a480 <__multadd>
 8009e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e36:	4682      	mov	sl, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 81b0 	beq.w	800a19e <_dtoa_r+0xbc6>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4639      	mov	r1, r7
 8009e42:	220a      	movs	r2, #10
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 fb1b 	bl	800a480 <__multadd>
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	4607      	mov	r7, r0
 8009e50:	f300 8096 	bgt.w	8009f80 <_dtoa_r+0x9a8>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dc59      	bgt.n	8009f0e <_dtoa_r+0x936>
 8009e5a:	e091      	b.n	8009f80 <_dtoa_r+0x9a8>
 8009e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e62:	e758      	b.n	8009d16 <_dtoa_r+0x73e>
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	1e5e      	subs	r6, r3, #1
 8009e68:	9b08      	ldr	r3, [sp, #32]
 8009e6a:	42b3      	cmp	r3, r6
 8009e6c:	bfbf      	itttt	lt
 8009e6e:	9b08      	ldrlt	r3, [sp, #32]
 8009e70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e72:	9608      	strlt	r6, [sp, #32]
 8009e74:	1af3      	sublt	r3, r6, r3
 8009e76:	bfb4      	ite	lt
 8009e78:	18d2      	addlt	r2, r2, r3
 8009e7a:	1b9e      	subge	r6, r3, r6
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	bfbc      	itt	lt
 8009e80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e82:	2600      	movlt	r6, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfb7      	itett	lt
 8009e88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e90:	1a9d      	sublt	r5, r3, r2
 8009e92:	2300      	movlt	r3, #0
 8009e94:	e741      	b.n	8009d1a <_dtoa_r+0x742>
 8009e96:	9e08      	ldr	r6, [sp, #32]
 8009e98:	9d05      	ldr	r5, [sp, #20]
 8009e9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e9c:	e748      	b.n	8009d30 <_dtoa_r+0x758>
 8009e9e:	9a08      	ldr	r2, [sp, #32]
 8009ea0:	e770      	b.n	8009d84 <_dtoa_r+0x7ac>
 8009ea2:	9b07      	ldr	r3, [sp, #28]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	dc19      	bgt.n	8009edc <_dtoa_r+0x904>
 8009ea8:	9b02      	ldr	r3, [sp, #8]
 8009eaa:	b9bb      	cbnz	r3, 8009edc <_dtoa_r+0x904>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eb2:	b99b      	cbnz	r3, 8009edc <_dtoa_r+0x904>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eba:	0d1b      	lsrs	r3, r3, #20
 8009ebc:	051b      	lsls	r3, r3, #20
 8009ebe:	b183      	cbz	r3, 8009ee2 <_dtoa_r+0x90a>
 8009ec0:	9b05      	ldr	r3, [sp, #20]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9305      	str	r3, [sp, #20]
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	9306      	str	r3, [sp, #24]
 8009ecc:	f04f 0801 	mov.w	r8, #1
 8009ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f47f af6f 	bne.w	8009db6 <_dtoa_r+0x7de>
 8009ed8:	2001      	movs	r0, #1
 8009eda:	e774      	b.n	8009dc6 <_dtoa_r+0x7ee>
 8009edc:	f04f 0800 	mov.w	r8, #0
 8009ee0:	e7f6      	b.n	8009ed0 <_dtoa_r+0x8f8>
 8009ee2:	4698      	mov	r8, r3
 8009ee4:	e7f4      	b.n	8009ed0 <_dtoa_r+0x8f8>
 8009ee6:	d082      	beq.n	8009dee <_dtoa_r+0x816>
 8009ee8:	9a05      	ldr	r2, [sp, #20]
 8009eea:	331c      	adds	r3, #28
 8009eec:	441a      	add	r2, r3
 8009eee:	9205      	str	r2, [sp, #20]
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	441a      	add	r2, r3
 8009ef4:	441d      	add	r5, r3
 8009ef6:	9206      	str	r2, [sp, #24]
 8009ef8:	e779      	b.n	8009dee <_dtoa_r+0x816>
 8009efa:	4603      	mov	r3, r0
 8009efc:	e7f4      	b.n	8009ee8 <_dtoa_r+0x910>
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc37      	bgt.n	8009f74 <_dtoa_r+0x99c>
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	dd34      	ble.n	8009f74 <_dtoa_r+0x99c>
 8009f0a:	9b04      	ldr	r3, [sp, #16]
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	b963      	cbnz	r3, 8009f2c <_dtoa_r+0x954>
 8009f12:	4631      	mov	r1, r6
 8009f14:	2205      	movs	r2, #5
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 fab2 	bl	800a480 <__multadd>
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	4606      	mov	r6, r0
 8009f20:	4650      	mov	r0, sl
 8009f22:	f000 fd11 	bl	800a948 <__mcmp>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f73f adbb 	bgt.w	8009aa2 <_dtoa_r+0x4ca>
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2e:	9d00      	ldr	r5, [sp, #0]
 8009f30:	ea6f 0b03 	mvn.w	fp, r3
 8009f34:	f04f 0800 	mov.w	r8, #0
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fa7e 	bl	800a43c <_Bfree>
 8009f40:	2f00      	cmp	r7, #0
 8009f42:	f43f aeab 	beq.w	8009c9c <_dtoa_r+0x6c4>
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	d005      	beq.n	8009f58 <_dtoa_r+0x980>
 8009f4c:	45b8      	cmp	r8, r7
 8009f4e:	d003      	beq.n	8009f58 <_dtoa_r+0x980>
 8009f50:	4641      	mov	r1, r8
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fa72 	bl	800a43c <_Bfree>
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fa6e 	bl	800a43c <_Bfree>
 8009f60:	e69c      	b.n	8009c9c <_dtoa_r+0x6c4>
 8009f62:	2600      	movs	r6, #0
 8009f64:	4637      	mov	r7, r6
 8009f66:	e7e1      	b.n	8009f2c <_dtoa_r+0x954>
 8009f68:	46bb      	mov	fp, r7
 8009f6a:	4637      	mov	r7, r6
 8009f6c:	e599      	b.n	8009aa2 <_dtoa_r+0x4ca>
 8009f6e:	bf00      	nop
 8009f70:	40240000 	.word	0x40240000
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 80c8 	beq.w	800a10c <_dtoa_r+0xb34>
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	dd05      	ble.n	8009f90 <_dtoa_r+0x9b8>
 8009f84:	4639      	mov	r1, r7
 8009f86:	462a      	mov	r2, r5
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 fc71 	bl	800a870 <__lshift>
 8009f8e:	4607      	mov	r7, r0
 8009f90:	f1b8 0f00 	cmp.w	r8, #0
 8009f94:	d05b      	beq.n	800a04e <_dtoa_r+0xa76>
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fa0f 	bl	800a3bc <_Balloc>
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <_dtoa_r+0x9d6>
 8009fa2:	4b83      	ldr	r3, [pc, #524]	; (800a1b0 <_dtoa_r+0xbd8>)
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009faa:	f7ff bb2e 	b.w	800960a <_dtoa_r+0x32>
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	3202      	adds	r2, #2
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	f107 010c 	add.w	r1, r7, #12
 8009fb8:	300c      	adds	r0, #12
 8009fba:	f7ff fa70 	bl	800949e <memcpy>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fc54 	bl	800a870 <__lshift>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	9308      	str	r3, [sp, #32]
 8009fd6:	9b02      	ldr	r3, [sp, #8]
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	46b8      	mov	r8, r7
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	4650      	mov	r0, sl
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	f7ff fa6c 	bl	80094c8 <quorem>
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	9002      	str	r0, [sp, #8]
 8009ff4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	f000 fca5 	bl	800a948 <__mcmp>
 8009ffe:	463a      	mov	r2, r7
 800a000:	9005      	str	r0, [sp, #20]
 800a002:	4631      	mov	r1, r6
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fcbb 	bl	800a980 <__mdiff>
 800a00a:	68c2      	ldr	r2, [r0, #12]
 800a00c:	4605      	mov	r5, r0
 800a00e:	bb02      	cbnz	r2, 800a052 <_dtoa_r+0xa7a>
 800a010:	4601      	mov	r1, r0
 800a012:	4650      	mov	r0, sl
 800a014:	f000 fc98 	bl	800a948 <__mcmp>
 800a018:	4602      	mov	r2, r0
 800a01a:	4629      	mov	r1, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	9209      	str	r2, [sp, #36]	; 0x24
 800a020:	f000 fa0c 	bl	800a43c <_Bfree>
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a028:	9d04      	ldr	r5, [sp, #16]
 800a02a:	ea43 0102 	orr.w	r1, r3, r2
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	4319      	orrs	r1, r3
 800a032:	d110      	bne.n	800a056 <_dtoa_r+0xa7e>
 800a034:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a038:	d029      	beq.n	800a08e <_dtoa_r+0xab6>
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd02      	ble.n	800a046 <_dtoa_r+0xa6e>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	f883 9000 	strb.w	r9, [r3]
 800a04c:	e774      	b.n	8009f38 <_dtoa_r+0x960>
 800a04e:	4638      	mov	r0, r7
 800a050:	e7ba      	b.n	8009fc8 <_dtoa_r+0x9f0>
 800a052:	2201      	movs	r2, #1
 800a054:	e7e1      	b.n	800a01a <_dtoa_r+0xa42>
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db04      	blt.n	800a066 <_dtoa_r+0xa8e>
 800a05c:	9907      	ldr	r1, [sp, #28]
 800a05e:	430b      	orrs	r3, r1
 800a060:	9906      	ldr	r1, [sp, #24]
 800a062:	430b      	orrs	r3, r1
 800a064:	d120      	bne.n	800a0a8 <_dtoa_r+0xad0>
 800a066:	2a00      	cmp	r2, #0
 800a068:	dded      	ble.n	800a046 <_dtoa_r+0xa6e>
 800a06a:	4651      	mov	r1, sl
 800a06c:	2201      	movs	r2, #1
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 fbfe 	bl	800a870 <__lshift>
 800a074:	4631      	mov	r1, r6
 800a076:	4682      	mov	sl, r0
 800a078:	f000 fc66 	bl	800a948 <__mcmp>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	dc03      	bgt.n	800a088 <_dtoa_r+0xab0>
 800a080:	d1e1      	bne.n	800a046 <_dtoa_r+0xa6e>
 800a082:	f019 0f01 	tst.w	r9, #1
 800a086:	d0de      	beq.n	800a046 <_dtoa_r+0xa6e>
 800a088:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a08c:	d1d8      	bne.n	800a040 <_dtoa_r+0xa68>
 800a08e:	9a01      	ldr	r2, [sp, #4]
 800a090:	2339      	movs	r3, #57	; 0x39
 800a092:	7013      	strb	r3, [r2, #0]
 800a094:	462b      	mov	r3, r5
 800a096:	461d      	mov	r5, r3
 800a098:	3b01      	subs	r3, #1
 800a09a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a09e:	2a39      	cmp	r2, #57	; 0x39
 800a0a0:	d06c      	beq.n	800a17c <_dtoa_r+0xba4>
 800a0a2:	3201      	adds	r2, #1
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	e747      	b.n	8009f38 <_dtoa_r+0x960>
 800a0a8:	2a00      	cmp	r2, #0
 800a0aa:	dd07      	ble.n	800a0bc <_dtoa_r+0xae4>
 800a0ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0b0:	d0ed      	beq.n	800a08e <_dtoa_r+0xab6>
 800a0b2:	9a01      	ldr	r2, [sp, #4]
 800a0b4:	f109 0301 	add.w	r3, r9, #1
 800a0b8:	7013      	strb	r3, [r2, #0]
 800a0ba:	e73d      	b.n	8009f38 <_dtoa_r+0x960>
 800a0bc:	9b04      	ldr	r3, [sp, #16]
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d043      	beq.n	800a150 <_dtoa_r+0xb78>
 800a0c8:	4651      	mov	r1, sl
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f9d6 	bl	800a480 <__multadd>
 800a0d4:	45b8      	cmp	r8, r7
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	f04f 020a 	mov.w	r2, #10
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	d107      	bne.n	800a0f6 <_dtoa_r+0xb1e>
 800a0e6:	f000 f9cb 	bl	800a480 <__multadd>
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	e775      	b.n	8009fe2 <_dtoa_r+0xa0a>
 800a0f6:	f000 f9c3 	bl	800a480 <__multadd>
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	2300      	movs	r3, #0
 800a100:	220a      	movs	r2, #10
 800a102:	4620      	mov	r0, r4
 800a104:	f000 f9bc 	bl	800a480 <__multadd>
 800a108:	4607      	mov	r7, r0
 800a10a:	e7f0      	b.n	800a0ee <_dtoa_r+0xb16>
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	9d00      	ldr	r5, [sp, #0]
 800a112:	4631      	mov	r1, r6
 800a114:	4650      	mov	r0, sl
 800a116:	f7ff f9d7 	bl	80094c8 <quorem>
 800a11a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	f805 9b01 	strb.w	r9, [r5], #1
 800a124:	1aea      	subs	r2, r5, r3
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	4293      	cmp	r3, r2
 800a12a:	dd07      	ble.n	800a13c <_dtoa_r+0xb64>
 800a12c:	4651      	mov	r1, sl
 800a12e:	2300      	movs	r3, #0
 800a130:	220a      	movs	r2, #10
 800a132:	4620      	mov	r0, r4
 800a134:	f000 f9a4 	bl	800a480 <__multadd>
 800a138:	4682      	mov	sl, r0
 800a13a:	e7ea      	b.n	800a112 <_dtoa_r+0xb3a>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfc8      	it	gt
 800a142:	461d      	movgt	r5, r3
 800a144:	9b00      	ldr	r3, [sp, #0]
 800a146:	bfd8      	it	le
 800a148:	2501      	movle	r5, #1
 800a14a:	441d      	add	r5, r3
 800a14c:	f04f 0800 	mov.w	r8, #0
 800a150:	4651      	mov	r1, sl
 800a152:	2201      	movs	r2, #1
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fb8b 	bl	800a870 <__lshift>
 800a15a:	4631      	mov	r1, r6
 800a15c:	4682      	mov	sl, r0
 800a15e:	f000 fbf3 	bl	800a948 <__mcmp>
 800a162:	2800      	cmp	r0, #0
 800a164:	dc96      	bgt.n	800a094 <_dtoa_r+0xabc>
 800a166:	d102      	bne.n	800a16e <_dtoa_r+0xb96>
 800a168:	f019 0f01 	tst.w	r9, #1
 800a16c:	d192      	bne.n	800a094 <_dtoa_r+0xabc>
 800a16e:	462b      	mov	r3, r5
 800a170:	461d      	mov	r5, r3
 800a172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a176:	2a30      	cmp	r2, #48	; 0x30
 800a178:	d0fa      	beq.n	800a170 <_dtoa_r+0xb98>
 800a17a:	e6dd      	b.n	8009f38 <_dtoa_r+0x960>
 800a17c:	9a00      	ldr	r2, [sp, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d189      	bne.n	800a096 <_dtoa_r+0xabe>
 800a182:	f10b 0b01 	add.w	fp, fp, #1
 800a186:	2331      	movs	r3, #49	; 0x31
 800a188:	e796      	b.n	800a0b8 <_dtoa_r+0xae0>
 800a18a:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <_dtoa_r+0xbdc>)
 800a18c:	f7ff ba99 	b.w	80096c2 <_dtoa_r+0xea>
 800a190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a192:	2b00      	cmp	r3, #0
 800a194:	f47f aa6d 	bne.w	8009672 <_dtoa_r+0x9a>
 800a198:	4b07      	ldr	r3, [pc, #28]	; (800a1b8 <_dtoa_r+0xbe0>)
 800a19a:	f7ff ba92 	b.w	80096c2 <_dtoa_r+0xea>
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	dcb5      	bgt.n	800a110 <_dtoa_r+0xb38>
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	f73f aeb1 	bgt.w	8009f0e <_dtoa_r+0x936>
 800a1ac:	e7b0      	b.n	800a110 <_dtoa_r+0xb38>
 800a1ae:	bf00      	nop
 800a1b0:	0800e245 	.word	0x0800e245
 800a1b4:	0800e1a0 	.word	0x0800e1a0
 800a1b8:	0800e1c9 	.word	0x0800e1c9

0800a1bc <_free_r>:
 800a1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1be:	2900      	cmp	r1, #0
 800a1c0:	d044      	beq.n	800a24c <_free_r+0x90>
 800a1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c6:	9001      	str	r0, [sp, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a1ce:	bfb8      	it	lt
 800a1d0:	18e4      	addlt	r4, r4, r3
 800a1d2:	f000 f8e7 	bl	800a3a4 <__malloc_lock>
 800a1d6:	4a1e      	ldr	r2, [pc, #120]	; (800a250 <_free_r+0x94>)
 800a1d8:	9801      	ldr	r0, [sp, #4]
 800a1da:	6813      	ldr	r3, [r2, #0]
 800a1dc:	b933      	cbnz	r3, 800a1ec <_free_r+0x30>
 800a1de:	6063      	str	r3, [r4, #4]
 800a1e0:	6014      	str	r4, [r2, #0]
 800a1e2:	b003      	add	sp, #12
 800a1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1e8:	f000 b8e2 	b.w	800a3b0 <__malloc_unlock>
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d908      	bls.n	800a202 <_free_r+0x46>
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	1961      	adds	r1, r4, r5
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	bf01      	itttt	eq
 800a1f8:	6819      	ldreq	r1, [r3, #0]
 800a1fa:	685b      	ldreq	r3, [r3, #4]
 800a1fc:	1949      	addeq	r1, r1, r5
 800a1fe:	6021      	streq	r1, [r4, #0]
 800a200:	e7ed      	b.n	800a1de <_free_r+0x22>
 800a202:	461a      	mov	r2, r3
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b10b      	cbz	r3, 800a20c <_free_r+0x50>
 800a208:	42a3      	cmp	r3, r4
 800a20a:	d9fa      	bls.n	800a202 <_free_r+0x46>
 800a20c:	6811      	ldr	r1, [r2, #0]
 800a20e:	1855      	adds	r5, r2, r1
 800a210:	42a5      	cmp	r5, r4
 800a212:	d10b      	bne.n	800a22c <_free_r+0x70>
 800a214:	6824      	ldr	r4, [r4, #0]
 800a216:	4421      	add	r1, r4
 800a218:	1854      	adds	r4, r2, r1
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	6011      	str	r1, [r2, #0]
 800a21e:	d1e0      	bne.n	800a1e2 <_free_r+0x26>
 800a220:	681c      	ldr	r4, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	6053      	str	r3, [r2, #4]
 800a226:	440c      	add	r4, r1
 800a228:	6014      	str	r4, [r2, #0]
 800a22a:	e7da      	b.n	800a1e2 <_free_r+0x26>
 800a22c:	d902      	bls.n	800a234 <_free_r+0x78>
 800a22e:	230c      	movs	r3, #12
 800a230:	6003      	str	r3, [r0, #0]
 800a232:	e7d6      	b.n	800a1e2 <_free_r+0x26>
 800a234:	6825      	ldr	r5, [r4, #0]
 800a236:	1961      	adds	r1, r4, r5
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf04      	itt	eq
 800a23c:	6819      	ldreq	r1, [r3, #0]
 800a23e:	685b      	ldreq	r3, [r3, #4]
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	bf04      	itt	eq
 800a244:	1949      	addeq	r1, r1, r5
 800a246:	6021      	streq	r1, [r4, #0]
 800a248:	6054      	str	r4, [r2, #4]
 800a24a:	e7ca      	b.n	800a1e2 <_free_r+0x26>
 800a24c:	b003      	add	sp, #12
 800a24e:	bd30      	pop	{r4, r5, pc}
 800a250:	20004220 	.word	0x20004220

0800a254 <malloc>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <malloc+0xc>)
 800a256:	4601      	mov	r1, r0
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f000 b823 	b.w	800a2a4 <_malloc_r>
 800a25e:	bf00      	nop
 800a260:	2000007c 	.word	0x2000007c

0800a264 <sbrk_aligned>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4e0e      	ldr	r6, [pc, #56]	; (800a2a0 <sbrk_aligned+0x3c>)
 800a268:	460c      	mov	r4, r1
 800a26a:	6831      	ldr	r1, [r6, #0]
 800a26c:	4605      	mov	r5, r0
 800a26e:	b911      	cbnz	r1, 800a276 <sbrk_aligned+0x12>
 800a270:	f001 ffe2 	bl	800c238 <_sbrk_r>
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f001 ffdd 	bl	800c238 <_sbrk_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d00a      	beq.n	800a298 <sbrk_aligned+0x34>
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d007      	beq.n	800a29c <sbrk_aligned+0x38>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f001 ffd2 	bl	800c238 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d101      	bne.n	800a29c <sbrk_aligned+0x38>
 800a298:	f04f 34ff 	mov.w	r4, #4294967295
 800a29c:	4620      	mov	r0, r4
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	20004224 	.word	0x20004224

0800a2a4 <_malloc_r>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	1ccd      	adds	r5, r1, #3
 800a2aa:	f025 0503 	bic.w	r5, r5, #3
 800a2ae:	3508      	adds	r5, #8
 800a2b0:	2d0c      	cmp	r5, #12
 800a2b2:	bf38      	it	cc
 800a2b4:	250c      	movcc	r5, #12
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	db01      	blt.n	800a2c0 <_malloc_r+0x1c>
 800a2bc:	42a9      	cmp	r1, r5
 800a2be:	d905      	bls.n	800a2cc <_malloc_r+0x28>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	2600      	movs	r6, #0
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3a0 <_malloc_r+0xfc>
 800a2d0:	f000 f868 	bl	800a3a4 <__malloc_lock>
 800a2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d8:	461c      	mov	r4, r3
 800a2da:	bb5c      	cbnz	r4, 800a334 <_malloc_r+0x90>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ffc0 	bl	800a264 <sbrk_aligned>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	d155      	bne.n	800a396 <_malloc_r+0xf2>
 800a2ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a2ee:	4626      	mov	r6, r4
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	d145      	bne.n	800a380 <_malloc_r+0xdc>
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d048      	beq.n	800a38a <_malloc_r+0xe6>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	eb04 0903 	add.w	r9, r4, r3
 800a302:	f001 ff99 	bl	800c238 <_sbrk_r>
 800a306:	4581      	cmp	r9, r0
 800a308:	d13f      	bne.n	800a38a <_malloc_r+0xe6>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	1a6d      	subs	r5, r5, r1
 800a30e:	4629      	mov	r1, r5
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff ffa7 	bl	800a264 <sbrk_aligned>
 800a316:	3001      	adds	r0, #1
 800a318:	d037      	beq.n	800a38a <_malloc_r+0xe6>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	442b      	add	r3, r5
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	f8d8 3000 	ldr.w	r3, [r8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d038      	beq.n	800a39a <_malloc_r+0xf6>
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	42a2      	cmp	r2, r4
 800a32c:	d12b      	bne.n	800a386 <_malloc_r+0xe2>
 800a32e:	2200      	movs	r2, #0
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	e00f      	b.n	800a354 <_malloc_r+0xb0>
 800a334:	6822      	ldr	r2, [r4, #0]
 800a336:	1b52      	subs	r2, r2, r5
 800a338:	d41f      	bmi.n	800a37a <_malloc_r+0xd6>
 800a33a:	2a0b      	cmp	r2, #11
 800a33c:	d917      	bls.n	800a36e <_malloc_r+0xca>
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	42a3      	cmp	r3, r4
 800a342:	6025      	str	r5, [r4, #0]
 800a344:	bf18      	it	ne
 800a346:	6059      	strne	r1, [r3, #4]
 800a348:	6863      	ldr	r3, [r4, #4]
 800a34a:	bf08      	it	eq
 800a34c:	f8c8 1000 	streq.w	r1, [r8]
 800a350:	5162      	str	r2, [r4, r5]
 800a352:	604b      	str	r3, [r1, #4]
 800a354:	4638      	mov	r0, r7
 800a356:	f104 060b 	add.w	r6, r4, #11
 800a35a:	f000 f829 	bl	800a3b0 <__malloc_unlock>
 800a35e:	f026 0607 	bic.w	r6, r6, #7
 800a362:	1d23      	adds	r3, r4, #4
 800a364:	1af2      	subs	r2, r6, r3
 800a366:	d0ae      	beq.n	800a2c6 <_malloc_r+0x22>
 800a368:	1b9b      	subs	r3, r3, r6
 800a36a:	50a3      	str	r3, [r4, r2]
 800a36c:	e7ab      	b.n	800a2c6 <_malloc_r+0x22>
 800a36e:	42a3      	cmp	r3, r4
 800a370:	6862      	ldr	r2, [r4, #4]
 800a372:	d1dd      	bne.n	800a330 <_malloc_r+0x8c>
 800a374:	f8c8 2000 	str.w	r2, [r8]
 800a378:	e7ec      	b.n	800a354 <_malloc_r+0xb0>
 800a37a:	4623      	mov	r3, r4
 800a37c:	6864      	ldr	r4, [r4, #4]
 800a37e:	e7ac      	b.n	800a2da <_malloc_r+0x36>
 800a380:	4634      	mov	r4, r6
 800a382:	6876      	ldr	r6, [r6, #4]
 800a384:	e7b4      	b.n	800a2f0 <_malloc_r+0x4c>
 800a386:	4613      	mov	r3, r2
 800a388:	e7cc      	b.n	800a324 <_malloc_r+0x80>
 800a38a:	230c      	movs	r3, #12
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	4638      	mov	r0, r7
 800a390:	f000 f80e 	bl	800a3b0 <__malloc_unlock>
 800a394:	e797      	b.n	800a2c6 <_malloc_r+0x22>
 800a396:	6025      	str	r5, [r4, #0]
 800a398:	e7dc      	b.n	800a354 <_malloc_r+0xb0>
 800a39a:	605b      	str	r3, [r3, #4]
 800a39c:	deff      	udf	#255	; 0xff
 800a39e:	bf00      	nop
 800a3a0:	20004220 	.word	0x20004220

0800a3a4 <__malloc_lock>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__malloc_lock+0x8>)
 800a3a6:	f7ff b878 	b.w	800949a <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2000421c 	.word	0x2000421c

0800a3b0 <__malloc_unlock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__malloc_unlock+0x8>)
 800a3b2:	f7ff b873 	b.w	800949c <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	2000421c 	.word	0x2000421c

0800a3bc <_Balloc>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	69c6      	ldr	r6, [r0, #28]
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	b976      	cbnz	r6, 800a3e4 <_Balloc+0x28>
 800a3c6:	2010      	movs	r0, #16
 800a3c8:	f7ff ff44 	bl	800a254 <malloc>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	61e0      	str	r0, [r4, #28]
 800a3d0:	b920      	cbnz	r0, 800a3dc <_Balloc+0x20>
 800a3d2:	4b18      	ldr	r3, [pc, #96]	; (800a434 <_Balloc+0x78>)
 800a3d4:	4818      	ldr	r0, [pc, #96]	; (800a438 <_Balloc+0x7c>)
 800a3d6:	216b      	movs	r1, #107	; 0x6b
 800a3d8:	f001 ff46 	bl	800c268 <__assert_func>
 800a3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e0:	6006      	str	r6, [r0, #0]
 800a3e2:	60c6      	str	r6, [r0, #12]
 800a3e4:	69e6      	ldr	r6, [r4, #28]
 800a3e6:	68f3      	ldr	r3, [r6, #12]
 800a3e8:	b183      	cbz	r3, 800a40c <_Balloc+0x50>
 800a3ea:	69e3      	ldr	r3, [r4, #28]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3f2:	b9b8      	cbnz	r0, 800a424 <_Balloc+0x68>
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a3fa:	1d72      	adds	r2, r6, #5
 800a3fc:	0092      	lsls	r2, r2, #2
 800a3fe:	4620      	mov	r0, r4
 800a400:	f001 ff50 	bl	800c2a4 <_calloc_r>
 800a404:	b160      	cbz	r0, 800a420 <_Balloc+0x64>
 800a406:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a40a:	e00e      	b.n	800a42a <_Balloc+0x6e>
 800a40c:	2221      	movs	r2, #33	; 0x21
 800a40e:	2104      	movs	r1, #4
 800a410:	4620      	mov	r0, r4
 800a412:	f001 ff47 	bl	800c2a4 <_calloc_r>
 800a416:	69e3      	ldr	r3, [r4, #28]
 800a418:	60f0      	str	r0, [r6, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e4      	bne.n	800a3ea <_Balloc+0x2e>
 800a420:	2000      	movs	r0, #0
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	6802      	ldr	r2, [r0, #0]
 800a426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a42a:	2300      	movs	r3, #0
 800a42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a430:	e7f7      	b.n	800a422 <_Balloc+0x66>
 800a432:	bf00      	nop
 800a434:	0800e1d6 	.word	0x0800e1d6
 800a438:	0800e256 	.word	0x0800e256

0800a43c <_Bfree>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	69c6      	ldr	r6, [r0, #28]
 800a440:	4605      	mov	r5, r0
 800a442:	460c      	mov	r4, r1
 800a444:	b976      	cbnz	r6, 800a464 <_Bfree+0x28>
 800a446:	2010      	movs	r0, #16
 800a448:	f7ff ff04 	bl	800a254 <malloc>
 800a44c:	4602      	mov	r2, r0
 800a44e:	61e8      	str	r0, [r5, #28]
 800a450:	b920      	cbnz	r0, 800a45c <_Bfree+0x20>
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <_Bfree+0x3c>)
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <_Bfree+0x40>)
 800a456:	218f      	movs	r1, #143	; 0x8f
 800a458:	f001 ff06 	bl	800c268 <__assert_func>
 800a45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a460:	6006      	str	r6, [r0, #0]
 800a462:	60c6      	str	r6, [r0, #12]
 800a464:	b13c      	cbz	r4, 800a476 <_Bfree+0x3a>
 800a466:	69eb      	ldr	r3, [r5, #28]
 800a468:	6862      	ldr	r2, [r4, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a470:	6021      	str	r1, [r4, #0]
 800a472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	0800e1d6 	.word	0x0800e1d6
 800a47c:	0800e256 	.word	0x0800e256

0800a480 <__multadd>:
 800a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	690d      	ldr	r5, [r1, #16]
 800a486:	4607      	mov	r7, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	461e      	mov	r6, r3
 800a48c:	f101 0c14 	add.w	ip, r1, #20
 800a490:	2000      	movs	r0, #0
 800a492:	f8dc 3000 	ldr.w	r3, [ip]
 800a496:	b299      	uxth	r1, r3
 800a498:	fb02 6101 	mla	r1, r2, r1, r6
 800a49c:	0c1e      	lsrs	r6, r3, #16
 800a49e:	0c0b      	lsrs	r3, r1, #16
 800a4a0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4a4:	b289      	uxth	r1, r1
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4ac:	4285      	cmp	r5, r0
 800a4ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a4b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4b6:	dcec      	bgt.n	800a492 <__multadd+0x12>
 800a4b8:	b30e      	cbz	r6, 800a4fe <__multadd+0x7e>
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	42ab      	cmp	r3, r5
 800a4be:	dc19      	bgt.n	800a4f4 <__multadd+0x74>
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	f7ff ff79 	bl	800a3bc <_Balloc>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	b928      	cbnz	r0, 800a4da <__multadd+0x5a>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <__multadd+0x84>)
 800a4d2:	480d      	ldr	r0, [pc, #52]	; (800a508 <__multadd+0x88>)
 800a4d4:	21ba      	movs	r1, #186	; 0xba
 800a4d6:	f001 fec7 	bl	800c268 <__assert_func>
 800a4da:	6922      	ldr	r2, [r4, #16]
 800a4dc:	3202      	adds	r2, #2
 800a4de:	f104 010c 	add.w	r1, r4, #12
 800a4e2:	0092      	lsls	r2, r2, #2
 800a4e4:	300c      	adds	r0, #12
 800a4e6:	f7fe ffda 	bl	800949e <memcpy>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f7ff ffa5 	bl	800a43c <_Bfree>
 800a4f2:	4644      	mov	r4, r8
 800a4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	615e      	str	r6, [r3, #20]
 800a4fc:	6125      	str	r5, [r4, #16]
 800a4fe:	4620      	mov	r0, r4
 800a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a504:	0800e245 	.word	0x0800e245
 800a508:	0800e256 	.word	0x0800e256

0800a50c <__s2b>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	460c      	mov	r4, r1
 800a512:	4615      	mov	r5, r2
 800a514:	461f      	mov	r7, r3
 800a516:	2209      	movs	r2, #9
 800a518:	3308      	adds	r3, #8
 800a51a:	4606      	mov	r6, r0
 800a51c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a520:	2100      	movs	r1, #0
 800a522:	2201      	movs	r2, #1
 800a524:	429a      	cmp	r2, r3
 800a526:	db09      	blt.n	800a53c <__s2b+0x30>
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff ff47 	bl	800a3bc <_Balloc>
 800a52e:	b940      	cbnz	r0, 800a542 <__s2b+0x36>
 800a530:	4602      	mov	r2, r0
 800a532:	4b19      	ldr	r3, [pc, #100]	; (800a598 <__s2b+0x8c>)
 800a534:	4819      	ldr	r0, [pc, #100]	; (800a59c <__s2b+0x90>)
 800a536:	21d3      	movs	r1, #211	; 0xd3
 800a538:	f001 fe96 	bl	800c268 <__assert_func>
 800a53c:	0052      	lsls	r2, r2, #1
 800a53e:	3101      	adds	r1, #1
 800a540:	e7f0      	b.n	800a524 <__s2b+0x18>
 800a542:	9b08      	ldr	r3, [sp, #32]
 800a544:	6143      	str	r3, [r0, #20]
 800a546:	2d09      	cmp	r5, #9
 800a548:	f04f 0301 	mov.w	r3, #1
 800a54c:	6103      	str	r3, [r0, #16]
 800a54e:	dd16      	ble.n	800a57e <__s2b+0x72>
 800a550:	f104 0909 	add.w	r9, r4, #9
 800a554:	46c8      	mov	r8, r9
 800a556:	442c      	add	r4, r5
 800a558:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a55c:	4601      	mov	r1, r0
 800a55e:	3b30      	subs	r3, #48	; 0x30
 800a560:	220a      	movs	r2, #10
 800a562:	4630      	mov	r0, r6
 800a564:	f7ff ff8c 	bl	800a480 <__multadd>
 800a568:	45a0      	cmp	r8, r4
 800a56a:	d1f5      	bne.n	800a558 <__s2b+0x4c>
 800a56c:	f1a5 0408 	sub.w	r4, r5, #8
 800a570:	444c      	add	r4, r9
 800a572:	1b2d      	subs	r5, r5, r4
 800a574:	1963      	adds	r3, r4, r5
 800a576:	42bb      	cmp	r3, r7
 800a578:	db04      	blt.n	800a584 <__s2b+0x78>
 800a57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57e:	340a      	adds	r4, #10
 800a580:	2509      	movs	r5, #9
 800a582:	e7f6      	b.n	800a572 <__s2b+0x66>
 800a584:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a588:	4601      	mov	r1, r0
 800a58a:	3b30      	subs	r3, #48	; 0x30
 800a58c:	220a      	movs	r2, #10
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff ff76 	bl	800a480 <__multadd>
 800a594:	e7ee      	b.n	800a574 <__s2b+0x68>
 800a596:	bf00      	nop
 800a598:	0800e245 	.word	0x0800e245
 800a59c:	0800e256 	.word	0x0800e256

0800a5a0 <__hi0bits>:
 800a5a0:	0c03      	lsrs	r3, r0, #16
 800a5a2:	041b      	lsls	r3, r3, #16
 800a5a4:	b9d3      	cbnz	r3, 800a5dc <__hi0bits+0x3c>
 800a5a6:	0400      	lsls	r0, r0, #16
 800a5a8:	2310      	movs	r3, #16
 800a5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5ae:	bf04      	itt	eq
 800a5b0:	0200      	lsleq	r0, r0, #8
 800a5b2:	3308      	addeq	r3, #8
 800a5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5b8:	bf04      	itt	eq
 800a5ba:	0100      	lsleq	r0, r0, #4
 800a5bc:	3304      	addeq	r3, #4
 800a5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5c2:	bf04      	itt	eq
 800a5c4:	0080      	lsleq	r0, r0, #2
 800a5c6:	3302      	addeq	r3, #2
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	db05      	blt.n	800a5d8 <__hi0bits+0x38>
 800a5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5d0:	f103 0301 	add.w	r3, r3, #1
 800a5d4:	bf08      	it	eq
 800a5d6:	2320      	moveq	r3, #32
 800a5d8:	4618      	mov	r0, r3
 800a5da:	4770      	bx	lr
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e7e4      	b.n	800a5aa <__hi0bits+0xa>

0800a5e0 <__lo0bits>:
 800a5e0:	6803      	ldr	r3, [r0, #0]
 800a5e2:	f013 0207 	ands.w	r2, r3, #7
 800a5e6:	d00c      	beq.n	800a602 <__lo0bits+0x22>
 800a5e8:	07d9      	lsls	r1, r3, #31
 800a5ea:	d422      	bmi.n	800a632 <__lo0bits+0x52>
 800a5ec:	079a      	lsls	r2, r3, #30
 800a5ee:	bf49      	itett	mi
 800a5f0:	085b      	lsrmi	r3, r3, #1
 800a5f2:	089b      	lsrpl	r3, r3, #2
 800a5f4:	6003      	strmi	r3, [r0, #0]
 800a5f6:	2201      	movmi	r2, #1
 800a5f8:	bf5c      	itt	pl
 800a5fa:	6003      	strpl	r3, [r0, #0]
 800a5fc:	2202      	movpl	r2, #2
 800a5fe:	4610      	mov	r0, r2
 800a600:	4770      	bx	lr
 800a602:	b299      	uxth	r1, r3
 800a604:	b909      	cbnz	r1, 800a60a <__lo0bits+0x2a>
 800a606:	0c1b      	lsrs	r3, r3, #16
 800a608:	2210      	movs	r2, #16
 800a60a:	b2d9      	uxtb	r1, r3
 800a60c:	b909      	cbnz	r1, 800a612 <__lo0bits+0x32>
 800a60e:	3208      	adds	r2, #8
 800a610:	0a1b      	lsrs	r3, r3, #8
 800a612:	0719      	lsls	r1, r3, #28
 800a614:	bf04      	itt	eq
 800a616:	091b      	lsreq	r3, r3, #4
 800a618:	3204      	addeq	r2, #4
 800a61a:	0799      	lsls	r1, r3, #30
 800a61c:	bf04      	itt	eq
 800a61e:	089b      	lsreq	r3, r3, #2
 800a620:	3202      	addeq	r2, #2
 800a622:	07d9      	lsls	r1, r3, #31
 800a624:	d403      	bmi.n	800a62e <__lo0bits+0x4e>
 800a626:	085b      	lsrs	r3, r3, #1
 800a628:	f102 0201 	add.w	r2, r2, #1
 800a62c:	d003      	beq.n	800a636 <__lo0bits+0x56>
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	e7e5      	b.n	800a5fe <__lo0bits+0x1e>
 800a632:	2200      	movs	r2, #0
 800a634:	e7e3      	b.n	800a5fe <__lo0bits+0x1e>
 800a636:	2220      	movs	r2, #32
 800a638:	e7e1      	b.n	800a5fe <__lo0bits+0x1e>
	...

0800a63c <__i2b>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	2101      	movs	r1, #1
 800a642:	f7ff febb 	bl	800a3bc <_Balloc>
 800a646:	4602      	mov	r2, r0
 800a648:	b928      	cbnz	r0, 800a656 <__i2b+0x1a>
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <__i2b+0x24>)
 800a64c:	4805      	ldr	r0, [pc, #20]	; (800a664 <__i2b+0x28>)
 800a64e:	f240 1145 	movw	r1, #325	; 0x145
 800a652:	f001 fe09 	bl	800c268 <__assert_func>
 800a656:	2301      	movs	r3, #1
 800a658:	6144      	str	r4, [r0, #20]
 800a65a:	6103      	str	r3, [r0, #16]
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	bf00      	nop
 800a660:	0800e245 	.word	0x0800e245
 800a664:	0800e256 	.word	0x0800e256

0800a668 <__multiply>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4691      	mov	r9, r2
 800a66e:	690a      	ldr	r2, [r1, #16]
 800a670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a674:	429a      	cmp	r2, r3
 800a676:	bfb8      	it	lt
 800a678:	460b      	movlt	r3, r1
 800a67a:	460c      	mov	r4, r1
 800a67c:	bfbc      	itt	lt
 800a67e:	464c      	movlt	r4, r9
 800a680:	4699      	movlt	r9, r3
 800a682:	6927      	ldr	r7, [r4, #16]
 800a684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	6861      	ldr	r1, [r4, #4]
 800a68c:	eb07 060a 	add.w	r6, r7, sl
 800a690:	42b3      	cmp	r3, r6
 800a692:	b085      	sub	sp, #20
 800a694:	bfb8      	it	lt
 800a696:	3101      	addlt	r1, #1
 800a698:	f7ff fe90 	bl	800a3bc <_Balloc>
 800a69c:	b930      	cbnz	r0, 800a6ac <__multiply+0x44>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b44      	ldr	r3, [pc, #272]	; (800a7b4 <__multiply+0x14c>)
 800a6a2:	4845      	ldr	r0, [pc, #276]	; (800a7b8 <__multiply+0x150>)
 800a6a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a6a8:	f001 fdde 	bl	800c268 <__assert_func>
 800a6ac:	f100 0514 	add.w	r5, r0, #20
 800a6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	d321      	bcc.n	800a700 <__multiply+0x98>
 800a6bc:	f104 0314 	add.w	r3, r4, #20
 800a6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6c4:	f109 0314 	add.w	r3, r9, #20
 800a6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6cc:	9202      	str	r2, [sp, #8]
 800a6ce:	1b3a      	subs	r2, r7, r4
 800a6d0:	3a15      	subs	r2, #21
 800a6d2:	f022 0203 	bic.w	r2, r2, #3
 800a6d6:	3204      	adds	r2, #4
 800a6d8:	f104 0115 	add.w	r1, r4, #21
 800a6dc:	428f      	cmp	r7, r1
 800a6de:	bf38      	it	cc
 800a6e0:	2204      	movcc	r2, #4
 800a6e2:	9201      	str	r2, [sp, #4]
 800a6e4:	9a02      	ldr	r2, [sp, #8]
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d80c      	bhi.n	800a706 <__multiply+0x9e>
 800a6ec:	2e00      	cmp	r6, #0
 800a6ee:	dd03      	ble.n	800a6f8 <__multiply+0x90>
 800a6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d05b      	beq.n	800a7b0 <__multiply+0x148>
 800a6f8:	6106      	str	r6, [r0, #16]
 800a6fa:	b005      	add	sp, #20
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	f843 2b04 	str.w	r2, [r3], #4
 800a704:	e7d8      	b.n	800a6b8 <__multiply+0x50>
 800a706:	f8b3 a000 	ldrh.w	sl, [r3]
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	d024      	beq.n	800a75a <__multiply+0xf2>
 800a710:	f104 0e14 	add.w	lr, r4, #20
 800a714:	46a9      	mov	r9, r5
 800a716:	f04f 0c00 	mov.w	ip, #0
 800a71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a71e:	f8d9 1000 	ldr.w	r1, [r9]
 800a722:	fa1f fb82 	uxth.w	fp, r2
 800a726:	b289      	uxth	r1, r1
 800a728:	fb0a 110b 	mla	r1, sl, fp, r1
 800a72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a730:	f8d9 2000 	ldr.w	r2, [r9]
 800a734:	4461      	add	r1, ip
 800a736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a742:	b289      	uxth	r1, r1
 800a744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a748:	4577      	cmp	r7, lr
 800a74a:	f849 1b04 	str.w	r1, [r9], #4
 800a74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a752:	d8e2      	bhi.n	800a71a <__multiply+0xb2>
 800a754:	9a01      	ldr	r2, [sp, #4]
 800a756:	f845 c002 	str.w	ip, [r5, r2]
 800a75a:	9a03      	ldr	r2, [sp, #12]
 800a75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a760:	3304      	adds	r3, #4
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d021      	beq.n	800a7ac <__multiply+0x144>
 800a768:	6829      	ldr	r1, [r5, #0]
 800a76a:	f104 0c14 	add.w	ip, r4, #20
 800a76e:	46ae      	mov	lr, r5
 800a770:	f04f 0a00 	mov.w	sl, #0
 800a774:	f8bc b000 	ldrh.w	fp, [ip]
 800a778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a77c:	fb09 220b 	mla	r2, r9, fp, r2
 800a780:	4452      	add	r2, sl
 800a782:	b289      	uxth	r1, r1
 800a784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a788:	f84e 1b04 	str.w	r1, [lr], #4
 800a78c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a790:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a794:	f8be 1000 	ldrh.w	r1, [lr]
 800a798:	fb09 110a 	mla	r1, r9, sl, r1
 800a79c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a7a0:	4567      	cmp	r7, ip
 800a7a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7a6:	d8e5      	bhi.n	800a774 <__multiply+0x10c>
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	50a9      	str	r1, [r5, r2]
 800a7ac:	3504      	adds	r5, #4
 800a7ae:	e799      	b.n	800a6e4 <__multiply+0x7c>
 800a7b0:	3e01      	subs	r6, #1
 800a7b2:	e79b      	b.n	800a6ec <__multiply+0x84>
 800a7b4:	0800e245 	.word	0x0800e245
 800a7b8:	0800e256 	.word	0x0800e256

0800a7bc <__pow5mult>:
 800a7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	f012 0203 	ands.w	r2, r2, #3
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	d007      	beq.n	800a7dc <__pow5mult+0x20>
 800a7cc:	4c25      	ldr	r4, [pc, #148]	; (800a864 <__pow5mult+0xa8>)
 800a7ce:	3a01      	subs	r2, #1
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7d6:	f7ff fe53 	bl	800a480 <__multadd>
 800a7da:	4607      	mov	r7, r0
 800a7dc:	10ad      	asrs	r5, r5, #2
 800a7de:	d03d      	beq.n	800a85c <__pow5mult+0xa0>
 800a7e0:	69f4      	ldr	r4, [r6, #28]
 800a7e2:	b97c      	cbnz	r4, 800a804 <__pow5mult+0x48>
 800a7e4:	2010      	movs	r0, #16
 800a7e6:	f7ff fd35 	bl	800a254 <malloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	61f0      	str	r0, [r6, #28]
 800a7ee:	b928      	cbnz	r0, 800a7fc <__pow5mult+0x40>
 800a7f0:	4b1d      	ldr	r3, [pc, #116]	; (800a868 <__pow5mult+0xac>)
 800a7f2:	481e      	ldr	r0, [pc, #120]	; (800a86c <__pow5mult+0xb0>)
 800a7f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a7f8:	f001 fd36 	bl	800c268 <__assert_func>
 800a7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a800:	6004      	str	r4, [r0, #0]
 800a802:	60c4      	str	r4, [r0, #12]
 800a804:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a80c:	b94c      	cbnz	r4, 800a822 <__pow5mult+0x66>
 800a80e:	f240 2171 	movw	r1, #625	; 0x271
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ff12 	bl	800a63c <__i2b>
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a81e:	4604      	mov	r4, r0
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	07eb      	lsls	r3, r5, #31
 800a828:	d50a      	bpl.n	800a840 <__pow5mult+0x84>
 800a82a:	4639      	mov	r1, r7
 800a82c:	4622      	mov	r2, r4
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff1a 	bl	800a668 <__multiply>
 800a834:	4639      	mov	r1, r7
 800a836:	4680      	mov	r8, r0
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fdff 	bl	800a43c <_Bfree>
 800a83e:	4647      	mov	r7, r8
 800a840:	106d      	asrs	r5, r5, #1
 800a842:	d00b      	beq.n	800a85c <__pow5mult+0xa0>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	b938      	cbnz	r0, 800a858 <__pow5mult+0x9c>
 800a848:	4622      	mov	r2, r4
 800a84a:	4621      	mov	r1, r4
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff ff0b 	bl	800a668 <__multiply>
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	f8c0 9000 	str.w	r9, [r0]
 800a858:	4604      	mov	r4, r0
 800a85a:	e7e4      	b.n	800a826 <__pow5mult+0x6a>
 800a85c:	4638      	mov	r0, r7
 800a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a862:	bf00      	nop
 800a864:	0800e3a0 	.word	0x0800e3a0
 800a868:	0800e1d6 	.word	0x0800e1d6
 800a86c:	0800e256 	.word	0x0800e256

0800a870 <__lshift>:
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	6849      	ldr	r1, [r1, #4]
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	4607      	mov	r7, r0
 800a882:	4691      	mov	r9, r2
 800a884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a888:	f108 0601 	add.w	r6, r8, #1
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	db0b      	blt.n	800a8a8 <__lshift+0x38>
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff fd93 	bl	800a3bc <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b948      	cbnz	r0, 800a8ae <__lshift+0x3e>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b28      	ldr	r3, [pc, #160]	; (800a940 <__lshift+0xd0>)
 800a89e:	4829      	ldr	r0, [pc, #164]	; (800a944 <__lshift+0xd4>)
 800a8a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a8a4:	f001 fce0 	bl	800c268 <__assert_func>
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	e7ee      	b.n	800a88c <__lshift+0x1c>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f100 0114 	add.w	r1, r0, #20
 800a8b4:	f100 0210 	add.w	r2, r0, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	4553      	cmp	r3, sl
 800a8bc:	db33      	blt.n	800a926 <__lshift+0xb6>
 800a8be:	6920      	ldr	r0, [r4, #16]
 800a8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8c4:	f104 0314 	add.w	r3, r4, #20
 800a8c8:	f019 091f 	ands.w	r9, r9, #31
 800a8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8d4:	d02b      	beq.n	800a92e <__lshift+0xbe>
 800a8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8da:	468a      	mov	sl, r1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a8e4:	4310      	orrs	r0, r2
 800a8e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ee:	459c      	cmp	ip, r3
 800a8f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8f4:	d8f3      	bhi.n	800a8de <__lshift+0x6e>
 800a8f6:	ebac 0304 	sub.w	r3, ip, r4
 800a8fa:	3b15      	subs	r3, #21
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	3304      	adds	r3, #4
 800a902:	f104 0015 	add.w	r0, r4, #21
 800a906:	4584      	cmp	ip, r0
 800a908:	bf38      	it	cc
 800a90a:	2304      	movcc	r3, #4
 800a90c:	50ca      	str	r2, [r1, r3]
 800a90e:	b10a      	cbz	r2, 800a914 <__lshift+0xa4>
 800a910:	f108 0602 	add.w	r6, r8, #2
 800a914:	3e01      	subs	r6, #1
 800a916:	4638      	mov	r0, r7
 800a918:	612e      	str	r6, [r5, #16]
 800a91a:	4621      	mov	r1, r4
 800a91c:	f7ff fd8e 	bl	800a43c <_Bfree>
 800a920:	4628      	mov	r0, r5
 800a922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a926:	f842 0f04 	str.w	r0, [r2, #4]!
 800a92a:	3301      	adds	r3, #1
 800a92c:	e7c5      	b.n	800a8ba <__lshift+0x4a>
 800a92e:	3904      	subs	r1, #4
 800a930:	f853 2b04 	ldr.w	r2, [r3], #4
 800a934:	f841 2f04 	str.w	r2, [r1, #4]!
 800a938:	459c      	cmp	ip, r3
 800a93a:	d8f9      	bhi.n	800a930 <__lshift+0xc0>
 800a93c:	e7ea      	b.n	800a914 <__lshift+0xa4>
 800a93e:	bf00      	nop
 800a940:	0800e245 	.word	0x0800e245
 800a944:	0800e256 	.word	0x0800e256

0800a948 <__mcmp>:
 800a948:	b530      	push	{r4, r5, lr}
 800a94a:	6902      	ldr	r2, [r0, #16]
 800a94c:	690c      	ldr	r4, [r1, #16]
 800a94e:	1b12      	subs	r2, r2, r4
 800a950:	d10e      	bne.n	800a970 <__mcmp+0x28>
 800a952:	f100 0314 	add.w	r3, r0, #20
 800a956:	3114      	adds	r1, #20
 800a958:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a95c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a960:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a964:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a968:	42a5      	cmp	r5, r4
 800a96a:	d003      	beq.n	800a974 <__mcmp+0x2c>
 800a96c:	d305      	bcc.n	800a97a <__mcmp+0x32>
 800a96e:	2201      	movs	r2, #1
 800a970:	4610      	mov	r0, r2
 800a972:	bd30      	pop	{r4, r5, pc}
 800a974:	4283      	cmp	r3, r0
 800a976:	d3f3      	bcc.n	800a960 <__mcmp+0x18>
 800a978:	e7fa      	b.n	800a970 <__mcmp+0x28>
 800a97a:	f04f 32ff 	mov.w	r2, #4294967295
 800a97e:	e7f7      	b.n	800a970 <__mcmp+0x28>

0800a980 <__mdiff>:
 800a980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	460c      	mov	r4, r1
 800a986:	4606      	mov	r6, r0
 800a988:	4611      	mov	r1, r2
 800a98a:	4620      	mov	r0, r4
 800a98c:	4690      	mov	r8, r2
 800a98e:	f7ff ffdb 	bl	800a948 <__mcmp>
 800a992:	1e05      	subs	r5, r0, #0
 800a994:	d110      	bne.n	800a9b8 <__mdiff+0x38>
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff fd0f 	bl	800a3bc <_Balloc>
 800a99e:	b930      	cbnz	r0, 800a9ae <__mdiff+0x2e>
 800a9a0:	4b3a      	ldr	r3, [pc, #232]	; (800aa8c <__mdiff+0x10c>)
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	f240 2137 	movw	r1, #567	; 0x237
 800a9a8:	4839      	ldr	r0, [pc, #228]	; (800aa90 <__mdiff+0x110>)
 800a9aa:	f001 fc5d 	bl	800c268 <__assert_func>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b8:	bfa4      	itt	ge
 800a9ba:	4643      	movge	r3, r8
 800a9bc:	46a0      	movge	r8, r4
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9c4:	bfa6      	itte	ge
 800a9c6:	461c      	movge	r4, r3
 800a9c8:	2500      	movge	r5, #0
 800a9ca:	2501      	movlt	r5, #1
 800a9cc:	f7ff fcf6 	bl	800a3bc <_Balloc>
 800a9d0:	b920      	cbnz	r0, 800a9dc <__mdiff+0x5c>
 800a9d2:	4b2e      	ldr	r3, [pc, #184]	; (800aa8c <__mdiff+0x10c>)
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	f240 2145 	movw	r1, #581	; 0x245
 800a9da:	e7e5      	b.n	800a9a8 <__mdiff+0x28>
 800a9dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9e0:	6926      	ldr	r6, [r4, #16]
 800a9e2:	60c5      	str	r5, [r0, #12]
 800a9e4:	f104 0914 	add.w	r9, r4, #20
 800a9e8:	f108 0514 	add.w	r5, r8, #20
 800a9ec:	f100 0e14 	add.w	lr, r0, #20
 800a9f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9f8:	f108 0210 	add.w	r2, r8, #16
 800a9fc:	46f2      	mov	sl, lr
 800a9fe:	2100      	movs	r1, #0
 800aa00:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa08:	fa11 f88b 	uxtah	r8, r1, fp
 800aa0c:	b299      	uxth	r1, r3
 800aa0e:	0c1b      	lsrs	r3, r3, #16
 800aa10:	eba8 0801 	sub.w	r8, r8, r1
 800aa14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa1c:	fa1f f888 	uxth.w	r8, r8
 800aa20:	1419      	asrs	r1, r3, #16
 800aa22:	454e      	cmp	r6, r9
 800aa24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa28:	f84a 3b04 	str.w	r3, [sl], #4
 800aa2c:	d8e8      	bhi.n	800aa00 <__mdiff+0x80>
 800aa2e:	1b33      	subs	r3, r6, r4
 800aa30:	3b15      	subs	r3, #21
 800aa32:	f023 0303 	bic.w	r3, r3, #3
 800aa36:	3304      	adds	r3, #4
 800aa38:	3415      	adds	r4, #21
 800aa3a:	42a6      	cmp	r6, r4
 800aa3c:	bf38      	it	cc
 800aa3e:	2304      	movcc	r3, #4
 800aa40:	441d      	add	r5, r3
 800aa42:	4473      	add	r3, lr
 800aa44:	469e      	mov	lr, r3
 800aa46:	462e      	mov	r6, r5
 800aa48:	4566      	cmp	r6, ip
 800aa4a:	d30e      	bcc.n	800aa6a <__mdiff+0xea>
 800aa4c:	f10c 0203 	add.w	r2, ip, #3
 800aa50:	1b52      	subs	r2, r2, r5
 800aa52:	f022 0203 	bic.w	r2, r2, #3
 800aa56:	3d03      	subs	r5, #3
 800aa58:	45ac      	cmp	ip, r5
 800aa5a:	bf38      	it	cc
 800aa5c:	2200      	movcc	r2, #0
 800aa5e:	4413      	add	r3, r2
 800aa60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa64:	b17a      	cbz	r2, 800aa86 <__mdiff+0x106>
 800aa66:	6107      	str	r7, [r0, #16]
 800aa68:	e7a4      	b.n	800a9b4 <__mdiff+0x34>
 800aa6a:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa6e:	fa11 f288 	uxtah	r2, r1, r8
 800aa72:	1414      	asrs	r4, r2, #16
 800aa74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa78:	b292      	uxth	r2, r2
 800aa7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa7e:	f84e 2b04 	str.w	r2, [lr], #4
 800aa82:	1421      	asrs	r1, r4, #16
 800aa84:	e7e0      	b.n	800aa48 <__mdiff+0xc8>
 800aa86:	3f01      	subs	r7, #1
 800aa88:	e7ea      	b.n	800aa60 <__mdiff+0xe0>
 800aa8a:	bf00      	nop
 800aa8c:	0800e245 	.word	0x0800e245
 800aa90:	0800e256 	.word	0x0800e256

0800aa94 <__ulp>:
 800aa94:	b082      	sub	sp, #8
 800aa96:	ed8d 0b00 	vstr	d0, [sp]
 800aa9a:	9a01      	ldr	r2, [sp, #4]
 800aa9c:	4b0f      	ldr	r3, [pc, #60]	; (800aadc <__ulp+0x48>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dc08      	bgt.n	800aaba <__ulp+0x26>
 800aaa8:	425b      	negs	r3, r3
 800aaaa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aaae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aab2:	da04      	bge.n	800aabe <__ulp+0x2a>
 800aab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aab8:	4113      	asrs	r3, r2
 800aaba:	2200      	movs	r2, #0
 800aabc:	e008      	b.n	800aad0 <__ulp+0x3c>
 800aabe:	f1a2 0314 	sub.w	r3, r2, #20
 800aac2:	2b1e      	cmp	r3, #30
 800aac4:	bfda      	itte	le
 800aac6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aaca:	40da      	lsrle	r2, r3
 800aacc:	2201      	movgt	r2, #1
 800aace:	2300      	movs	r3, #0
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	ec41 0b10 	vmov	d0, r0, r1
 800aad8:	b002      	add	sp, #8
 800aada:	4770      	bx	lr
 800aadc:	7ff00000 	.word	0x7ff00000

0800aae0 <__b2d>:
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	6906      	ldr	r6, [r0, #16]
 800aae6:	f100 0814 	add.w	r8, r0, #20
 800aaea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aaee:	1f37      	subs	r7, r6, #4
 800aaf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7ff fd53 	bl	800a5a0 <__hi0bits>
 800aafa:	f1c0 0320 	rsb	r3, r0, #32
 800aafe:	280a      	cmp	r0, #10
 800ab00:	600b      	str	r3, [r1, #0]
 800ab02:	491b      	ldr	r1, [pc, #108]	; (800ab70 <__b2d+0x90>)
 800ab04:	dc15      	bgt.n	800ab32 <__b2d+0x52>
 800ab06:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab0a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab0e:	45b8      	cmp	r8, r7
 800ab10:	ea43 0501 	orr.w	r5, r3, r1
 800ab14:	bf34      	ite	cc
 800ab16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab1a:	2300      	movcs	r3, #0
 800ab1c:	3015      	adds	r0, #21
 800ab1e:	fa02 f000 	lsl.w	r0, r2, r0
 800ab22:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab26:	4303      	orrs	r3, r0
 800ab28:	461c      	mov	r4, r3
 800ab2a:	ec45 4b10 	vmov	d0, r4, r5
 800ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab32:	45b8      	cmp	r8, r7
 800ab34:	bf3a      	itte	cc
 800ab36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab3a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab3e:	2300      	movcs	r3, #0
 800ab40:	380b      	subs	r0, #11
 800ab42:	d012      	beq.n	800ab6a <__b2d+0x8a>
 800ab44:	f1c0 0120 	rsb	r1, r0, #32
 800ab48:	fa23 f401 	lsr.w	r4, r3, r1
 800ab4c:	4082      	lsls	r2, r0
 800ab4e:	4322      	orrs	r2, r4
 800ab50:	4547      	cmp	r7, r8
 800ab52:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ab56:	bf8c      	ite	hi
 800ab58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab5c:	2200      	movls	r2, #0
 800ab5e:	4083      	lsls	r3, r0
 800ab60:	40ca      	lsrs	r2, r1
 800ab62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab66:	4313      	orrs	r3, r2
 800ab68:	e7de      	b.n	800ab28 <__b2d+0x48>
 800ab6a:	ea42 0501 	orr.w	r5, r2, r1
 800ab6e:	e7db      	b.n	800ab28 <__b2d+0x48>
 800ab70:	3ff00000 	.word	0x3ff00000

0800ab74 <__d2b>:
 800ab74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	460f      	mov	r7, r1
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	ec59 8b10 	vmov	r8, r9, d0
 800ab80:	4616      	mov	r6, r2
 800ab82:	f7ff fc1b 	bl	800a3bc <_Balloc>
 800ab86:	4604      	mov	r4, r0
 800ab88:	b930      	cbnz	r0, 800ab98 <__d2b+0x24>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <__d2b+0xac>)
 800ab8e:	4825      	ldr	r0, [pc, #148]	; (800ac24 <__d2b+0xb0>)
 800ab90:	f240 310f 	movw	r1, #783	; 0x30f
 800ab94:	f001 fb68 	bl	800c268 <__assert_func>
 800ab98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aba0:	bb2d      	cbnz	r5, 800abee <__d2b+0x7a>
 800aba2:	9301      	str	r3, [sp, #4]
 800aba4:	f1b8 0300 	subs.w	r3, r8, #0
 800aba8:	d026      	beq.n	800abf8 <__d2b+0x84>
 800abaa:	4668      	mov	r0, sp
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	f7ff fd17 	bl	800a5e0 <__lo0bits>
 800abb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abb6:	b1e8      	cbz	r0, 800abf4 <__d2b+0x80>
 800abb8:	f1c0 0320 	rsb	r3, r0, #32
 800abbc:	fa02 f303 	lsl.w	r3, r2, r3
 800abc0:	430b      	orrs	r3, r1
 800abc2:	40c2      	lsrs	r2, r0
 800abc4:	6163      	str	r3, [r4, #20]
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	61a3      	str	r3, [r4, #24]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	bf14      	ite	ne
 800abd0:	2202      	movne	r2, #2
 800abd2:	2201      	moveq	r2, #1
 800abd4:	6122      	str	r2, [r4, #16]
 800abd6:	b1bd      	cbz	r5, 800ac08 <__d2b+0x94>
 800abd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abdc:	4405      	add	r5, r0
 800abde:	603d      	str	r5, [r7, #0]
 800abe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abe4:	6030      	str	r0, [r6, #0]
 800abe6:	4620      	mov	r0, r4
 800abe8:	b003      	add	sp, #12
 800abea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abf2:	e7d6      	b.n	800aba2 <__d2b+0x2e>
 800abf4:	6161      	str	r1, [r4, #20]
 800abf6:	e7e7      	b.n	800abc8 <__d2b+0x54>
 800abf8:	a801      	add	r0, sp, #4
 800abfa:	f7ff fcf1 	bl	800a5e0 <__lo0bits>
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	6163      	str	r3, [r4, #20]
 800ac02:	3020      	adds	r0, #32
 800ac04:	2201      	movs	r2, #1
 800ac06:	e7e5      	b.n	800abd4 <__d2b+0x60>
 800ac08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac10:	6038      	str	r0, [r7, #0]
 800ac12:	6918      	ldr	r0, [r3, #16]
 800ac14:	f7ff fcc4 	bl	800a5a0 <__hi0bits>
 800ac18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac1c:	e7e2      	b.n	800abe4 <__d2b+0x70>
 800ac1e:	bf00      	nop
 800ac20:	0800e245 	.word	0x0800e245
 800ac24:	0800e256 	.word	0x0800e256

0800ac28 <__ratio>:
 800ac28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	4688      	mov	r8, r1
 800ac2e:	4669      	mov	r1, sp
 800ac30:	4681      	mov	r9, r0
 800ac32:	f7ff ff55 	bl	800aae0 <__b2d>
 800ac36:	a901      	add	r1, sp, #4
 800ac38:	4640      	mov	r0, r8
 800ac3a:	ec55 4b10 	vmov	r4, r5, d0
 800ac3e:	f7ff ff4f 	bl	800aae0 <__b2d>
 800ac42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac4a:	eba3 0c02 	sub.w	ip, r3, r2
 800ac4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac58:	ec51 0b10 	vmov	r0, r1, d0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfd6      	itet	le
 800ac60:	460a      	movle	r2, r1
 800ac62:	462a      	movgt	r2, r5
 800ac64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac68:	468b      	mov	fp, r1
 800ac6a:	462f      	mov	r7, r5
 800ac6c:	bfd4      	ite	le
 800ac6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac76:	4620      	mov	r0, r4
 800ac78:	ee10 2a10 	vmov	r2, s0
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 fdfc 	bl	800087c <__aeabi_ddiv>
 800ac84:	ec41 0b10 	vmov	d0, r0, r1
 800ac88:	b003      	add	sp, #12
 800ac8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac8e <__copybits>:
 800ac8e:	3901      	subs	r1, #1
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	1149      	asrs	r1, r1, #5
 800ac94:	6914      	ldr	r4, [r2, #16]
 800ac96:	3101      	adds	r1, #1
 800ac98:	f102 0314 	add.w	r3, r2, #20
 800ac9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aca4:	1f05      	subs	r5, r0, #4
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	d30c      	bcc.n	800acc4 <__copybits+0x36>
 800acaa:	1aa3      	subs	r3, r4, r2
 800acac:	3b11      	subs	r3, #17
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	3211      	adds	r2, #17
 800acb4:	42a2      	cmp	r2, r4
 800acb6:	bf88      	it	hi
 800acb8:	2300      	movhi	r3, #0
 800acba:	4418      	add	r0, r3
 800acbc:	2300      	movs	r3, #0
 800acbe:	4288      	cmp	r0, r1
 800acc0:	d305      	bcc.n	800acce <__copybits+0x40>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	f853 6b04 	ldr.w	r6, [r3], #4
 800acc8:	f845 6f04 	str.w	r6, [r5, #4]!
 800accc:	e7eb      	b.n	800aca6 <__copybits+0x18>
 800acce:	f840 3b04 	str.w	r3, [r0], #4
 800acd2:	e7f4      	b.n	800acbe <__copybits+0x30>

0800acd4 <__any_on>:
 800acd4:	f100 0214 	add.w	r2, r0, #20
 800acd8:	6900      	ldr	r0, [r0, #16]
 800acda:	114b      	asrs	r3, r1, #5
 800acdc:	4298      	cmp	r0, r3
 800acde:	b510      	push	{r4, lr}
 800ace0:	db11      	blt.n	800ad06 <__any_on+0x32>
 800ace2:	dd0a      	ble.n	800acfa <__any_on+0x26>
 800ace4:	f011 011f 	ands.w	r1, r1, #31
 800ace8:	d007      	beq.n	800acfa <__any_on+0x26>
 800acea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acee:	fa24 f001 	lsr.w	r0, r4, r1
 800acf2:	fa00 f101 	lsl.w	r1, r0, r1
 800acf6:	428c      	cmp	r4, r1
 800acf8:	d10b      	bne.n	800ad12 <__any_on+0x3e>
 800acfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d803      	bhi.n	800ad0a <__any_on+0x36>
 800ad02:	2000      	movs	r0, #0
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	4603      	mov	r3, r0
 800ad08:	e7f7      	b.n	800acfa <__any_on+0x26>
 800ad0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d0f5      	beq.n	800acfe <__any_on+0x2a>
 800ad12:	2001      	movs	r0, #1
 800ad14:	e7f6      	b.n	800ad04 <__any_on+0x30>

0800ad16 <sulp>:
 800ad16:	b570      	push	{r4, r5, r6, lr}
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	ec45 4b10 	vmov	d0, r4, r5
 800ad20:	4616      	mov	r6, r2
 800ad22:	f7ff feb7 	bl	800aa94 <__ulp>
 800ad26:	ec51 0b10 	vmov	r0, r1, d0
 800ad2a:	b17e      	cbz	r6, 800ad4c <sulp+0x36>
 800ad2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd09      	ble.n	800ad4c <sulp+0x36>
 800ad38:	051b      	lsls	r3, r3, #20
 800ad3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad3e:	2400      	movs	r4, #0
 800ad40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad44:	4622      	mov	r2, r4
 800ad46:	462b      	mov	r3, r5
 800ad48:	f7f5 fc6e 	bl	8000628 <__aeabi_dmul>
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad50 <_strtod_l>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	ed2d 8b02 	vpush	{d8}
 800ad58:	b09b      	sub	sp, #108	; 0x6c
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad5e:	2200      	movs	r2, #0
 800ad60:	9216      	str	r2, [sp, #88]	; 0x58
 800ad62:	460d      	mov	r5, r1
 800ad64:	f04f 0800 	mov.w	r8, #0
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	460a      	mov	r2, r1
 800ad6e:	9215      	str	r2, [sp, #84]	; 0x54
 800ad70:	7811      	ldrb	r1, [r2, #0]
 800ad72:	292b      	cmp	r1, #43	; 0x2b
 800ad74:	d04c      	beq.n	800ae10 <_strtod_l+0xc0>
 800ad76:	d83a      	bhi.n	800adee <_strtod_l+0x9e>
 800ad78:	290d      	cmp	r1, #13
 800ad7a:	d834      	bhi.n	800ade6 <_strtod_l+0x96>
 800ad7c:	2908      	cmp	r1, #8
 800ad7e:	d834      	bhi.n	800adea <_strtod_l+0x9a>
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d03d      	beq.n	800ae00 <_strtod_l+0xb0>
 800ad84:	2200      	movs	r2, #0
 800ad86:	920a      	str	r2, [sp, #40]	; 0x28
 800ad88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ad8a:	7832      	ldrb	r2, [r6, #0]
 800ad8c:	2a30      	cmp	r2, #48	; 0x30
 800ad8e:	f040 80b4 	bne.w	800aefa <_strtod_l+0x1aa>
 800ad92:	7872      	ldrb	r2, [r6, #1]
 800ad94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ad98:	2a58      	cmp	r2, #88	; 0x58
 800ad9a:	d170      	bne.n	800ae7e <_strtod_l+0x12e>
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	ab16      	add	r3, sp, #88	; 0x58
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4a8e      	ldr	r2, [pc, #568]	; (800afe0 <_strtod_l+0x290>)
 800ada8:	ab17      	add	r3, sp, #92	; 0x5c
 800adaa:	a915      	add	r1, sp, #84	; 0x54
 800adac:	4620      	mov	r0, r4
 800adae:	f001 faf7 	bl	800c3a0 <__gethex>
 800adb2:	f010 070f 	ands.w	r7, r0, #15
 800adb6:	4605      	mov	r5, r0
 800adb8:	d005      	beq.n	800adc6 <_strtod_l+0x76>
 800adba:	2f06      	cmp	r7, #6
 800adbc:	d12a      	bne.n	800ae14 <_strtod_l+0xc4>
 800adbe:	3601      	adds	r6, #1
 800adc0:	2300      	movs	r3, #0
 800adc2:	9615      	str	r6, [sp, #84]	; 0x54
 800adc4:	930a      	str	r3, [sp, #40]	; 0x28
 800adc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f040 857f 	bne.w	800b8cc <_strtod_l+0xb7c>
 800adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add0:	b1db      	cbz	r3, 800ae0a <_strtod_l+0xba>
 800add2:	4642      	mov	r2, r8
 800add4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800add8:	ec43 2b10 	vmov	d0, r2, r3
 800addc:	b01b      	add	sp, #108	; 0x6c
 800adde:	ecbd 8b02 	vpop	{d8}
 800ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade6:	2920      	cmp	r1, #32
 800ade8:	d1cc      	bne.n	800ad84 <_strtod_l+0x34>
 800adea:	3201      	adds	r2, #1
 800adec:	e7bf      	b.n	800ad6e <_strtod_l+0x1e>
 800adee:	292d      	cmp	r1, #45	; 0x2d
 800adf0:	d1c8      	bne.n	800ad84 <_strtod_l+0x34>
 800adf2:	2101      	movs	r1, #1
 800adf4:	910a      	str	r1, [sp, #40]	; 0x28
 800adf6:	1c51      	adds	r1, r2, #1
 800adf8:	9115      	str	r1, [sp, #84]	; 0x54
 800adfa:	7852      	ldrb	r2, [r2, #1]
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d1c3      	bne.n	800ad88 <_strtod_l+0x38>
 800ae00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae02:	9515      	str	r5, [sp, #84]	; 0x54
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f040 855f 	bne.w	800b8c8 <_strtod_l+0xb78>
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	e7e3      	b.n	800add8 <_strtod_l+0x88>
 800ae10:	2100      	movs	r1, #0
 800ae12:	e7ef      	b.n	800adf4 <_strtod_l+0xa4>
 800ae14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae16:	b13a      	cbz	r2, 800ae28 <_strtod_l+0xd8>
 800ae18:	2135      	movs	r1, #53	; 0x35
 800ae1a:	a818      	add	r0, sp, #96	; 0x60
 800ae1c:	f7ff ff37 	bl	800ac8e <__copybits>
 800ae20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fb0a 	bl	800a43c <_Bfree>
 800ae28:	3f01      	subs	r7, #1
 800ae2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae2c:	2f04      	cmp	r7, #4
 800ae2e:	d806      	bhi.n	800ae3e <_strtod_l+0xee>
 800ae30:	e8df f007 	tbb	[pc, r7]
 800ae34:	201d0314 	.word	0x201d0314
 800ae38:	14          	.byte	0x14
 800ae39:	00          	.byte	0x00
 800ae3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ae3e:	05e9      	lsls	r1, r5, #23
 800ae40:	bf48      	it	mi
 800ae42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ae46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae4a:	0d1b      	lsrs	r3, r3, #20
 800ae4c:	051b      	lsls	r3, r3, #20
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1b9      	bne.n	800adc6 <_strtod_l+0x76>
 800ae52:	f7fe faf7 	bl	8009444 <__errno>
 800ae56:	2322      	movs	r3, #34	; 0x22
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	e7b4      	b.n	800adc6 <_strtod_l+0x76>
 800ae5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ae60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ae6c:	e7e7      	b.n	800ae3e <_strtod_l+0xee>
 800ae6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800afe8 <_strtod_l+0x298>
 800ae72:	e7e4      	b.n	800ae3e <_strtod_l+0xee>
 800ae74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ae78:	f04f 38ff 	mov.w	r8, #4294967295
 800ae7c:	e7df      	b.n	800ae3e <_strtod_l+0xee>
 800ae7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	9215      	str	r2, [sp, #84]	; 0x54
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	2b30      	cmp	r3, #48	; 0x30
 800ae88:	d0f9      	beq.n	800ae7e <_strtod_l+0x12e>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d09b      	beq.n	800adc6 <_strtod_l+0x76>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f04f 0a00 	mov.w	sl, #0
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ae9e:	46d3      	mov	fp, sl
 800aea0:	220a      	movs	r2, #10
 800aea2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800aea4:	7806      	ldrb	r6, [r0, #0]
 800aea6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aeaa:	b2d9      	uxtb	r1, r3
 800aeac:	2909      	cmp	r1, #9
 800aeae:	d926      	bls.n	800aefe <_strtod_l+0x1ae>
 800aeb0:	494c      	ldr	r1, [pc, #304]	; (800afe4 <_strtod_l+0x294>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f001 f98c 	bl	800c1d0 <strncmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d030      	beq.n	800af1e <_strtod_l+0x1ce>
 800aebc:	2000      	movs	r0, #0
 800aebe:	4632      	mov	r2, r6
 800aec0:	9005      	str	r0, [sp, #20]
 800aec2:	465e      	mov	r6, fp
 800aec4:	4603      	mov	r3, r0
 800aec6:	2a65      	cmp	r2, #101	; 0x65
 800aec8:	d001      	beq.n	800aece <_strtod_l+0x17e>
 800aeca:	2a45      	cmp	r2, #69	; 0x45
 800aecc:	d113      	bne.n	800aef6 <_strtod_l+0x1a6>
 800aece:	b91e      	cbnz	r6, 800aed8 <_strtod_l+0x188>
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	4302      	orrs	r2, r0
 800aed4:	d094      	beq.n	800ae00 <_strtod_l+0xb0>
 800aed6:	2600      	movs	r6, #0
 800aed8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800aeda:	1c6a      	adds	r2, r5, #1
 800aedc:	9215      	str	r2, [sp, #84]	; 0x54
 800aede:	786a      	ldrb	r2, [r5, #1]
 800aee0:	2a2b      	cmp	r2, #43	; 0x2b
 800aee2:	d074      	beq.n	800afce <_strtod_l+0x27e>
 800aee4:	2a2d      	cmp	r2, #45	; 0x2d
 800aee6:	d078      	beq.n	800afda <_strtod_l+0x28a>
 800aee8:	f04f 0c00 	mov.w	ip, #0
 800aeec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aef0:	2909      	cmp	r1, #9
 800aef2:	d97f      	bls.n	800aff4 <_strtod_l+0x2a4>
 800aef4:	9515      	str	r5, [sp, #84]	; 0x54
 800aef6:	2700      	movs	r7, #0
 800aef8:	e09e      	b.n	800b038 <_strtod_l+0x2e8>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e7c8      	b.n	800ae90 <_strtod_l+0x140>
 800aefe:	f1bb 0f08 	cmp.w	fp, #8
 800af02:	bfd8      	it	le
 800af04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800af06:	f100 0001 	add.w	r0, r0, #1
 800af0a:	bfda      	itte	le
 800af0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800af10:	9309      	strle	r3, [sp, #36]	; 0x24
 800af12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800af16:	f10b 0b01 	add.w	fp, fp, #1
 800af1a:	9015      	str	r0, [sp, #84]	; 0x54
 800af1c:	e7c1      	b.n	800aea2 <_strtod_l+0x152>
 800af1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	9215      	str	r2, [sp, #84]	; 0x54
 800af24:	785a      	ldrb	r2, [r3, #1]
 800af26:	f1bb 0f00 	cmp.w	fp, #0
 800af2a:	d037      	beq.n	800af9c <_strtod_l+0x24c>
 800af2c:	9005      	str	r0, [sp, #20]
 800af2e:	465e      	mov	r6, fp
 800af30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af34:	2b09      	cmp	r3, #9
 800af36:	d912      	bls.n	800af5e <_strtod_l+0x20e>
 800af38:	2301      	movs	r3, #1
 800af3a:	e7c4      	b.n	800aec6 <_strtod_l+0x176>
 800af3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	9215      	str	r2, [sp, #84]	; 0x54
 800af42:	785a      	ldrb	r2, [r3, #1]
 800af44:	3001      	adds	r0, #1
 800af46:	2a30      	cmp	r2, #48	; 0x30
 800af48:	d0f8      	beq.n	800af3c <_strtod_l+0x1ec>
 800af4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af4e:	2b08      	cmp	r3, #8
 800af50:	f200 84c1 	bhi.w	800b8d6 <_strtod_l+0xb86>
 800af54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af56:	9005      	str	r0, [sp, #20]
 800af58:	2000      	movs	r0, #0
 800af5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af5c:	4606      	mov	r6, r0
 800af5e:	3a30      	subs	r2, #48	; 0x30
 800af60:	f100 0301 	add.w	r3, r0, #1
 800af64:	d014      	beq.n	800af90 <_strtod_l+0x240>
 800af66:	9905      	ldr	r1, [sp, #20]
 800af68:	4419      	add	r1, r3
 800af6a:	9105      	str	r1, [sp, #20]
 800af6c:	4633      	mov	r3, r6
 800af6e:	eb00 0c06 	add.w	ip, r0, r6
 800af72:	210a      	movs	r1, #10
 800af74:	4563      	cmp	r3, ip
 800af76:	d113      	bne.n	800afa0 <_strtod_l+0x250>
 800af78:	1833      	adds	r3, r6, r0
 800af7a:	2b08      	cmp	r3, #8
 800af7c:	f106 0601 	add.w	r6, r6, #1
 800af80:	4406      	add	r6, r0
 800af82:	dc1a      	bgt.n	800afba <_strtod_l+0x26a>
 800af84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af86:	230a      	movs	r3, #10
 800af88:	fb03 2301 	mla	r3, r3, r1, r2
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	2300      	movs	r3, #0
 800af90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af92:	1c51      	adds	r1, r2, #1
 800af94:	9115      	str	r1, [sp, #84]	; 0x54
 800af96:	7852      	ldrb	r2, [r2, #1]
 800af98:	4618      	mov	r0, r3
 800af9a:	e7c9      	b.n	800af30 <_strtod_l+0x1e0>
 800af9c:	4658      	mov	r0, fp
 800af9e:	e7d2      	b.n	800af46 <_strtod_l+0x1f6>
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	f103 0301 	add.w	r3, r3, #1
 800afa6:	dc03      	bgt.n	800afb0 <_strtod_l+0x260>
 800afa8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afaa:	434f      	muls	r7, r1
 800afac:	9709      	str	r7, [sp, #36]	; 0x24
 800afae:	e7e1      	b.n	800af74 <_strtod_l+0x224>
 800afb0:	2b10      	cmp	r3, #16
 800afb2:	bfd8      	it	le
 800afb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800afb8:	e7dc      	b.n	800af74 <_strtod_l+0x224>
 800afba:	2e10      	cmp	r6, #16
 800afbc:	bfdc      	itt	le
 800afbe:	230a      	movle	r3, #10
 800afc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800afc4:	e7e3      	b.n	800af8e <_strtod_l+0x23e>
 800afc6:	2300      	movs	r3, #0
 800afc8:	9305      	str	r3, [sp, #20]
 800afca:	2301      	movs	r3, #1
 800afcc:	e780      	b.n	800aed0 <_strtod_l+0x180>
 800afce:	f04f 0c00 	mov.w	ip, #0
 800afd2:	1caa      	adds	r2, r5, #2
 800afd4:	9215      	str	r2, [sp, #84]	; 0x54
 800afd6:	78aa      	ldrb	r2, [r5, #2]
 800afd8:	e788      	b.n	800aeec <_strtod_l+0x19c>
 800afda:	f04f 0c01 	mov.w	ip, #1
 800afde:	e7f8      	b.n	800afd2 <_strtod_l+0x282>
 800afe0:	0800e3b0 	.word	0x0800e3b0
 800afe4:	0800e3ac 	.word	0x0800e3ac
 800afe8:	7ff00000 	.word	0x7ff00000
 800afec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afee:	1c51      	adds	r1, r2, #1
 800aff0:	9115      	str	r1, [sp, #84]	; 0x54
 800aff2:	7852      	ldrb	r2, [r2, #1]
 800aff4:	2a30      	cmp	r2, #48	; 0x30
 800aff6:	d0f9      	beq.n	800afec <_strtod_l+0x29c>
 800aff8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800affc:	2908      	cmp	r1, #8
 800affe:	f63f af7a 	bhi.w	800aef6 <_strtod_l+0x1a6>
 800b002:	3a30      	subs	r2, #48	; 0x30
 800b004:	9208      	str	r2, [sp, #32]
 800b006:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b008:	920c      	str	r2, [sp, #48]	; 0x30
 800b00a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b00c:	1c57      	adds	r7, r2, #1
 800b00e:	9715      	str	r7, [sp, #84]	; 0x54
 800b010:	7852      	ldrb	r2, [r2, #1]
 800b012:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b016:	f1be 0f09 	cmp.w	lr, #9
 800b01a:	d938      	bls.n	800b08e <_strtod_l+0x33e>
 800b01c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b01e:	1a7f      	subs	r7, r7, r1
 800b020:	2f08      	cmp	r7, #8
 800b022:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b026:	dc03      	bgt.n	800b030 <_strtod_l+0x2e0>
 800b028:	9908      	ldr	r1, [sp, #32]
 800b02a:	428f      	cmp	r7, r1
 800b02c:	bfa8      	it	ge
 800b02e:	460f      	movge	r7, r1
 800b030:	f1bc 0f00 	cmp.w	ip, #0
 800b034:	d000      	beq.n	800b038 <_strtod_l+0x2e8>
 800b036:	427f      	negs	r7, r7
 800b038:	2e00      	cmp	r6, #0
 800b03a:	d14f      	bne.n	800b0dc <_strtod_l+0x38c>
 800b03c:	9904      	ldr	r1, [sp, #16]
 800b03e:	4301      	orrs	r1, r0
 800b040:	f47f aec1 	bne.w	800adc6 <_strtod_l+0x76>
 800b044:	2b00      	cmp	r3, #0
 800b046:	f47f aedb 	bne.w	800ae00 <_strtod_l+0xb0>
 800b04a:	2a69      	cmp	r2, #105	; 0x69
 800b04c:	d029      	beq.n	800b0a2 <_strtod_l+0x352>
 800b04e:	dc26      	bgt.n	800b09e <_strtod_l+0x34e>
 800b050:	2a49      	cmp	r2, #73	; 0x49
 800b052:	d026      	beq.n	800b0a2 <_strtod_l+0x352>
 800b054:	2a4e      	cmp	r2, #78	; 0x4e
 800b056:	f47f aed3 	bne.w	800ae00 <_strtod_l+0xb0>
 800b05a:	499b      	ldr	r1, [pc, #620]	; (800b2c8 <_strtod_l+0x578>)
 800b05c:	a815      	add	r0, sp, #84	; 0x54
 800b05e:	f001 fbdf 	bl	800c820 <__match>
 800b062:	2800      	cmp	r0, #0
 800b064:	f43f aecc 	beq.w	800ae00 <_strtod_l+0xb0>
 800b068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b28      	cmp	r3, #40	; 0x28
 800b06e:	d12f      	bne.n	800b0d0 <_strtod_l+0x380>
 800b070:	4996      	ldr	r1, [pc, #600]	; (800b2cc <_strtod_l+0x57c>)
 800b072:	aa18      	add	r2, sp, #96	; 0x60
 800b074:	a815      	add	r0, sp, #84	; 0x54
 800b076:	f001 fbe7 	bl	800c848 <__hexnan>
 800b07a:	2805      	cmp	r0, #5
 800b07c:	d128      	bne.n	800b0d0 <_strtod_l+0x380>
 800b07e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b084:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b088:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b08c:	e69b      	b.n	800adc6 <_strtod_l+0x76>
 800b08e:	9f08      	ldr	r7, [sp, #32]
 800b090:	210a      	movs	r1, #10
 800b092:	fb01 2107 	mla	r1, r1, r7, r2
 800b096:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b09a:	9208      	str	r2, [sp, #32]
 800b09c:	e7b5      	b.n	800b00a <_strtod_l+0x2ba>
 800b09e:	2a6e      	cmp	r2, #110	; 0x6e
 800b0a0:	e7d9      	b.n	800b056 <_strtod_l+0x306>
 800b0a2:	498b      	ldr	r1, [pc, #556]	; (800b2d0 <_strtod_l+0x580>)
 800b0a4:	a815      	add	r0, sp, #84	; 0x54
 800b0a6:	f001 fbbb 	bl	800c820 <__match>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f aea8 	beq.w	800ae00 <_strtod_l+0xb0>
 800b0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0b2:	4988      	ldr	r1, [pc, #544]	; (800b2d4 <_strtod_l+0x584>)
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	a815      	add	r0, sp, #84	; 0x54
 800b0b8:	9315      	str	r3, [sp, #84]	; 0x54
 800b0ba:	f001 fbb1 	bl	800c820 <__match>
 800b0be:	b910      	cbnz	r0, 800b0c6 <_strtod_l+0x376>
 800b0c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9315      	str	r3, [sp, #84]	; 0x54
 800b0c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b2e4 <_strtod_l+0x594>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	e67a      	b.n	800adc6 <_strtod_l+0x76>
 800b0d0:	4881      	ldr	r0, [pc, #516]	; (800b2d8 <_strtod_l+0x588>)
 800b0d2:	f001 f8c1 	bl	800c258 <nan>
 800b0d6:	ec59 8b10 	vmov	r8, r9, d0
 800b0da:	e674      	b.n	800adc6 <_strtod_l+0x76>
 800b0dc:	9b05      	ldr	r3, [sp, #20]
 800b0de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e0:	1afb      	subs	r3, r7, r3
 800b0e2:	f1bb 0f00 	cmp.w	fp, #0
 800b0e6:	bf08      	it	eq
 800b0e8:	46b3      	moveq	fp, r6
 800b0ea:	2e10      	cmp	r6, #16
 800b0ec:	9308      	str	r3, [sp, #32]
 800b0ee:	4635      	mov	r5, r6
 800b0f0:	bfa8      	it	ge
 800b0f2:	2510      	movge	r5, #16
 800b0f4:	f7f5 fa1e 	bl	8000534 <__aeabi_ui2d>
 800b0f8:	2e09      	cmp	r6, #9
 800b0fa:	4680      	mov	r8, r0
 800b0fc:	4689      	mov	r9, r1
 800b0fe:	dd13      	ble.n	800b128 <_strtod_l+0x3d8>
 800b100:	4b76      	ldr	r3, [pc, #472]	; (800b2dc <_strtod_l+0x58c>)
 800b102:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b106:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b10a:	f7f5 fa8d 	bl	8000628 <__aeabi_dmul>
 800b10e:	4680      	mov	r8, r0
 800b110:	4650      	mov	r0, sl
 800b112:	4689      	mov	r9, r1
 800b114:	f7f5 fa0e 	bl	8000534 <__aeabi_ui2d>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4640      	mov	r0, r8
 800b11e:	4649      	mov	r1, r9
 800b120:	f7f5 f8cc 	bl	80002bc <__adddf3>
 800b124:	4680      	mov	r8, r0
 800b126:	4689      	mov	r9, r1
 800b128:	2e0f      	cmp	r6, #15
 800b12a:	dc38      	bgt.n	800b19e <_strtod_l+0x44e>
 800b12c:	9b08      	ldr	r3, [sp, #32]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f43f ae49 	beq.w	800adc6 <_strtod_l+0x76>
 800b134:	dd24      	ble.n	800b180 <_strtod_l+0x430>
 800b136:	2b16      	cmp	r3, #22
 800b138:	dc0b      	bgt.n	800b152 <_strtod_l+0x402>
 800b13a:	4968      	ldr	r1, [pc, #416]	; (800b2dc <_strtod_l+0x58c>)
 800b13c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b144:	4642      	mov	r2, r8
 800b146:	464b      	mov	r3, r9
 800b148:	f7f5 fa6e 	bl	8000628 <__aeabi_dmul>
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	e639      	b.n	800adc6 <_strtod_l+0x76>
 800b152:	9a08      	ldr	r2, [sp, #32]
 800b154:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b158:	4293      	cmp	r3, r2
 800b15a:	db20      	blt.n	800b19e <_strtod_l+0x44e>
 800b15c:	4c5f      	ldr	r4, [pc, #380]	; (800b2dc <_strtod_l+0x58c>)
 800b15e:	f1c6 060f 	rsb	r6, r6, #15
 800b162:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b166:	4642      	mov	r2, r8
 800b168:	464b      	mov	r3, r9
 800b16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b16e:	f7f5 fa5b 	bl	8000628 <__aeabi_dmul>
 800b172:	9b08      	ldr	r3, [sp, #32]
 800b174:	1b9e      	subs	r6, r3, r6
 800b176:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b17a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b17e:	e7e3      	b.n	800b148 <_strtod_l+0x3f8>
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	3316      	adds	r3, #22
 800b184:	db0b      	blt.n	800b19e <_strtod_l+0x44e>
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	1bdf      	subs	r7, r3, r7
 800b18a:	4b54      	ldr	r3, [pc, #336]	; (800b2dc <_strtod_l+0x58c>)
 800b18c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b194:	4640      	mov	r0, r8
 800b196:	4649      	mov	r1, r9
 800b198:	f7f5 fb70 	bl	800087c <__aeabi_ddiv>
 800b19c:	e7d6      	b.n	800b14c <_strtod_l+0x3fc>
 800b19e:	9b08      	ldr	r3, [sp, #32]
 800b1a0:	1b75      	subs	r5, r6, r5
 800b1a2:	441d      	add	r5, r3
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	dd70      	ble.n	800b28a <_strtod_l+0x53a>
 800b1a8:	f015 030f 	ands.w	r3, r5, #15
 800b1ac:	d00a      	beq.n	800b1c4 <_strtod_l+0x474>
 800b1ae:	494b      	ldr	r1, [pc, #300]	; (800b2dc <_strtod_l+0x58c>)
 800b1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1b4:	4642      	mov	r2, r8
 800b1b6:	464b      	mov	r3, r9
 800b1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1bc:	f7f5 fa34 	bl	8000628 <__aeabi_dmul>
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	4689      	mov	r9, r1
 800b1c4:	f035 050f 	bics.w	r5, r5, #15
 800b1c8:	d04d      	beq.n	800b266 <_strtod_l+0x516>
 800b1ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b1ce:	dd22      	ble.n	800b216 <_strtod_l+0x4c6>
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	46ab      	mov	fp, r5
 800b1d4:	9509      	str	r5, [sp, #36]	; 0x24
 800b1d6:	9505      	str	r5, [sp, #20]
 800b1d8:	2322      	movs	r3, #34	; 0x22
 800b1da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b2e4 <_strtod_l+0x594>
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	f04f 0800 	mov.w	r8, #0
 800b1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f43f aded 	beq.w	800adc6 <_strtod_l+0x76>
 800b1ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f7ff f924 	bl	800a43c <_Bfree>
 800b1f4:	9905      	ldr	r1, [sp, #20]
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7ff f920 	bl	800a43c <_Bfree>
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7ff f91c 	bl	800a43c <_Bfree>
 800b204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b206:	4620      	mov	r0, r4
 800b208:	f7ff f918 	bl	800a43c <_Bfree>
 800b20c:	4629      	mov	r1, r5
 800b20e:	4620      	mov	r0, r4
 800b210:	f7ff f914 	bl	800a43c <_Bfree>
 800b214:	e5d7      	b.n	800adc6 <_strtod_l+0x76>
 800b216:	4b32      	ldr	r3, [pc, #200]	; (800b2e0 <_strtod_l+0x590>)
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	2300      	movs	r3, #0
 800b21c:	112d      	asrs	r5, r5, #4
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	469a      	mov	sl, r3
 800b224:	2d01      	cmp	r5, #1
 800b226:	dc21      	bgt.n	800b26c <_strtod_l+0x51c>
 800b228:	b10b      	cbz	r3, 800b22e <_strtod_l+0x4de>
 800b22a:	4680      	mov	r8, r0
 800b22c:	4689      	mov	r9, r1
 800b22e:	492c      	ldr	r1, [pc, #176]	; (800b2e0 <_strtod_l+0x590>)
 800b230:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b234:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b238:	4642      	mov	r2, r8
 800b23a:	464b      	mov	r3, r9
 800b23c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b240:	f7f5 f9f2 	bl	8000628 <__aeabi_dmul>
 800b244:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <_strtod_l+0x594>)
 800b246:	460a      	mov	r2, r1
 800b248:	400b      	ands	r3, r1
 800b24a:	4927      	ldr	r1, [pc, #156]	; (800b2e8 <_strtod_l+0x598>)
 800b24c:	428b      	cmp	r3, r1
 800b24e:	4680      	mov	r8, r0
 800b250:	d8be      	bhi.n	800b1d0 <_strtod_l+0x480>
 800b252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b256:	428b      	cmp	r3, r1
 800b258:	bf86      	itte	hi
 800b25a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b2ec <_strtod_l+0x59c>
 800b25e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b262:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b266:	2300      	movs	r3, #0
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	e07b      	b.n	800b364 <_strtod_l+0x614>
 800b26c:	07ea      	lsls	r2, r5, #31
 800b26e:	d505      	bpl.n	800b27c <_strtod_l+0x52c>
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f7f5 f9d7 	bl	8000628 <__aeabi_dmul>
 800b27a:	2301      	movs	r3, #1
 800b27c:	9a04      	ldr	r2, [sp, #16]
 800b27e:	3208      	adds	r2, #8
 800b280:	f10a 0a01 	add.w	sl, sl, #1
 800b284:	106d      	asrs	r5, r5, #1
 800b286:	9204      	str	r2, [sp, #16]
 800b288:	e7cc      	b.n	800b224 <_strtod_l+0x4d4>
 800b28a:	d0ec      	beq.n	800b266 <_strtod_l+0x516>
 800b28c:	426d      	negs	r5, r5
 800b28e:	f015 020f 	ands.w	r2, r5, #15
 800b292:	d00a      	beq.n	800b2aa <_strtod_l+0x55a>
 800b294:	4b11      	ldr	r3, [pc, #68]	; (800b2dc <_strtod_l+0x58c>)
 800b296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f5 faeb 	bl	800087c <__aeabi_ddiv>
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	4689      	mov	r9, r1
 800b2aa:	112d      	asrs	r5, r5, #4
 800b2ac:	d0db      	beq.n	800b266 <_strtod_l+0x516>
 800b2ae:	2d1f      	cmp	r5, #31
 800b2b0:	dd1e      	ble.n	800b2f0 <_strtod_l+0x5a0>
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	46ab      	mov	fp, r5
 800b2b6:	9509      	str	r5, [sp, #36]	; 0x24
 800b2b8:	9505      	str	r5, [sp, #20]
 800b2ba:	2322      	movs	r3, #34	; 0x22
 800b2bc:	f04f 0800 	mov.w	r8, #0
 800b2c0:	f04f 0900 	mov.w	r9, #0
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	e78d      	b.n	800b1e4 <_strtod_l+0x494>
 800b2c8:	0800e19d 	.word	0x0800e19d
 800b2cc:	0800e3c4 	.word	0x0800e3c4
 800b2d0:	0800e195 	.word	0x0800e195
 800b2d4:	0800e1cc 	.word	0x0800e1cc
 800b2d8:	0800e555 	.word	0x0800e555
 800b2dc:	0800e2d8 	.word	0x0800e2d8
 800b2e0:	0800e2b0 	.word	0x0800e2b0
 800b2e4:	7ff00000 	.word	0x7ff00000
 800b2e8:	7ca00000 	.word	0x7ca00000
 800b2ec:	7fefffff 	.word	0x7fefffff
 800b2f0:	f015 0310 	ands.w	r3, r5, #16
 800b2f4:	bf18      	it	ne
 800b2f6:	236a      	movne	r3, #106	; 0x6a
 800b2f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b69c <_strtod_l+0x94c>
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	2300      	movs	r3, #0
 800b304:	07ea      	lsls	r2, r5, #31
 800b306:	d504      	bpl.n	800b312 <_strtod_l+0x5c2>
 800b308:	e9da 2300 	ldrd	r2, r3, [sl]
 800b30c:	f7f5 f98c 	bl	8000628 <__aeabi_dmul>
 800b310:	2301      	movs	r3, #1
 800b312:	106d      	asrs	r5, r5, #1
 800b314:	f10a 0a08 	add.w	sl, sl, #8
 800b318:	d1f4      	bne.n	800b304 <_strtod_l+0x5b4>
 800b31a:	b10b      	cbz	r3, 800b320 <_strtod_l+0x5d0>
 800b31c:	4680      	mov	r8, r0
 800b31e:	4689      	mov	r9, r1
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	b1bb      	cbz	r3, 800b354 <_strtod_l+0x604>
 800b324:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b328:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	4649      	mov	r1, r9
 800b330:	dd10      	ble.n	800b354 <_strtod_l+0x604>
 800b332:	2b1f      	cmp	r3, #31
 800b334:	f340 811e 	ble.w	800b574 <_strtod_l+0x824>
 800b338:	2b34      	cmp	r3, #52	; 0x34
 800b33a:	bfde      	ittt	le
 800b33c:	f04f 33ff 	movle.w	r3, #4294967295
 800b340:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b344:	4093      	lslle	r3, r2
 800b346:	f04f 0800 	mov.w	r8, #0
 800b34a:	bfcc      	ite	gt
 800b34c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b350:	ea03 0901 	andle.w	r9, r3, r1
 800b354:	2200      	movs	r2, #0
 800b356:	2300      	movs	r3, #0
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	f7f5 fbcc 	bl	8000af8 <__aeabi_dcmpeq>
 800b360:	2800      	cmp	r0, #0
 800b362:	d1a6      	bne.n	800b2b2 <_strtod_l+0x562>
 800b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b36a:	4633      	mov	r3, r6
 800b36c:	465a      	mov	r2, fp
 800b36e:	4620      	mov	r0, r4
 800b370:	f7ff f8cc 	bl	800a50c <__s2b>
 800b374:	9009      	str	r0, [sp, #36]	; 0x24
 800b376:	2800      	cmp	r0, #0
 800b378:	f43f af2a 	beq.w	800b1d0 <_strtod_l+0x480>
 800b37c:	9a08      	ldr	r2, [sp, #32]
 800b37e:	9b05      	ldr	r3, [sp, #20]
 800b380:	2a00      	cmp	r2, #0
 800b382:	eba3 0307 	sub.w	r3, r3, r7
 800b386:	bfa8      	it	ge
 800b388:	2300      	movge	r3, #0
 800b38a:	930c      	str	r3, [sp, #48]	; 0x30
 800b38c:	2500      	movs	r5, #0
 800b38e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b392:	9312      	str	r3, [sp, #72]	; 0x48
 800b394:	46ab      	mov	fp, r5
 800b396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b398:	4620      	mov	r0, r4
 800b39a:	6859      	ldr	r1, [r3, #4]
 800b39c:	f7ff f80e 	bl	800a3bc <_Balloc>
 800b3a0:	9005      	str	r0, [sp, #20]
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	f43f af18 	beq.w	800b1d8 <_strtod_l+0x488>
 800b3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3aa:	691a      	ldr	r2, [r3, #16]
 800b3ac:	3202      	adds	r2, #2
 800b3ae:	f103 010c 	add.w	r1, r3, #12
 800b3b2:	0092      	lsls	r2, r2, #2
 800b3b4:	300c      	adds	r0, #12
 800b3b6:	f7fe f872 	bl	800949e <memcpy>
 800b3ba:	ec49 8b10 	vmov	d0, r8, r9
 800b3be:	aa18      	add	r2, sp, #96	; 0x60
 800b3c0:	a917      	add	r1, sp, #92	; 0x5c
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f7ff fbd6 	bl	800ab74 <__d2b>
 800b3c8:	ec49 8b18 	vmov	d8, r8, r9
 800b3cc:	9016      	str	r0, [sp, #88]	; 0x58
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f43f af02 	beq.w	800b1d8 <_strtod_l+0x488>
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff f930 	bl	800a63c <__i2b>
 800b3dc:	4683      	mov	fp, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f43f aefa 	beq.w	800b1d8 <_strtod_l+0x488>
 800b3e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b3e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	bfab      	itete	ge
 800b3ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b3ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b3f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b3f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b3f6:	bfac      	ite	ge
 800b3f8:	eb06 0a03 	addge.w	sl, r6, r3
 800b3fc:	1b9f      	sublt	r7, r3, r6
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	1af6      	subs	r6, r6, r3
 800b402:	4416      	add	r6, r2
 800b404:	4ba0      	ldr	r3, [pc, #640]	; (800b688 <_strtod_l+0x938>)
 800b406:	3e01      	subs	r6, #1
 800b408:	429e      	cmp	r6, r3
 800b40a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b40e:	f280 80c4 	bge.w	800b59a <_strtod_l+0x84a>
 800b412:	1b9b      	subs	r3, r3, r6
 800b414:	2b1f      	cmp	r3, #31
 800b416:	eba2 0203 	sub.w	r2, r2, r3
 800b41a:	f04f 0101 	mov.w	r1, #1
 800b41e:	f300 80b0 	bgt.w	800b582 <_strtod_l+0x832>
 800b422:	fa01 f303 	lsl.w	r3, r1, r3
 800b426:	930e      	str	r3, [sp, #56]	; 0x38
 800b428:	2300      	movs	r3, #0
 800b42a:	930d      	str	r3, [sp, #52]	; 0x34
 800b42c:	eb0a 0602 	add.w	r6, sl, r2
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	45b2      	cmp	sl, r6
 800b434:	4417      	add	r7, r2
 800b436:	441f      	add	r7, r3
 800b438:	4653      	mov	r3, sl
 800b43a:	bfa8      	it	ge
 800b43c:	4633      	movge	r3, r6
 800b43e:	42bb      	cmp	r3, r7
 800b440:	bfa8      	it	ge
 800b442:	463b      	movge	r3, r7
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfc2      	ittt	gt
 800b448:	1af6      	subgt	r6, r6, r3
 800b44a:	1aff      	subgt	r7, r7, r3
 800b44c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b452:	2b00      	cmp	r3, #0
 800b454:	dd17      	ble.n	800b486 <_strtod_l+0x736>
 800b456:	4659      	mov	r1, fp
 800b458:	461a      	mov	r2, r3
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff f9ae 	bl	800a7bc <__pow5mult>
 800b460:	4683      	mov	fp, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f aeb8 	beq.w	800b1d8 <_strtod_l+0x488>
 800b468:	4601      	mov	r1, r0
 800b46a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b46c:	4620      	mov	r0, r4
 800b46e:	f7ff f8fb 	bl	800a668 <__multiply>
 800b472:	900b      	str	r0, [sp, #44]	; 0x2c
 800b474:	2800      	cmp	r0, #0
 800b476:	f43f aeaf 	beq.w	800b1d8 <_strtod_l+0x488>
 800b47a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b47c:	4620      	mov	r0, r4
 800b47e:	f7fe ffdd 	bl	800a43c <_Bfree>
 800b482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b484:	9316      	str	r3, [sp, #88]	; 0x58
 800b486:	2e00      	cmp	r6, #0
 800b488:	f300 808c 	bgt.w	800b5a4 <_strtod_l+0x854>
 800b48c:	9b08      	ldr	r3, [sp, #32]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dd08      	ble.n	800b4a4 <_strtod_l+0x754>
 800b492:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b494:	9905      	ldr	r1, [sp, #20]
 800b496:	4620      	mov	r0, r4
 800b498:	f7ff f990 	bl	800a7bc <__pow5mult>
 800b49c:	9005      	str	r0, [sp, #20]
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f ae9a 	beq.w	800b1d8 <_strtod_l+0x488>
 800b4a4:	2f00      	cmp	r7, #0
 800b4a6:	dd08      	ble.n	800b4ba <_strtod_l+0x76a>
 800b4a8:	9905      	ldr	r1, [sp, #20]
 800b4aa:	463a      	mov	r2, r7
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7ff f9df 	bl	800a870 <__lshift>
 800b4b2:	9005      	str	r0, [sp, #20]
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f43f ae8f 	beq.w	800b1d8 <_strtod_l+0x488>
 800b4ba:	f1ba 0f00 	cmp.w	sl, #0
 800b4be:	dd08      	ble.n	800b4d2 <_strtod_l+0x782>
 800b4c0:	4659      	mov	r1, fp
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7ff f9d3 	bl	800a870 <__lshift>
 800b4ca:	4683      	mov	fp, r0
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f43f ae83 	beq.w	800b1d8 <_strtod_l+0x488>
 800b4d2:	9a05      	ldr	r2, [sp, #20]
 800b4d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7ff fa52 	bl	800a980 <__mdiff>
 800b4dc:	4605      	mov	r5, r0
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f43f ae7a 	beq.w	800b1d8 <_strtod_l+0x488>
 800b4e4:	68c3      	ldr	r3, [r0, #12]
 800b4e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60c3      	str	r3, [r0, #12]
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	f7ff fa2b 	bl	800a948 <__mcmp>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	da60      	bge.n	800b5b8 <_strtod_l+0x868>
 800b4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f8:	ea53 0308 	orrs.w	r3, r3, r8
 800b4fc:	f040 8084 	bne.w	800b608 <_strtod_l+0x8b8>
 800b500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b504:	2b00      	cmp	r3, #0
 800b506:	d17f      	bne.n	800b608 <_strtod_l+0x8b8>
 800b508:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b50c:	0d1b      	lsrs	r3, r3, #20
 800b50e:	051b      	lsls	r3, r3, #20
 800b510:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b514:	d978      	bls.n	800b608 <_strtod_l+0x8b8>
 800b516:	696b      	ldr	r3, [r5, #20]
 800b518:	b913      	cbnz	r3, 800b520 <_strtod_l+0x7d0>
 800b51a:	692b      	ldr	r3, [r5, #16]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	dd73      	ble.n	800b608 <_strtod_l+0x8b8>
 800b520:	4629      	mov	r1, r5
 800b522:	2201      	movs	r2, #1
 800b524:	4620      	mov	r0, r4
 800b526:	f7ff f9a3 	bl	800a870 <__lshift>
 800b52a:	4659      	mov	r1, fp
 800b52c:	4605      	mov	r5, r0
 800b52e:	f7ff fa0b 	bl	800a948 <__mcmp>
 800b532:	2800      	cmp	r0, #0
 800b534:	dd68      	ble.n	800b608 <_strtod_l+0x8b8>
 800b536:	9904      	ldr	r1, [sp, #16]
 800b538:	4a54      	ldr	r2, [pc, #336]	; (800b68c <_strtod_l+0x93c>)
 800b53a:	464b      	mov	r3, r9
 800b53c:	2900      	cmp	r1, #0
 800b53e:	f000 8084 	beq.w	800b64a <_strtod_l+0x8fa>
 800b542:	ea02 0109 	and.w	r1, r2, r9
 800b546:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b54a:	dc7e      	bgt.n	800b64a <_strtod_l+0x8fa>
 800b54c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b550:	f77f aeb3 	ble.w	800b2ba <_strtod_l+0x56a>
 800b554:	4b4e      	ldr	r3, [pc, #312]	; (800b690 <_strtod_l+0x940>)
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	2200      	movs	r2, #0
 800b55c:	f7f5 f864 	bl	8000628 <__aeabi_dmul>
 800b560:	4b4a      	ldr	r3, [pc, #296]	; (800b68c <_strtod_l+0x93c>)
 800b562:	400b      	ands	r3, r1
 800b564:	4680      	mov	r8, r0
 800b566:	4689      	mov	r9, r1
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f47f ae3f 	bne.w	800b1ec <_strtod_l+0x49c>
 800b56e:	2322      	movs	r3, #34	; 0x22
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	e63b      	b.n	800b1ec <_strtod_l+0x49c>
 800b574:	f04f 32ff 	mov.w	r2, #4294967295
 800b578:	fa02 f303 	lsl.w	r3, r2, r3
 800b57c:	ea03 0808 	and.w	r8, r3, r8
 800b580:	e6e8      	b.n	800b354 <_strtod_l+0x604>
 800b582:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b586:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b58a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b58e:	36e2      	adds	r6, #226	; 0xe2
 800b590:	fa01 f306 	lsl.w	r3, r1, r6
 800b594:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b598:	e748      	b.n	800b42c <_strtod_l+0x6dc>
 800b59a:	2100      	movs	r1, #0
 800b59c:	2301      	movs	r3, #1
 800b59e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b5a2:	e743      	b.n	800b42c <_strtod_l+0x6dc>
 800b5a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff f961 	bl	800a870 <__lshift>
 800b5ae:	9016      	str	r0, [sp, #88]	; 0x58
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f47f af6b 	bne.w	800b48c <_strtod_l+0x73c>
 800b5b6:	e60f      	b.n	800b1d8 <_strtod_l+0x488>
 800b5b8:	46ca      	mov	sl, r9
 800b5ba:	d171      	bne.n	800b6a0 <_strtod_l+0x950>
 800b5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5c2:	b352      	cbz	r2, 800b61a <_strtod_l+0x8ca>
 800b5c4:	4a33      	ldr	r2, [pc, #204]	; (800b694 <_strtod_l+0x944>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d12a      	bne.n	800b620 <_strtod_l+0x8d0>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	b1fb      	cbz	r3, 800b610 <_strtod_l+0x8c0>
 800b5d0:	4b2e      	ldr	r3, [pc, #184]	; (800b68c <_strtod_l+0x93c>)
 800b5d2:	ea09 0303 	and.w	r3, r9, r3
 800b5d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295
 800b5de:	d81a      	bhi.n	800b616 <_strtod_l+0x8c6>
 800b5e0:	0d1b      	lsrs	r3, r3, #20
 800b5e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	d118      	bne.n	800b620 <_strtod_l+0x8d0>
 800b5ee:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <_strtod_l+0x948>)
 800b5f0:	459a      	cmp	sl, r3
 800b5f2:	d102      	bne.n	800b5fa <_strtod_l+0x8aa>
 800b5f4:	3101      	adds	r1, #1
 800b5f6:	f43f adef 	beq.w	800b1d8 <_strtod_l+0x488>
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <_strtod_l+0x93c>)
 800b5fc:	ea0a 0303 	and.w	r3, sl, r3
 800b600:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b604:	f04f 0800 	mov.w	r8, #0
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1a2      	bne.n	800b554 <_strtod_l+0x804>
 800b60e:	e5ed      	b.n	800b1ec <_strtod_l+0x49c>
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	e7e9      	b.n	800b5ea <_strtod_l+0x89a>
 800b616:	4613      	mov	r3, r2
 800b618:	e7e7      	b.n	800b5ea <_strtod_l+0x89a>
 800b61a:	ea53 0308 	orrs.w	r3, r3, r8
 800b61e:	d08a      	beq.n	800b536 <_strtod_l+0x7e6>
 800b620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b622:	b1e3      	cbz	r3, 800b65e <_strtod_l+0x90e>
 800b624:	ea13 0f0a 	tst.w	r3, sl
 800b628:	d0ee      	beq.n	800b608 <_strtod_l+0x8b8>
 800b62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b62c:	9a04      	ldr	r2, [sp, #16]
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	b1c3      	cbz	r3, 800b666 <_strtod_l+0x916>
 800b634:	f7ff fb6f 	bl	800ad16 <sulp>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	ec51 0b18 	vmov	r0, r1, d8
 800b640:	f7f4 fe3c 	bl	80002bc <__adddf3>
 800b644:	4680      	mov	r8, r0
 800b646:	4689      	mov	r9, r1
 800b648:	e7de      	b.n	800b608 <_strtod_l+0x8b8>
 800b64a:	4013      	ands	r3, r2
 800b64c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b650:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b654:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b658:	f04f 38ff 	mov.w	r8, #4294967295
 800b65c:	e7d4      	b.n	800b608 <_strtod_l+0x8b8>
 800b65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b660:	ea13 0f08 	tst.w	r3, r8
 800b664:	e7e0      	b.n	800b628 <_strtod_l+0x8d8>
 800b666:	f7ff fb56 	bl	800ad16 <sulp>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	ec51 0b18 	vmov	r0, r1, d8
 800b672:	f7f4 fe21 	bl	80002b8 <__aeabi_dsub>
 800b676:	2200      	movs	r2, #0
 800b678:	2300      	movs	r3, #0
 800b67a:	4680      	mov	r8, r0
 800b67c:	4689      	mov	r9, r1
 800b67e:	f7f5 fa3b 	bl	8000af8 <__aeabi_dcmpeq>
 800b682:	2800      	cmp	r0, #0
 800b684:	d0c0      	beq.n	800b608 <_strtod_l+0x8b8>
 800b686:	e618      	b.n	800b2ba <_strtod_l+0x56a>
 800b688:	fffffc02 	.word	0xfffffc02
 800b68c:	7ff00000 	.word	0x7ff00000
 800b690:	39500000 	.word	0x39500000
 800b694:	000fffff 	.word	0x000fffff
 800b698:	7fefffff 	.word	0x7fefffff
 800b69c:	0800e3d8 	.word	0x0800e3d8
 800b6a0:	4659      	mov	r1, fp
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7ff fac0 	bl	800ac28 <__ratio>
 800b6a8:	ec57 6b10 	vmov	r6, r7, d0
 800b6ac:	ee10 0a10 	vmov	r0, s0
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f5 fa32 	bl	8000b20 <__aeabi_dcmple>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d071      	beq.n	800b7a4 <_strtod_l+0xa54>
 800b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d17c      	bne.n	800b7c0 <_strtod_l+0xa70>
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	d15a      	bne.n	800b782 <_strtod_l+0xa32>
 800b6cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d15d      	bne.n	800b790 <_strtod_l+0xa40>
 800b6d4:	4b90      	ldr	r3, [pc, #576]	; (800b918 <_strtod_l+0xbc8>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4630      	mov	r0, r6
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f7f5 fa16 	bl	8000b0c <__aeabi_dcmplt>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d15c      	bne.n	800b79e <_strtod_l+0xa4e>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4b8c      	ldr	r3, [pc, #560]	; (800b91c <_strtod_l+0xbcc>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f7f4 ff9c 	bl	8000628 <__aeabi_dmul>
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b6f8:	9606      	str	r6, [sp, #24]
 800b6fa:	9307      	str	r3, [sp, #28]
 800b6fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b700:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b704:	4b86      	ldr	r3, [pc, #536]	; (800b920 <_strtod_l+0xbd0>)
 800b706:	ea0a 0303 	and.w	r3, sl, r3
 800b70a:	930d      	str	r3, [sp, #52]	; 0x34
 800b70c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b70e:	4b85      	ldr	r3, [pc, #532]	; (800b924 <_strtod_l+0xbd4>)
 800b710:	429a      	cmp	r2, r3
 800b712:	f040 8090 	bne.w	800b836 <_strtod_l+0xae6>
 800b716:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b71a:	ec49 8b10 	vmov	d0, r8, r9
 800b71e:	f7ff f9b9 	bl	800aa94 <__ulp>
 800b722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b726:	ec51 0b10 	vmov	r0, r1, d0
 800b72a:	f7f4 ff7d 	bl	8000628 <__aeabi_dmul>
 800b72e:	4642      	mov	r2, r8
 800b730:	464b      	mov	r3, r9
 800b732:	f7f4 fdc3 	bl	80002bc <__adddf3>
 800b736:	460b      	mov	r3, r1
 800b738:	4979      	ldr	r1, [pc, #484]	; (800b920 <_strtod_l+0xbd0>)
 800b73a:	4a7b      	ldr	r2, [pc, #492]	; (800b928 <_strtod_l+0xbd8>)
 800b73c:	4019      	ands	r1, r3
 800b73e:	4291      	cmp	r1, r2
 800b740:	4680      	mov	r8, r0
 800b742:	d944      	bls.n	800b7ce <_strtod_l+0xa7e>
 800b744:	ee18 2a90 	vmov	r2, s17
 800b748:	4b78      	ldr	r3, [pc, #480]	; (800b92c <_strtod_l+0xbdc>)
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d104      	bne.n	800b758 <_strtod_l+0xa08>
 800b74e:	ee18 3a10 	vmov	r3, s16
 800b752:	3301      	adds	r3, #1
 800b754:	f43f ad40 	beq.w	800b1d8 <_strtod_l+0x488>
 800b758:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b92c <_strtod_l+0xbdc>
 800b75c:	f04f 38ff 	mov.w	r8, #4294967295
 800b760:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b762:	4620      	mov	r0, r4
 800b764:	f7fe fe6a 	bl	800a43c <_Bfree>
 800b768:	9905      	ldr	r1, [sp, #20]
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7fe fe66 	bl	800a43c <_Bfree>
 800b770:	4659      	mov	r1, fp
 800b772:	4620      	mov	r0, r4
 800b774:	f7fe fe62 	bl	800a43c <_Bfree>
 800b778:	4629      	mov	r1, r5
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7fe fe5e 	bl	800a43c <_Bfree>
 800b780:	e609      	b.n	800b396 <_strtod_l+0x646>
 800b782:	f1b8 0f01 	cmp.w	r8, #1
 800b786:	d103      	bne.n	800b790 <_strtod_l+0xa40>
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	f43f ad95 	beq.w	800b2ba <_strtod_l+0x56a>
 800b790:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b8e8 <_strtod_l+0xb98>
 800b794:	4f60      	ldr	r7, [pc, #384]	; (800b918 <_strtod_l+0xbc8>)
 800b796:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b79a:	2600      	movs	r6, #0
 800b79c:	e7ae      	b.n	800b6fc <_strtod_l+0x9ac>
 800b79e:	4f5f      	ldr	r7, [pc, #380]	; (800b91c <_strtod_l+0xbcc>)
 800b7a0:	2600      	movs	r6, #0
 800b7a2:	e7a7      	b.n	800b6f4 <_strtod_l+0x9a4>
 800b7a4:	4b5d      	ldr	r3, [pc, #372]	; (800b91c <_strtod_l+0xbcc>)
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f7f4 ff3c 	bl	8000628 <__aeabi_dmul>
 800b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d09c      	beq.n	800b6f4 <_strtod_l+0x9a4>
 800b7ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7be:	e79d      	b.n	800b6fc <_strtod_l+0x9ac>
 800b7c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b8f0 <_strtod_l+0xba0>
 800b7c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7c8:	ec57 6b17 	vmov	r6, r7, d7
 800b7cc:	e796      	b.n	800b6fc <_strtod_l+0x9ac>
 800b7ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	46ca      	mov	sl, r9
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1c2      	bne.n	800b760 <_strtod_l+0xa10>
 800b7da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7e0:	0d1b      	lsrs	r3, r3, #20
 800b7e2:	051b      	lsls	r3, r3, #20
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d1bb      	bne.n	800b760 <_strtod_l+0xa10>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f5 fa7c 	bl	8000ce8 <__aeabi_d2lz>
 800b7f0:	f7f4 feec 	bl	80005cc <__aeabi_l2d>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f4 fd5c 	bl	80002b8 <__aeabi_dsub>
 800b800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b802:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b806:	ea43 0308 	orr.w	r3, r3, r8
 800b80a:	4313      	orrs	r3, r2
 800b80c:	4606      	mov	r6, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	d054      	beq.n	800b8bc <_strtod_l+0xb6c>
 800b812:	a339      	add	r3, pc, #228	; (adr r3, 800b8f8 <_strtod_l+0xba8>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	f7f5 f978 	bl	8000b0c <__aeabi_dcmplt>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f47f ace5 	bne.w	800b1ec <_strtod_l+0x49c>
 800b822:	a337      	add	r3, pc, #220	; (adr r3, 800b900 <_strtod_l+0xbb0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f5 f98c 	bl	8000b48 <__aeabi_dcmpgt>
 800b830:	2800      	cmp	r0, #0
 800b832:	d095      	beq.n	800b760 <_strtod_l+0xa10>
 800b834:	e4da      	b.n	800b1ec <_strtod_l+0x49c>
 800b836:	9b04      	ldr	r3, [sp, #16]
 800b838:	b333      	cbz	r3, 800b888 <_strtod_l+0xb38>
 800b83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b840:	d822      	bhi.n	800b888 <_strtod_l+0xb38>
 800b842:	a331      	add	r3, pc, #196	; (adr r3, 800b908 <_strtod_l+0xbb8>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	4630      	mov	r0, r6
 800b84a:	4639      	mov	r1, r7
 800b84c:	f7f5 f968 	bl	8000b20 <__aeabi_dcmple>
 800b850:	b1a0      	cbz	r0, 800b87c <_strtod_l+0xb2c>
 800b852:	4639      	mov	r1, r7
 800b854:	4630      	mov	r0, r6
 800b856:	f7f5 f9bf 	bl	8000bd8 <__aeabi_d2uiz>
 800b85a:	2801      	cmp	r0, #1
 800b85c:	bf38      	it	cc
 800b85e:	2001      	movcc	r0, #1
 800b860:	f7f4 fe68 	bl	8000534 <__aeabi_ui2d>
 800b864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	bb23      	cbnz	r3, 800b8b6 <_strtod_l+0xb66>
 800b86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b870:	9010      	str	r0, [sp, #64]	; 0x40
 800b872:	9311      	str	r3, [sp, #68]	; 0x44
 800b874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b880:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	930f      	str	r3, [sp, #60]	; 0x3c
 800b888:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b88c:	eeb0 0a48 	vmov.f32	s0, s16
 800b890:	eef0 0a68 	vmov.f32	s1, s17
 800b894:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b898:	f7ff f8fc 	bl	800aa94 <__ulp>
 800b89c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8a0:	ec53 2b10 	vmov	r2, r3, d0
 800b8a4:	f7f4 fec0 	bl	8000628 <__aeabi_dmul>
 800b8a8:	ec53 2b18 	vmov	r2, r3, d8
 800b8ac:	f7f4 fd06 	bl	80002bc <__adddf3>
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	e78d      	b.n	800b7d2 <_strtod_l+0xa82>
 800b8b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b8ba:	e7db      	b.n	800b874 <_strtod_l+0xb24>
 800b8bc:	a314      	add	r3, pc, #80	; (adr r3, 800b910 <_strtod_l+0xbc0>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f7f5 f923 	bl	8000b0c <__aeabi_dcmplt>
 800b8c6:	e7b3      	b.n	800b830 <_strtod_l+0xae0>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b8cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	f7ff ba7c 	b.w	800adce <_strtod_l+0x7e>
 800b8d6:	2a65      	cmp	r2, #101	; 0x65
 800b8d8:	f43f ab75 	beq.w	800afc6 <_strtod_l+0x276>
 800b8dc:	2a45      	cmp	r2, #69	; 0x45
 800b8de:	f43f ab72 	beq.w	800afc6 <_strtod_l+0x276>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f7ff bbaa 	b.w	800b03c <_strtod_l+0x2ec>
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	bff00000 	.word	0xbff00000
 800b8f0:	00000000 	.word	0x00000000
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	94a03595 	.word	0x94a03595
 800b8fc:	3fdfffff 	.word	0x3fdfffff
 800b900:	35afe535 	.word	0x35afe535
 800b904:	3fe00000 	.word	0x3fe00000
 800b908:	ffc00000 	.word	0xffc00000
 800b90c:	41dfffff 	.word	0x41dfffff
 800b910:	94a03595 	.word	0x94a03595
 800b914:	3fcfffff 	.word	0x3fcfffff
 800b918:	3ff00000 	.word	0x3ff00000
 800b91c:	3fe00000 	.word	0x3fe00000
 800b920:	7ff00000 	.word	0x7ff00000
 800b924:	7fe00000 	.word	0x7fe00000
 800b928:	7c9fffff 	.word	0x7c9fffff
 800b92c:	7fefffff 	.word	0x7fefffff

0800b930 <_strtod_r>:
 800b930:	4b01      	ldr	r3, [pc, #4]	; (800b938 <_strtod_r+0x8>)
 800b932:	f7ff ba0d 	b.w	800ad50 <_strtod_l>
 800b936:	bf00      	nop
 800b938:	20000080 	.word	0x20000080

0800b93c <_strtol_l.constprop.0>:
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b942:	d001      	beq.n	800b948 <_strtol_l.constprop.0+0xc>
 800b944:	2b24      	cmp	r3, #36	; 0x24
 800b946:	d906      	bls.n	800b956 <_strtol_l.constprop.0+0x1a>
 800b948:	f7fd fd7c 	bl	8009444 <__errno>
 800b94c:	2316      	movs	r3, #22
 800b94e:	6003      	str	r3, [r0, #0]
 800b950:	2000      	movs	r0, #0
 800b952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b956:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba3c <_strtol_l.constprop.0+0x100>
 800b95a:	460d      	mov	r5, r1
 800b95c:	462e      	mov	r6, r5
 800b95e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b962:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b966:	f017 0708 	ands.w	r7, r7, #8
 800b96a:	d1f7      	bne.n	800b95c <_strtol_l.constprop.0+0x20>
 800b96c:	2c2d      	cmp	r4, #45	; 0x2d
 800b96e:	d132      	bne.n	800b9d6 <_strtol_l.constprop.0+0x9a>
 800b970:	782c      	ldrb	r4, [r5, #0]
 800b972:	2701      	movs	r7, #1
 800b974:	1cb5      	adds	r5, r6, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d05b      	beq.n	800ba32 <_strtol_l.constprop.0+0xf6>
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d109      	bne.n	800b992 <_strtol_l.constprop.0+0x56>
 800b97e:	2c30      	cmp	r4, #48	; 0x30
 800b980:	d107      	bne.n	800b992 <_strtol_l.constprop.0+0x56>
 800b982:	782c      	ldrb	r4, [r5, #0]
 800b984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b988:	2c58      	cmp	r4, #88	; 0x58
 800b98a:	d14d      	bne.n	800ba28 <_strtol_l.constprop.0+0xec>
 800b98c:	786c      	ldrb	r4, [r5, #1]
 800b98e:	2310      	movs	r3, #16
 800b990:	3502      	adds	r5, #2
 800b992:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b996:	f108 38ff 	add.w	r8, r8, #4294967295
 800b99a:	f04f 0e00 	mov.w	lr, #0
 800b99e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9a2:	4676      	mov	r6, lr
 800b9a4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9ac:	f1bc 0f09 	cmp.w	ip, #9
 800b9b0:	d816      	bhi.n	800b9e0 <_strtol_l.constprop.0+0xa4>
 800b9b2:	4664      	mov	r4, ip
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	dd24      	ble.n	800ba02 <_strtol_l.constprop.0+0xc6>
 800b9b8:	f1be 3fff 	cmp.w	lr, #4294967295
 800b9bc:	d008      	beq.n	800b9d0 <_strtol_l.constprop.0+0x94>
 800b9be:	45b1      	cmp	r9, r6
 800b9c0:	d31c      	bcc.n	800b9fc <_strtol_l.constprop.0+0xc0>
 800b9c2:	d101      	bne.n	800b9c8 <_strtol_l.constprop.0+0x8c>
 800b9c4:	45a2      	cmp	sl, r4
 800b9c6:	db19      	blt.n	800b9fc <_strtol_l.constprop.0+0xc0>
 800b9c8:	fb06 4603 	mla	r6, r6, r3, r4
 800b9cc:	f04f 0e01 	mov.w	lr, #1
 800b9d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9d4:	e7e8      	b.n	800b9a8 <_strtol_l.constprop.0+0x6c>
 800b9d6:	2c2b      	cmp	r4, #43	; 0x2b
 800b9d8:	bf04      	itt	eq
 800b9da:	782c      	ldrbeq	r4, [r5, #0]
 800b9dc:	1cb5      	addeq	r5, r6, #2
 800b9de:	e7ca      	b.n	800b976 <_strtol_l.constprop.0+0x3a>
 800b9e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b9e4:	f1bc 0f19 	cmp.w	ip, #25
 800b9e8:	d801      	bhi.n	800b9ee <_strtol_l.constprop.0+0xb2>
 800b9ea:	3c37      	subs	r4, #55	; 0x37
 800b9ec:	e7e2      	b.n	800b9b4 <_strtol_l.constprop.0+0x78>
 800b9ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b9f2:	f1bc 0f19 	cmp.w	ip, #25
 800b9f6:	d804      	bhi.n	800ba02 <_strtol_l.constprop.0+0xc6>
 800b9f8:	3c57      	subs	r4, #87	; 0x57
 800b9fa:	e7db      	b.n	800b9b4 <_strtol_l.constprop.0+0x78>
 800b9fc:	f04f 3eff 	mov.w	lr, #4294967295
 800ba00:	e7e6      	b.n	800b9d0 <_strtol_l.constprop.0+0x94>
 800ba02:	f1be 3fff 	cmp.w	lr, #4294967295
 800ba06:	d105      	bne.n	800ba14 <_strtol_l.constprop.0+0xd8>
 800ba08:	2322      	movs	r3, #34	; 0x22
 800ba0a:	6003      	str	r3, [r0, #0]
 800ba0c:	4646      	mov	r6, r8
 800ba0e:	b942      	cbnz	r2, 800ba22 <_strtol_l.constprop.0+0xe6>
 800ba10:	4630      	mov	r0, r6
 800ba12:	e79e      	b.n	800b952 <_strtol_l.constprop.0+0x16>
 800ba14:	b107      	cbz	r7, 800ba18 <_strtol_l.constprop.0+0xdc>
 800ba16:	4276      	negs	r6, r6
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d0f9      	beq.n	800ba10 <_strtol_l.constprop.0+0xd4>
 800ba1c:	f1be 0f00 	cmp.w	lr, #0
 800ba20:	d000      	beq.n	800ba24 <_strtol_l.constprop.0+0xe8>
 800ba22:	1e69      	subs	r1, r5, #1
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	e7f3      	b.n	800ba10 <_strtol_l.constprop.0+0xd4>
 800ba28:	2430      	movs	r4, #48	; 0x30
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1b1      	bne.n	800b992 <_strtol_l.constprop.0+0x56>
 800ba2e:	2308      	movs	r3, #8
 800ba30:	e7af      	b.n	800b992 <_strtol_l.constprop.0+0x56>
 800ba32:	2c30      	cmp	r4, #48	; 0x30
 800ba34:	d0a5      	beq.n	800b982 <_strtol_l.constprop.0+0x46>
 800ba36:	230a      	movs	r3, #10
 800ba38:	e7ab      	b.n	800b992 <_strtol_l.constprop.0+0x56>
 800ba3a:	bf00      	nop
 800ba3c:	0800e401 	.word	0x0800e401

0800ba40 <_strtol_r>:
 800ba40:	f7ff bf7c 	b.w	800b93c <_strtol_l.constprop.0>

0800ba44 <__ssputs_r>:
 800ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	688e      	ldr	r6, [r1, #8]
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	42be      	cmp	r6, r7
 800ba4e:	680b      	ldr	r3, [r1, #0]
 800ba50:	4682      	mov	sl, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4690      	mov	r8, r2
 800ba56:	d82c      	bhi.n	800bab2 <__ssputs_r+0x6e>
 800ba58:	898a      	ldrh	r2, [r1, #12]
 800ba5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba5e:	d026      	beq.n	800baae <__ssputs_r+0x6a>
 800ba60:	6965      	ldr	r5, [r4, #20]
 800ba62:	6909      	ldr	r1, [r1, #16]
 800ba64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba68:	eba3 0901 	sub.w	r9, r3, r1
 800ba6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba70:	1c7b      	adds	r3, r7, #1
 800ba72:	444b      	add	r3, r9
 800ba74:	106d      	asrs	r5, r5, #1
 800ba76:	429d      	cmp	r5, r3
 800ba78:	bf38      	it	cc
 800ba7a:	461d      	movcc	r5, r3
 800ba7c:	0553      	lsls	r3, r2, #21
 800ba7e:	d527      	bpl.n	800bad0 <__ssputs_r+0x8c>
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7fe fc0f 	bl	800a2a4 <_malloc_r>
 800ba86:	4606      	mov	r6, r0
 800ba88:	b360      	cbz	r0, 800bae4 <__ssputs_r+0xa0>
 800ba8a:	6921      	ldr	r1, [r4, #16]
 800ba8c:	464a      	mov	r2, r9
 800ba8e:	f7fd fd06 	bl	800949e <memcpy>
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	6126      	str	r6, [r4, #16]
 800baa0:	6165      	str	r5, [r4, #20]
 800baa2:	444e      	add	r6, r9
 800baa4:	eba5 0509 	sub.w	r5, r5, r9
 800baa8:	6026      	str	r6, [r4, #0]
 800baaa:	60a5      	str	r5, [r4, #8]
 800baac:	463e      	mov	r6, r7
 800baae:	42be      	cmp	r6, r7
 800bab0:	d900      	bls.n	800bab4 <__ssputs_r+0x70>
 800bab2:	463e      	mov	r6, r7
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	4632      	mov	r2, r6
 800bab8:	4641      	mov	r1, r8
 800baba:	f000 fb6f 	bl	800c19c <memmove>
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	1b9b      	subs	r3, r3, r6
 800bac2:	60a3      	str	r3, [r4, #8]
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	4433      	add	r3, r6
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	2000      	movs	r0, #0
 800bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad0:	462a      	mov	r2, r5
 800bad2:	f000 ff66 	bl	800c9a2 <_realloc_r>
 800bad6:	4606      	mov	r6, r0
 800bad8:	2800      	cmp	r0, #0
 800bada:	d1e0      	bne.n	800ba9e <__ssputs_r+0x5a>
 800badc:	6921      	ldr	r1, [r4, #16]
 800bade:	4650      	mov	r0, sl
 800bae0:	f7fe fb6c 	bl	800a1bc <_free_r>
 800bae4:	230c      	movs	r3, #12
 800bae6:	f8ca 3000 	str.w	r3, [sl]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	f04f 30ff 	mov.w	r0, #4294967295
 800baf6:	e7e9      	b.n	800bacc <__ssputs_r+0x88>

0800baf8 <_svfiprintf_r>:
 800baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	4698      	mov	r8, r3
 800bafe:	898b      	ldrh	r3, [r1, #12]
 800bb00:	061b      	lsls	r3, r3, #24
 800bb02:	b09d      	sub	sp, #116	; 0x74
 800bb04:	4607      	mov	r7, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	d50e      	bpl.n	800bb2a <_svfiprintf_r+0x32>
 800bb0c:	690b      	ldr	r3, [r1, #16]
 800bb0e:	b963      	cbnz	r3, 800bb2a <_svfiprintf_r+0x32>
 800bb10:	2140      	movs	r1, #64	; 0x40
 800bb12:	f7fe fbc7 	bl	800a2a4 <_malloc_r>
 800bb16:	6028      	str	r0, [r5, #0]
 800bb18:	6128      	str	r0, [r5, #16]
 800bb1a:	b920      	cbnz	r0, 800bb26 <_svfiprintf_r+0x2e>
 800bb1c:	230c      	movs	r3, #12
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e0d0      	b.n	800bcc8 <_svfiprintf_r+0x1d0>
 800bb26:	2340      	movs	r3, #64	; 0x40
 800bb28:	616b      	str	r3, [r5, #20]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb2e:	2320      	movs	r3, #32
 800bb30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb34:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb38:	2330      	movs	r3, #48	; 0x30
 800bb3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bce0 <_svfiprintf_r+0x1e8>
 800bb3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb42:	f04f 0901 	mov.w	r9, #1
 800bb46:	4623      	mov	r3, r4
 800bb48:	469a      	mov	sl, r3
 800bb4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb4e:	b10a      	cbz	r2, 800bb54 <_svfiprintf_r+0x5c>
 800bb50:	2a25      	cmp	r2, #37	; 0x25
 800bb52:	d1f9      	bne.n	800bb48 <_svfiprintf_r+0x50>
 800bb54:	ebba 0b04 	subs.w	fp, sl, r4
 800bb58:	d00b      	beq.n	800bb72 <_svfiprintf_r+0x7a>
 800bb5a:	465b      	mov	r3, fp
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	4638      	mov	r0, r7
 800bb62:	f7ff ff6f 	bl	800ba44 <__ssputs_r>
 800bb66:	3001      	adds	r0, #1
 800bb68:	f000 80a9 	beq.w	800bcbe <_svfiprintf_r+0x1c6>
 800bb6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb6e:	445a      	add	r2, fp
 800bb70:	9209      	str	r2, [sp, #36]	; 0x24
 800bb72:	f89a 3000 	ldrb.w	r3, [sl]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 80a1 	beq.w	800bcbe <_svfiprintf_r+0x1c6>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb86:	f10a 0a01 	add.w	sl, sl, #1
 800bb8a:	9304      	str	r3, [sp, #16]
 800bb8c:	9307      	str	r3, [sp, #28]
 800bb8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb92:	931a      	str	r3, [sp, #104]	; 0x68
 800bb94:	4654      	mov	r4, sl
 800bb96:	2205      	movs	r2, #5
 800bb98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9c:	4850      	ldr	r0, [pc, #320]	; (800bce0 <_svfiprintf_r+0x1e8>)
 800bb9e:	f7f4 fb2f 	bl	8000200 <memchr>
 800bba2:	9a04      	ldr	r2, [sp, #16]
 800bba4:	b9d8      	cbnz	r0, 800bbde <_svfiprintf_r+0xe6>
 800bba6:	06d0      	lsls	r0, r2, #27
 800bba8:	bf44      	itt	mi
 800bbaa:	2320      	movmi	r3, #32
 800bbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb0:	0711      	lsls	r1, r2, #28
 800bbb2:	bf44      	itt	mi
 800bbb4:	232b      	movmi	r3, #43	; 0x2b
 800bbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbba:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc0:	d015      	beq.n	800bbee <_svfiprintf_r+0xf6>
 800bbc2:	9a07      	ldr	r2, [sp, #28]
 800bbc4:	4654      	mov	r4, sl
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f04f 0c0a 	mov.w	ip, #10
 800bbcc:	4621      	mov	r1, r4
 800bbce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd2:	3b30      	subs	r3, #48	; 0x30
 800bbd4:	2b09      	cmp	r3, #9
 800bbd6:	d94d      	bls.n	800bc74 <_svfiprintf_r+0x17c>
 800bbd8:	b1b0      	cbz	r0, 800bc08 <_svfiprintf_r+0x110>
 800bbda:	9207      	str	r2, [sp, #28]
 800bbdc:	e014      	b.n	800bc08 <_svfiprintf_r+0x110>
 800bbde:	eba0 0308 	sub.w	r3, r0, r8
 800bbe2:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	46a2      	mov	sl, r4
 800bbec:	e7d2      	b.n	800bb94 <_svfiprintf_r+0x9c>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	1d19      	adds	r1, r3, #4
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	9103      	str	r1, [sp, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	bfbb      	ittet	lt
 800bbfa:	425b      	neglt	r3, r3
 800bbfc:	f042 0202 	orrlt.w	r2, r2, #2
 800bc00:	9307      	strge	r3, [sp, #28]
 800bc02:	9307      	strlt	r3, [sp, #28]
 800bc04:	bfb8      	it	lt
 800bc06:	9204      	strlt	r2, [sp, #16]
 800bc08:	7823      	ldrb	r3, [r4, #0]
 800bc0a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc0c:	d10c      	bne.n	800bc28 <_svfiprintf_r+0x130>
 800bc0e:	7863      	ldrb	r3, [r4, #1]
 800bc10:	2b2a      	cmp	r3, #42	; 0x2a
 800bc12:	d134      	bne.n	800bc7e <_svfiprintf_r+0x186>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	1d1a      	adds	r2, r3, #4
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	9203      	str	r2, [sp, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	bfb8      	it	lt
 800bc20:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc24:	3402      	adds	r4, #2
 800bc26:	9305      	str	r3, [sp, #20]
 800bc28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bcf0 <_svfiprintf_r+0x1f8>
 800bc2c:	7821      	ldrb	r1, [r4, #0]
 800bc2e:	2203      	movs	r2, #3
 800bc30:	4650      	mov	r0, sl
 800bc32:	f7f4 fae5 	bl	8000200 <memchr>
 800bc36:	b138      	cbz	r0, 800bc48 <_svfiprintf_r+0x150>
 800bc38:	9b04      	ldr	r3, [sp, #16]
 800bc3a:	eba0 000a 	sub.w	r0, r0, sl
 800bc3e:	2240      	movs	r2, #64	; 0x40
 800bc40:	4082      	lsls	r2, r0
 800bc42:	4313      	orrs	r3, r2
 800bc44:	3401      	adds	r4, #1
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4c:	4825      	ldr	r0, [pc, #148]	; (800bce4 <_svfiprintf_r+0x1ec>)
 800bc4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc52:	2206      	movs	r2, #6
 800bc54:	f7f4 fad4 	bl	8000200 <memchr>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d038      	beq.n	800bcce <_svfiprintf_r+0x1d6>
 800bc5c:	4b22      	ldr	r3, [pc, #136]	; (800bce8 <_svfiprintf_r+0x1f0>)
 800bc5e:	bb1b      	cbnz	r3, 800bca8 <_svfiprintf_r+0x1b0>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	3307      	adds	r3, #7
 800bc64:	f023 0307 	bic.w	r3, r3, #7
 800bc68:	3308      	adds	r3, #8
 800bc6a:	9303      	str	r3, [sp, #12]
 800bc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6e:	4433      	add	r3, r6
 800bc70:	9309      	str	r3, [sp, #36]	; 0x24
 800bc72:	e768      	b.n	800bb46 <_svfiprintf_r+0x4e>
 800bc74:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc78:	460c      	mov	r4, r1
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	e7a6      	b.n	800bbcc <_svfiprintf_r+0xd4>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	3401      	adds	r4, #1
 800bc82:	9305      	str	r3, [sp, #20]
 800bc84:	4619      	mov	r1, r3
 800bc86:	f04f 0c0a 	mov.w	ip, #10
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc90:	3a30      	subs	r2, #48	; 0x30
 800bc92:	2a09      	cmp	r2, #9
 800bc94:	d903      	bls.n	800bc9e <_svfiprintf_r+0x1a6>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0c6      	beq.n	800bc28 <_svfiprintf_r+0x130>
 800bc9a:	9105      	str	r1, [sp, #20]
 800bc9c:	e7c4      	b.n	800bc28 <_svfiprintf_r+0x130>
 800bc9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca2:	4604      	mov	r4, r0
 800bca4:	2301      	movs	r3, #1
 800bca6:	e7f0      	b.n	800bc8a <_svfiprintf_r+0x192>
 800bca8:	ab03      	add	r3, sp, #12
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	462a      	mov	r2, r5
 800bcae:	4b0f      	ldr	r3, [pc, #60]	; (800bcec <_svfiprintf_r+0x1f4>)
 800bcb0:	a904      	add	r1, sp, #16
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	f7fc fb76 	bl	80083a4 <_printf_float>
 800bcb8:	1c42      	adds	r2, r0, #1
 800bcba:	4606      	mov	r6, r0
 800bcbc:	d1d6      	bne.n	800bc6c <_svfiprintf_r+0x174>
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	065b      	lsls	r3, r3, #25
 800bcc2:	f53f af2d 	bmi.w	800bb20 <_svfiprintf_r+0x28>
 800bcc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc8:	b01d      	add	sp, #116	; 0x74
 800bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcce:	ab03      	add	r3, sp, #12
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4b05      	ldr	r3, [pc, #20]	; (800bcec <_svfiprintf_r+0x1f4>)
 800bcd6:	a904      	add	r1, sp, #16
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7fc fe07 	bl	80088ec <_printf_i>
 800bcde:	e7eb      	b.n	800bcb8 <_svfiprintf_r+0x1c0>
 800bce0:	0800e501 	.word	0x0800e501
 800bce4:	0800e50b 	.word	0x0800e50b
 800bce8:	080083a5 	.word	0x080083a5
 800bcec:	0800ba45 	.word	0x0800ba45
 800bcf0:	0800e507 	.word	0x0800e507

0800bcf4 <__sfputc_r>:
 800bcf4:	6893      	ldr	r3, [r2, #8]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	b410      	push	{r4}
 800bcfc:	6093      	str	r3, [r2, #8]
 800bcfe:	da08      	bge.n	800bd12 <__sfputc_r+0x1e>
 800bd00:	6994      	ldr	r4, [r2, #24]
 800bd02:	42a3      	cmp	r3, r4
 800bd04:	db01      	blt.n	800bd0a <__sfputc_r+0x16>
 800bd06:	290a      	cmp	r1, #10
 800bd08:	d103      	bne.n	800bd12 <__sfputc_r+0x1e>
 800bd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0e:	f7fd bab2 	b.w	8009276 <__swbuf_r>
 800bd12:	6813      	ldr	r3, [r2, #0]
 800bd14:	1c58      	adds	r0, r3, #1
 800bd16:	6010      	str	r0, [r2, #0]
 800bd18:	7019      	strb	r1, [r3, #0]
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <__sfputs_r>:
 800bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd24:	4606      	mov	r6, r0
 800bd26:	460f      	mov	r7, r1
 800bd28:	4614      	mov	r4, r2
 800bd2a:	18d5      	adds	r5, r2, r3
 800bd2c:	42ac      	cmp	r4, r5
 800bd2e:	d101      	bne.n	800bd34 <__sfputs_r+0x12>
 800bd30:	2000      	movs	r0, #0
 800bd32:	e007      	b.n	800bd44 <__sfputs_r+0x22>
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	463a      	mov	r2, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff ffda 	bl	800bcf4 <__sfputc_r>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d1f3      	bne.n	800bd2c <__sfputs_r+0xa>
 800bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd48 <_vfiprintf_r>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	b09d      	sub	sp, #116	; 0x74
 800bd50:	4614      	mov	r4, r2
 800bd52:	4698      	mov	r8, r3
 800bd54:	4606      	mov	r6, r0
 800bd56:	b118      	cbz	r0, 800bd60 <_vfiprintf_r+0x18>
 800bd58:	6a03      	ldr	r3, [r0, #32]
 800bd5a:	b90b      	cbnz	r3, 800bd60 <_vfiprintf_r+0x18>
 800bd5c:	f7fd f984 	bl	8009068 <__sinit>
 800bd60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd62:	07d9      	lsls	r1, r3, #31
 800bd64:	d405      	bmi.n	800bd72 <_vfiprintf_r+0x2a>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	059a      	lsls	r2, r3, #22
 800bd6a:	d402      	bmi.n	800bd72 <_vfiprintf_r+0x2a>
 800bd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd6e:	f7fd fb94 	bl	800949a <__retarget_lock_acquire_recursive>
 800bd72:	89ab      	ldrh	r3, [r5, #12]
 800bd74:	071b      	lsls	r3, r3, #28
 800bd76:	d501      	bpl.n	800bd7c <_vfiprintf_r+0x34>
 800bd78:	692b      	ldr	r3, [r5, #16]
 800bd7a:	b99b      	cbnz	r3, 800bda4 <_vfiprintf_r+0x5c>
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7fd fab6 	bl	80092f0 <__swsetup_r>
 800bd84:	b170      	cbz	r0, 800bda4 <_vfiprintf_r+0x5c>
 800bd86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd88:	07dc      	lsls	r4, r3, #31
 800bd8a:	d504      	bpl.n	800bd96 <_vfiprintf_r+0x4e>
 800bd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd90:	b01d      	add	sp, #116	; 0x74
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	0598      	lsls	r0, r3, #22
 800bd9a:	d4f7      	bmi.n	800bd8c <_vfiprintf_r+0x44>
 800bd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd9e:	f7fd fb7d 	bl	800949c <__retarget_lock_release_recursive>
 800bda2:	e7f3      	b.n	800bd8c <_vfiprintf_r+0x44>
 800bda4:	2300      	movs	r3, #0
 800bda6:	9309      	str	r3, [sp, #36]	; 0x24
 800bda8:	2320      	movs	r3, #32
 800bdaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb2:	2330      	movs	r3, #48	; 0x30
 800bdb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bf68 <_vfiprintf_r+0x220>
 800bdb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdbc:	f04f 0901 	mov.w	r9, #1
 800bdc0:	4623      	mov	r3, r4
 800bdc2:	469a      	mov	sl, r3
 800bdc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc8:	b10a      	cbz	r2, 800bdce <_vfiprintf_r+0x86>
 800bdca:	2a25      	cmp	r2, #37	; 0x25
 800bdcc:	d1f9      	bne.n	800bdc2 <_vfiprintf_r+0x7a>
 800bdce:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd2:	d00b      	beq.n	800bdec <_vfiprintf_r+0xa4>
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ffa1 	bl	800bd22 <__sfputs_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	f000 80a9 	beq.w	800bf38 <_vfiprintf_r+0x1f0>
 800bde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bde8:	445a      	add	r2, fp
 800bdea:	9209      	str	r2, [sp, #36]	; 0x24
 800bdec:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 80a1 	beq.w	800bf38 <_vfiprintf_r+0x1f0>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be0c:	931a      	str	r3, [sp, #104]	; 0x68
 800be0e:	4654      	mov	r4, sl
 800be10:	2205      	movs	r2, #5
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4854      	ldr	r0, [pc, #336]	; (800bf68 <_vfiprintf_r+0x220>)
 800be18:	f7f4 f9f2 	bl	8000200 <memchr>
 800be1c:	9a04      	ldr	r2, [sp, #16]
 800be1e:	b9d8      	cbnz	r0, 800be58 <_vfiprintf_r+0x110>
 800be20:	06d1      	lsls	r1, r2, #27
 800be22:	bf44      	itt	mi
 800be24:	2320      	movmi	r3, #32
 800be26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2a:	0713      	lsls	r3, r2, #28
 800be2c:	bf44      	itt	mi
 800be2e:	232b      	movmi	r3, #43	; 0x2b
 800be30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be34:	f89a 3000 	ldrb.w	r3, [sl]
 800be38:	2b2a      	cmp	r3, #42	; 0x2a
 800be3a:	d015      	beq.n	800be68 <_vfiprintf_r+0x120>
 800be3c:	9a07      	ldr	r2, [sp, #28]
 800be3e:	4654      	mov	r4, sl
 800be40:	2000      	movs	r0, #0
 800be42:	f04f 0c0a 	mov.w	ip, #10
 800be46:	4621      	mov	r1, r4
 800be48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be4c:	3b30      	subs	r3, #48	; 0x30
 800be4e:	2b09      	cmp	r3, #9
 800be50:	d94d      	bls.n	800beee <_vfiprintf_r+0x1a6>
 800be52:	b1b0      	cbz	r0, 800be82 <_vfiprintf_r+0x13a>
 800be54:	9207      	str	r2, [sp, #28]
 800be56:	e014      	b.n	800be82 <_vfiprintf_r+0x13a>
 800be58:	eba0 0308 	sub.w	r3, r0, r8
 800be5c:	fa09 f303 	lsl.w	r3, r9, r3
 800be60:	4313      	orrs	r3, r2
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	46a2      	mov	sl, r4
 800be66:	e7d2      	b.n	800be0e <_vfiprintf_r+0xc6>
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	1d19      	adds	r1, r3, #4
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	9103      	str	r1, [sp, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfbb      	ittet	lt
 800be74:	425b      	neglt	r3, r3
 800be76:	f042 0202 	orrlt.w	r2, r2, #2
 800be7a:	9307      	strge	r3, [sp, #28]
 800be7c:	9307      	strlt	r3, [sp, #28]
 800be7e:	bfb8      	it	lt
 800be80:	9204      	strlt	r2, [sp, #16]
 800be82:	7823      	ldrb	r3, [r4, #0]
 800be84:	2b2e      	cmp	r3, #46	; 0x2e
 800be86:	d10c      	bne.n	800bea2 <_vfiprintf_r+0x15a>
 800be88:	7863      	ldrb	r3, [r4, #1]
 800be8a:	2b2a      	cmp	r3, #42	; 0x2a
 800be8c:	d134      	bne.n	800bef8 <_vfiprintf_r+0x1b0>
 800be8e:	9b03      	ldr	r3, [sp, #12]
 800be90:	1d1a      	adds	r2, r3, #4
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	9203      	str	r2, [sp, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	bfb8      	it	lt
 800be9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be9e:	3402      	adds	r4, #2
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf78 <_vfiprintf_r+0x230>
 800bea6:	7821      	ldrb	r1, [r4, #0]
 800bea8:	2203      	movs	r2, #3
 800beaa:	4650      	mov	r0, sl
 800beac:	f7f4 f9a8 	bl	8000200 <memchr>
 800beb0:	b138      	cbz	r0, 800bec2 <_vfiprintf_r+0x17a>
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	eba0 000a 	sub.w	r0, r0, sl
 800beb8:	2240      	movs	r2, #64	; 0x40
 800beba:	4082      	lsls	r2, r0
 800bebc:	4313      	orrs	r3, r2
 800bebe:	3401      	adds	r4, #1
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec6:	4829      	ldr	r0, [pc, #164]	; (800bf6c <_vfiprintf_r+0x224>)
 800bec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800becc:	2206      	movs	r2, #6
 800bece:	f7f4 f997 	bl	8000200 <memchr>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d03f      	beq.n	800bf56 <_vfiprintf_r+0x20e>
 800bed6:	4b26      	ldr	r3, [pc, #152]	; (800bf70 <_vfiprintf_r+0x228>)
 800bed8:	bb1b      	cbnz	r3, 800bf22 <_vfiprintf_r+0x1da>
 800beda:	9b03      	ldr	r3, [sp, #12]
 800bedc:	3307      	adds	r3, #7
 800bede:	f023 0307 	bic.w	r3, r3, #7
 800bee2:	3308      	adds	r3, #8
 800bee4:	9303      	str	r3, [sp, #12]
 800bee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee8:	443b      	add	r3, r7
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	e768      	b.n	800bdc0 <_vfiprintf_r+0x78>
 800beee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bef2:	460c      	mov	r4, r1
 800bef4:	2001      	movs	r0, #1
 800bef6:	e7a6      	b.n	800be46 <_vfiprintf_r+0xfe>
 800bef8:	2300      	movs	r3, #0
 800befa:	3401      	adds	r4, #1
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	4619      	mov	r1, r3
 800bf00:	f04f 0c0a 	mov.w	ip, #10
 800bf04:	4620      	mov	r0, r4
 800bf06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf0a:	3a30      	subs	r2, #48	; 0x30
 800bf0c:	2a09      	cmp	r2, #9
 800bf0e:	d903      	bls.n	800bf18 <_vfiprintf_r+0x1d0>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d0c6      	beq.n	800bea2 <_vfiprintf_r+0x15a>
 800bf14:	9105      	str	r1, [sp, #20]
 800bf16:	e7c4      	b.n	800bea2 <_vfiprintf_r+0x15a>
 800bf18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e7f0      	b.n	800bf04 <_vfiprintf_r+0x1bc>
 800bf22:	ab03      	add	r3, sp, #12
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	462a      	mov	r2, r5
 800bf28:	4b12      	ldr	r3, [pc, #72]	; (800bf74 <_vfiprintf_r+0x22c>)
 800bf2a:	a904      	add	r1, sp, #16
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7fc fa39 	bl	80083a4 <_printf_float>
 800bf32:	4607      	mov	r7, r0
 800bf34:	1c78      	adds	r0, r7, #1
 800bf36:	d1d6      	bne.n	800bee6 <_vfiprintf_r+0x19e>
 800bf38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf3a:	07d9      	lsls	r1, r3, #31
 800bf3c:	d405      	bmi.n	800bf4a <_vfiprintf_r+0x202>
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	059a      	lsls	r2, r3, #22
 800bf42:	d402      	bmi.n	800bf4a <_vfiprintf_r+0x202>
 800bf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf46:	f7fd faa9 	bl	800949c <__retarget_lock_release_recursive>
 800bf4a:	89ab      	ldrh	r3, [r5, #12]
 800bf4c:	065b      	lsls	r3, r3, #25
 800bf4e:	f53f af1d 	bmi.w	800bd8c <_vfiprintf_r+0x44>
 800bf52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf54:	e71c      	b.n	800bd90 <_vfiprintf_r+0x48>
 800bf56:	ab03      	add	r3, sp, #12
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	462a      	mov	r2, r5
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <_vfiprintf_r+0x22c>)
 800bf5e:	a904      	add	r1, sp, #16
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7fc fcc3 	bl	80088ec <_printf_i>
 800bf66:	e7e4      	b.n	800bf32 <_vfiprintf_r+0x1ea>
 800bf68:	0800e501 	.word	0x0800e501
 800bf6c:	0800e50b 	.word	0x0800e50b
 800bf70:	080083a5 	.word	0x080083a5
 800bf74:	0800bd23 	.word	0x0800bd23
 800bf78:	0800e507 	.word	0x0800e507

0800bf7c <__sflush_r>:
 800bf7c:	898a      	ldrh	r2, [r1, #12]
 800bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	4605      	mov	r5, r0
 800bf84:	0710      	lsls	r0, r2, #28
 800bf86:	460c      	mov	r4, r1
 800bf88:	d458      	bmi.n	800c03c <__sflush_r+0xc0>
 800bf8a:	684b      	ldr	r3, [r1, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc05      	bgt.n	800bf9c <__sflush_r+0x20>
 800bf90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dc02      	bgt.n	800bf9c <__sflush_r+0x20>
 800bf96:	2000      	movs	r0, #0
 800bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf9e:	2e00      	cmp	r6, #0
 800bfa0:	d0f9      	beq.n	800bf96 <__sflush_r+0x1a>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfa8:	682f      	ldr	r7, [r5, #0]
 800bfaa:	6a21      	ldr	r1, [r4, #32]
 800bfac:	602b      	str	r3, [r5, #0]
 800bfae:	d032      	beq.n	800c016 <__sflush_r+0x9a>
 800bfb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	075a      	lsls	r2, r3, #29
 800bfb6:	d505      	bpl.n	800bfc4 <__sflush_r+0x48>
 800bfb8:	6863      	ldr	r3, [r4, #4]
 800bfba:	1ac0      	subs	r0, r0, r3
 800bfbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfbe:	b10b      	cbz	r3, 800bfc4 <__sflush_r+0x48>
 800bfc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc2:	1ac0      	subs	r0, r0, r3
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfca:	6a21      	ldr	r1, [r4, #32]
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b0      	blx	r6
 800bfd0:	1c43      	adds	r3, r0, #1
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	d106      	bne.n	800bfe4 <__sflush_r+0x68>
 800bfd6:	6829      	ldr	r1, [r5, #0]
 800bfd8:	291d      	cmp	r1, #29
 800bfda:	d82b      	bhi.n	800c034 <__sflush_r+0xb8>
 800bfdc:	4a29      	ldr	r2, [pc, #164]	; (800c084 <__sflush_r+0x108>)
 800bfde:	410a      	asrs	r2, r1
 800bfe0:	07d6      	lsls	r6, r2, #31
 800bfe2:	d427      	bmi.n	800c034 <__sflush_r+0xb8>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	6062      	str	r2, [r4, #4]
 800bfe8:	04d9      	lsls	r1, r3, #19
 800bfea:	6922      	ldr	r2, [r4, #16]
 800bfec:	6022      	str	r2, [r4, #0]
 800bfee:	d504      	bpl.n	800bffa <__sflush_r+0x7e>
 800bff0:	1c42      	adds	r2, r0, #1
 800bff2:	d101      	bne.n	800bff8 <__sflush_r+0x7c>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b903      	cbnz	r3, 800bffa <__sflush_r+0x7e>
 800bff8:	6560      	str	r0, [r4, #84]	; 0x54
 800bffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffc:	602f      	str	r7, [r5, #0]
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0c9      	beq.n	800bf96 <__sflush_r+0x1a>
 800c002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c006:	4299      	cmp	r1, r3
 800c008:	d002      	beq.n	800c010 <__sflush_r+0x94>
 800c00a:	4628      	mov	r0, r5
 800c00c:	f7fe f8d6 	bl	800a1bc <_free_r>
 800c010:	2000      	movs	r0, #0
 800c012:	6360      	str	r0, [r4, #52]	; 0x34
 800c014:	e7c0      	b.n	800bf98 <__sflush_r+0x1c>
 800c016:	2301      	movs	r3, #1
 800c018:	4628      	mov	r0, r5
 800c01a:	47b0      	blx	r6
 800c01c:	1c41      	adds	r1, r0, #1
 800c01e:	d1c8      	bne.n	800bfb2 <__sflush_r+0x36>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0c5      	beq.n	800bfb2 <__sflush_r+0x36>
 800c026:	2b1d      	cmp	r3, #29
 800c028:	d001      	beq.n	800c02e <__sflush_r+0xb2>
 800c02a:	2b16      	cmp	r3, #22
 800c02c:	d101      	bne.n	800c032 <__sflush_r+0xb6>
 800c02e:	602f      	str	r7, [r5, #0]
 800c030:	e7b1      	b.n	800bf96 <__sflush_r+0x1a>
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	e7ad      	b.n	800bf98 <__sflush_r+0x1c>
 800c03c:	690f      	ldr	r7, [r1, #16]
 800c03e:	2f00      	cmp	r7, #0
 800c040:	d0a9      	beq.n	800bf96 <__sflush_r+0x1a>
 800c042:	0793      	lsls	r3, r2, #30
 800c044:	680e      	ldr	r6, [r1, #0]
 800c046:	bf08      	it	eq
 800c048:	694b      	ldreq	r3, [r1, #20]
 800c04a:	600f      	str	r7, [r1, #0]
 800c04c:	bf18      	it	ne
 800c04e:	2300      	movne	r3, #0
 800c050:	eba6 0807 	sub.w	r8, r6, r7
 800c054:	608b      	str	r3, [r1, #8]
 800c056:	f1b8 0f00 	cmp.w	r8, #0
 800c05a:	dd9c      	ble.n	800bf96 <__sflush_r+0x1a>
 800c05c:	6a21      	ldr	r1, [r4, #32]
 800c05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c060:	4643      	mov	r3, r8
 800c062:	463a      	mov	r2, r7
 800c064:	4628      	mov	r0, r5
 800c066:	47b0      	blx	r6
 800c068:	2800      	cmp	r0, #0
 800c06a:	dc06      	bgt.n	800c07a <__sflush_r+0xfe>
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	e78e      	b.n	800bf98 <__sflush_r+0x1c>
 800c07a:	4407      	add	r7, r0
 800c07c:	eba8 0800 	sub.w	r8, r8, r0
 800c080:	e7e9      	b.n	800c056 <__sflush_r+0xda>
 800c082:	bf00      	nop
 800c084:	dfbffffe 	.word	0xdfbffffe

0800c088 <_fflush_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	690b      	ldr	r3, [r1, #16]
 800c08c:	4605      	mov	r5, r0
 800c08e:	460c      	mov	r4, r1
 800c090:	b913      	cbnz	r3, 800c098 <_fflush_r+0x10>
 800c092:	2500      	movs	r5, #0
 800c094:	4628      	mov	r0, r5
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	b118      	cbz	r0, 800c0a2 <_fflush_r+0x1a>
 800c09a:	6a03      	ldr	r3, [r0, #32]
 800c09c:	b90b      	cbnz	r3, 800c0a2 <_fflush_r+0x1a>
 800c09e:	f7fc ffe3 	bl	8009068 <__sinit>
 800c0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0f3      	beq.n	800c092 <_fflush_r+0xa>
 800c0aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0ac:	07d0      	lsls	r0, r2, #31
 800c0ae:	d404      	bmi.n	800c0ba <_fflush_r+0x32>
 800c0b0:	0599      	lsls	r1, r3, #22
 800c0b2:	d402      	bmi.n	800c0ba <_fflush_r+0x32>
 800c0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0b6:	f7fd f9f0 	bl	800949a <__retarget_lock_acquire_recursive>
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	4621      	mov	r1, r4
 800c0be:	f7ff ff5d 	bl	800bf7c <__sflush_r>
 800c0c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0c4:	07da      	lsls	r2, r3, #31
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	d4e4      	bmi.n	800c094 <_fflush_r+0xc>
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	059b      	lsls	r3, r3, #22
 800c0ce:	d4e1      	bmi.n	800c094 <_fflush_r+0xc>
 800c0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0d2:	f7fd f9e3 	bl	800949c <__retarget_lock_release_recursive>
 800c0d6:	e7dd      	b.n	800c094 <_fflush_r+0xc>

0800c0d8 <__swhatbuf_r>:
 800c0d8:	b570      	push	{r4, r5, r6, lr}
 800c0da:	460c      	mov	r4, r1
 800c0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	b096      	sub	sp, #88	; 0x58
 800c0e4:	4615      	mov	r5, r2
 800c0e6:	461e      	mov	r6, r3
 800c0e8:	da0d      	bge.n	800c106 <__swhatbuf_r+0x2e>
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0f0:	f04f 0100 	mov.w	r1, #0
 800c0f4:	bf0c      	ite	eq
 800c0f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0fa:	2340      	movne	r3, #64	; 0x40
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	6031      	str	r1, [r6, #0]
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	b016      	add	sp, #88	; 0x58
 800c104:	bd70      	pop	{r4, r5, r6, pc}
 800c106:	466a      	mov	r2, sp
 800c108:	f000 f874 	bl	800c1f4 <_fstat_r>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	dbec      	blt.n	800c0ea <__swhatbuf_r+0x12>
 800c110:	9901      	ldr	r1, [sp, #4]
 800c112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c11a:	4259      	negs	r1, r3
 800c11c:	4159      	adcs	r1, r3
 800c11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c122:	e7eb      	b.n	800c0fc <__swhatbuf_r+0x24>

0800c124 <__smakebuf_r>:
 800c124:	898b      	ldrh	r3, [r1, #12]
 800c126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c128:	079d      	lsls	r5, r3, #30
 800c12a:	4606      	mov	r6, r0
 800c12c:	460c      	mov	r4, r1
 800c12e:	d507      	bpl.n	800c140 <__smakebuf_r+0x1c>
 800c130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	6123      	str	r3, [r4, #16]
 800c138:	2301      	movs	r3, #1
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	b002      	add	sp, #8
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	ab01      	add	r3, sp, #4
 800c142:	466a      	mov	r2, sp
 800c144:	f7ff ffc8 	bl	800c0d8 <__swhatbuf_r>
 800c148:	9900      	ldr	r1, [sp, #0]
 800c14a:	4605      	mov	r5, r0
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7fe f8a9 	bl	800a2a4 <_malloc_r>
 800c152:	b948      	cbnz	r0, 800c168 <__smakebuf_r+0x44>
 800c154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c158:	059a      	lsls	r2, r3, #22
 800c15a:	d4ef      	bmi.n	800c13c <__smakebuf_r+0x18>
 800c15c:	f023 0303 	bic.w	r3, r3, #3
 800c160:	f043 0302 	orr.w	r3, r3, #2
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	e7e3      	b.n	800c130 <__smakebuf_r+0xc>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	6020      	str	r0, [r4, #0]
 800c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	6163      	str	r3, [r4, #20]
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	6120      	str	r0, [r4, #16]
 800c17a:	b15b      	cbz	r3, 800c194 <__smakebuf_r+0x70>
 800c17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c180:	4630      	mov	r0, r6
 800c182:	f000 f849 	bl	800c218 <_isatty_r>
 800c186:	b128      	cbz	r0, 800c194 <__smakebuf_r+0x70>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f023 0303 	bic.w	r3, r3, #3
 800c18e:	f043 0301 	orr.w	r3, r3, #1
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	431d      	orrs	r5, r3
 800c198:	81a5      	strh	r5, [r4, #12]
 800c19a:	e7cf      	b.n	800c13c <__smakebuf_r+0x18>

0800c19c <memmove>:
 800c19c:	4288      	cmp	r0, r1
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	eb01 0402 	add.w	r4, r1, r2
 800c1a4:	d902      	bls.n	800c1ac <memmove+0x10>
 800c1a6:	4284      	cmp	r4, r0
 800c1a8:	4623      	mov	r3, r4
 800c1aa:	d807      	bhi.n	800c1bc <memmove+0x20>
 800c1ac:	1e43      	subs	r3, r0, #1
 800c1ae:	42a1      	cmp	r1, r4
 800c1b0:	d008      	beq.n	800c1c4 <memmove+0x28>
 800c1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ba:	e7f8      	b.n	800c1ae <memmove+0x12>
 800c1bc:	4402      	add	r2, r0
 800c1be:	4601      	mov	r1, r0
 800c1c0:	428a      	cmp	r2, r1
 800c1c2:	d100      	bne.n	800c1c6 <memmove+0x2a>
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1ce:	e7f7      	b.n	800c1c0 <memmove+0x24>

0800c1d0 <strncmp>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	b16a      	cbz	r2, 800c1f0 <strncmp+0x20>
 800c1d4:	3901      	subs	r1, #1
 800c1d6:	1884      	adds	r4, r0, r2
 800c1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d103      	bne.n	800c1ec <strncmp+0x1c>
 800c1e4:	42a0      	cmp	r0, r4
 800c1e6:	d001      	beq.n	800c1ec <strncmp+0x1c>
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d1f5      	bne.n	800c1d8 <strncmp+0x8>
 800c1ec:	1ad0      	subs	r0, r2, r3
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	e7fc      	b.n	800c1ee <strncmp+0x1e>

0800c1f4 <_fstat_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	; (800c214 <_fstat_r+0x20>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	f7f6 f99f 	bl	8002544 <_fstat>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d102      	bne.n	800c210 <_fstat_r+0x1c>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	b103      	cbz	r3, 800c210 <_fstat_r+0x1c>
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	bd38      	pop	{r3, r4, r5, pc}
 800c212:	bf00      	nop
 800c214:	20004218 	.word	0x20004218

0800c218 <_isatty_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d06      	ldr	r5, [pc, #24]	; (800c234 <_isatty_r+0x1c>)
 800c21c:	2300      	movs	r3, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	4608      	mov	r0, r1
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	f7f6 f99e 	bl	8002564 <_isatty>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_isatty_r+0x1a>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_isatty_r+0x1a>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20004218 	.word	0x20004218

0800c238 <_sbrk_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d06      	ldr	r5, [pc, #24]	; (800c254 <_sbrk_r+0x1c>)
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	4608      	mov	r0, r1
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	f7f6 f9a6 	bl	8002594 <_sbrk>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_sbrk_r+0x1a>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_sbrk_r+0x1a>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	20004218 	.word	0x20004218

0800c258 <nan>:
 800c258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c260 <nan+0x8>
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	00000000 	.word	0x00000000
 800c264:	7ff80000 	.word	0x7ff80000

0800c268 <__assert_func>:
 800c268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c26a:	4614      	mov	r4, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	4b09      	ldr	r3, [pc, #36]	; (800c294 <__assert_func+0x2c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4605      	mov	r5, r0
 800c274:	68d8      	ldr	r0, [r3, #12]
 800c276:	b14c      	cbz	r4, 800c28c <__assert_func+0x24>
 800c278:	4b07      	ldr	r3, [pc, #28]	; (800c298 <__assert_func+0x30>)
 800c27a:	9100      	str	r1, [sp, #0]
 800c27c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c280:	4906      	ldr	r1, [pc, #24]	; (800c29c <__assert_func+0x34>)
 800c282:	462b      	mov	r3, r5
 800c284:	f000 fbca 	bl	800ca1c <fiprintf>
 800c288:	f000 fbda 	bl	800ca40 <abort>
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <__assert_func+0x38>)
 800c28e:	461c      	mov	r4, r3
 800c290:	e7f3      	b.n	800c27a <__assert_func+0x12>
 800c292:	bf00      	nop
 800c294:	2000007c 	.word	0x2000007c
 800c298:	0800e51a 	.word	0x0800e51a
 800c29c:	0800e527 	.word	0x0800e527
 800c2a0:	0800e555 	.word	0x0800e555

0800c2a4 <_calloc_r>:
 800c2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2a6:	fba1 2402 	umull	r2, r4, r1, r2
 800c2aa:	b94c      	cbnz	r4, 800c2c0 <_calloc_r+0x1c>
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	9201      	str	r2, [sp, #4]
 800c2b0:	f7fd fff8 	bl	800a2a4 <_malloc_r>
 800c2b4:	9a01      	ldr	r2, [sp, #4]
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	b930      	cbnz	r0, 800c2c8 <_calloc_r+0x24>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	b003      	add	sp, #12
 800c2be:	bd30      	pop	{r4, r5, pc}
 800c2c0:	220c      	movs	r2, #12
 800c2c2:	6002      	str	r2, [r0, #0]
 800c2c4:	2500      	movs	r5, #0
 800c2c6:	e7f8      	b.n	800c2ba <_calloc_r+0x16>
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	f7fd f869 	bl	80093a0 <memset>
 800c2ce:	e7f4      	b.n	800c2ba <_calloc_r+0x16>

0800c2d0 <rshift>:
 800c2d0:	6903      	ldr	r3, [r0, #16]
 800c2d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2de:	f100 0414 	add.w	r4, r0, #20
 800c2e2:	dd45      	ble.n	800c370 <rshift+0xa0>
 800c2e4:	f011 011f 	ands.w	r1, r1, #31
 800c2e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2f0:	d10c      	bne.n	800c30c <rshift+0x3c>
 800c2f2:	f100 0710 	add.w	r7, r0, #16
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	42b1      	cmp	r1, r6
 800c2fa:	d334      	bcc.n	800c366 <rshift+0x96>
 800c2fc:	1a9b      	subs	r3, r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	1eea      	subs	r2, r5, #3
 800c302:	4296      	cmp	r6, r2
 800c304:	bf38      	it	cc
 800c306:	2300      	movcc	r3, #0
 800c308:	4423      	add	r3, r4
 800c30a:	e015      	b.n	800c338 <rshift+0x68>
 800c30c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c310:	f1c1 0820 	rsb	r8, r1, #32
 800c314:	40cf      	lsrs	r7, r1
 800c316:	f105 0e04 	add.w	lr, r5, #4
 800c31a:	46a1      	mov	r9, r4
 800c31c:	4576      	cmp	r6, lr
 800c31e:	46f4      	mov	ip, lr
 800c320:	d815      	bhi.n	800c34e <rshift+0x7e>
 800c322:	1a9a      	subs	r2, r3, r2
 800c324:	0092      	lsls	r2, r2, #2
 800c326:	3a04      	subs	r2, #4
 800c328:	3501      	adds	r5, #1
 800c32a:	42ae      	cmp	r6, r5
 800c32c:	bf38      	it	cc
 800c32e:	2200      	movcc	r2, #0
 800c330:	18a3      	adds	r3, r4, r2
 800c332:	50a7      	str	r7, [r4, r2]
 800c334:	b107      	cbz	r7, 800c338 <rshift+0x68>
 800c336:	3304      	adds	r3, #4
 800c338:	1b1a      	subs	r2, r3, r4
 800c33a:	42a3      	cmp	r3, r4
 800c33c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c340:	bf08      	it	eq
 800c342:	2300      	moveq	r3, #0
 800c344:	6102      	str	r2, [r0, #16]
 800c346:	bf08      	it	eq
 800c348:	6143      	streq	r3, [r0, #20]
 800c34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c34e:	f8dc c000 	ldr.w	ip, [ip]
 800c352:	fa0c fc08 	lsl.w	ip, ip, r8
 800c356:	ea4c 0707 	orr.w	r7, ip, r7
 800c35a:	f849 7b04 	str.w	r7, [r9], #4
 800c35e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c362:	40cf      	lsrs	r7, r1
 800c364:	e7da      	b.n	800c31c <rshift+0x4c>
 800c366:	f851 cb04 	ldr.w	ip, [r1], #4
 800c36a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c36e:	e7c3      	b.n	800c2f8 <rshift+0x28>
 800c370:	4623      	mov	r3, r4
 800c372:	e7e1      	b.n	800c338 <rshift+0x68>

0800c374 <__hexdig_fun>:
 800c374:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c378:	2b09      	cmp	r3, #9
 800c37a:	d802      	bhi.n	800c382 <__hexdig_fun+0xe>
 800c37c:	3820      	subs	r0, #32
 800c37e:	b2c0      	uxtb	r0, r0
 800c380:	4770      	bx	lr
 800c382:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c386:	2b05      	cmp	r3, #5
 800c388:	d801      	bhi.n	800c38e <__hexdig_fun+0x1a>
 800c38a:	3847      	subs	r0, #71	; 0x47
 800c38c:	e7f7      	b.n	800c37e <__hexdig_fun+0xa>
 800c38e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c392:	2b05      	cmp	r3, #5
 800c394:	d801      	bhi.n	800c39a <__hexdig_fun+0x26>
 800c396:	3827      	subs	r0, #39	; 0x27
 800c398:	e7f1      	b.n	800c37e <__hexdig_fun+0xa>
 800c39a:	2000      	movs	r0, #0
 800c39c:	4770      	bx	lr
	...

0800c3a0 <__gethex>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	4617      	mov	r7, r2
 800c3a6:	680a      	ldr	r2, [r1, #0]
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	f102 0b02 	add.w	fp, r2, #2
 800c3ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c3b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c3b6:	4681      	mov	r9, r0
 800c3b8:	468a      	mov	sl, r1
 800c3ba:	9302      	str	r3, [sp, #8]
 800c3bc:	32fe      	adds	r2, #254	; 0xfe
 800c3be:	eb02 030b 	add.w	r3, r2, fp
 800c3c2:	46d8      	mov	r8, fp
 800c3c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	2830      	cmp	r0, #48	; 0x30
 800c3cc:	d0f7      	beq.n	800c3be <__gethex+0x1e>
 800c3ce:	f7ff ffd1 	bl	800c374 <__hexdig_fun>
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d138      	bne.n	800c44a <__gethex+0xaa>
 800c3d8:	49a7      	ldr	r1, [pc, #668]	; (800c678 <__gethex+0x2d8>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4640      	mov	r0, r8
 800c3de:	f7ff fef7 	bl	800c1d0 <strncmp>
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d169      	bne.n	800c4bc <__gethex+0x11c>
 800c3e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c3ec:	465d      	mov	r5, fp
 800c3ee:	f7ff ffc1 	bl	800c374 <__hexdig_fun>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d064      	beq.n	800c4c0 <__gethex+0x120>
 800c3f6:	465a      	mov	r2, fp
 800c3f8:	7810      	ldrb	r0, [r2, #0]
 800c3fa:	2830      	cmp	r0, #48	; 0x30
 800c3fc:	4690      	mov	r8, r2
 800c3fe:	f102 0201 	add.w	r2, r2, #1
 800c402:	d0f9      	beq.n	800c3f8 <__gethex+0x58>
 800c404:	f7ff ffb6 	bl	800c374 <__hexdig_fun>
 800c408:	2301      	movs	r3, #1
 800c40a:	fab0 f480 	clz	r4, r0
 800c40e:	0964      	lsrs	r4, r4, #5
 800c410:	465e      	mov	r6, fp
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	4642      	mov	r2, r8
 800c416:	4615      	mov	r5, r2
 800c418:	3201      	adds	r2, #1
 800c41a:	7828      	ldrb	r0, [r5, #0]
 800c41c:	f7ff ffaa 	bl	800c374 <__hexdig_fun>
 800c420:	2800      	cmp	r0, #0
 800c422:	d1f8      	bne.n	800c416 <__gethex+0x76>
 800c424:	4994      	ldr	r1, [pc, #592]	; (800c678 <__gethex+0x2d8>)
 800c426:	2201      	movs	r2, #1
 800c428:	4628      	mov	r0, r5
 800c42a:	f7ff fed1 	bl	800c1d0 <strncmp>
 800c42e:	b978      	cbnz	r0, 800c450 <__gethex+0xb0>
 800c430:	b946      	cbnz	r6, 800c444 <__gethex+0xa4>
 800c432:	1c6e      	adds	r6, r5, #1
 800c434:	4632      	mov	r2, r6
 800c436:	4615      	mov	r5, r2
 800c438:	3201      	adds	r2, #1
 800c43a:	7828      	ldrb	r0, [r5, #0]
 800c43c:	f7ff ff9a 	bl	800c374 <__hexdig_fun>
 800c440:	2800      	cmp	r0, #0
 800c442:	d1f8      	bne.n	800c436 <__gethex+0x96>
 800c444:	1b73      	subs	r3, r6, r5
 800c446:	009e      	lsls	r6, r3, #2
 800c448:	e004      	b.n	800c454 <__gethex+0xb4>
 800c44a:	2400      	movs	r4, #0
 800c44c:	4626      	mov	r6, r4
 800c44e:	e7e1      	b.n	800c414 <__gethex+0x74>
 800c450:	2e00      	cmp	r6, #0
 800c452:	d1f7      	bne.n	800c444 <__gethex+0xa4>
 800c454:	782b      	ldrb	r3, [r5, #0]
 800c456:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c45a:	2b50      	cmp	r3, #80	; 0x50
 800c45c:	d13d      	bne.n	800c4da <__gethex+0x13a>
 800c45e:	786b      	ldrb	r3, [r5, #1]
 800c460:	2b2b      	cmp	r3, #43	; 0x2b
 800c462:	d02f      	beq.n	800c4c4 <__gethex+0x124>
 800c464:	2b2d      	cmp	r3, #45	; 0x2d
 800c466:	d031      	beq.n	800c4cc <__gethex+0x12c>
 800c468:	1c69      	adds	r1, r5, #1
 800c46a:	f04f 0b00 	mov.w	fp, #0
 800c46e:	7808      	ldrb	r0, [r1, #0]
 800c470:	f7ff ff80 	bl	800c374 <__hexdig_fun>
 800c474:	1e42      	subs	r2, r0, #1
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	2a18      	cmp	r2, #24
 800c47a:	d82e      	bhi.n	800c4da <__gethex+0x13a>
 800c47c:	f1a0 0210 	sub.w	r2, r0, #16
 800c480:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c484:	f7ff ff76 	bl	800c374 <__hexdig_fun>
 800c488:	f100 3cff 	add.w	ip, r0, #4294967295
 800c48c:	fa5f fc8c 	uxtb.w	ip, ip
 800c490:	f1bc 0f18 	cmp.w	ip, #24
 800c494:	d91d      	bls.n	800c4d2 <__gethex+0x132>
 800c496:	f1bb 0f00 	cmp.w	fp, #0
 800c49a:	d000      	beq.n	800c49e <__gethex+0xfe>
 800c49c:	4252      	negs	r2, r2
 800c49e:	4416      	add	r6, r2
 800c4a0:	f8ca 1000 	str.w	r1, [sl]
 800c4a4:	b1dc      	cbz	r4, 800c4de <__gethex+0x13e>
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	bf14      	ite	ne
 800c4ac:	f04f 0800 	movne.w	r8, #0
 800c4b0:	f04f 0806 	moveq.w	r8, #6
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	b005      	add	sp, #20
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	4645      	mov	r5, r8
 800c4be:	4626      	mov	r6, r4
 800c4c0:	2401      	movs	r4, #1
 800c4c2:	e7c7      	b.n	800c454 <__gethex+0xb4>
 800c4c4:	f04f 0b00 	mov.w	fp, #0
 800c4c8:	1ca9      	adds	r1, r5, #2
 800c4ca:	e7d0      	b.n	800c46e <__gethex+0xce>
 800c4cc:	f04f 0b01 	mov.w	fp, #1
 800c4d0:	e7fa      	b.n	800c4c8 <__gethex+0x128>
 800c4d2:	230a      	movs	r3, #10
 800c4d4:	fb03 0002 	mla	r0, r3, r2, r0
 800c4d8:	e7d0      	b.n	800c47c <__gethex+0xdc>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	e7e0      	b.n	800c4a0 <__gethex+0x100>
 800c4de:	eba5 0308 	sub.w	r3, r5, r8
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	2b07      	cmp	r3, #7
 800c4e8:	dc0a      	bgt.n	800c500 <__gethex+0x160>
 800c4ea:	4648      	mov	r0, r9
 800c4ec:	f7fd ff66 	bl	800a3bc <_Balloc>
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	b940      	cbnz	r0, 800c506 <__gethex+0x166>
 800c4f4:	4b61      	ldr	r3, [pc, #388]	; (800c67c <__gethex+0x2dc>)
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	21e4      	movs	r1, #228	; 0xe4
 800c4fa:	4861      	ldr	r0, [pc, #388]	; (800c680 <__gethex+0x2e0>)
 800c4fc:	f7ff feb4 	bl	800c268 <__assert_func>
 800c500:	3101      	adds	r1, #1
 800c502:	105b      	asrs	r3, r3, #1
 800c504:	e7ef      	b.n	800c4e6 <__gethex+0x146>
 800c506:	f100 0a14 	add.w	sl, r0, #20
 800c50a:	2300      	movs	r3, #0
 800c50c:	495a      	ldr	r1, [pc, #360]	; (800c678 <__gethex+0x2d8>)
 800c50e:	f8cd a004 	str.w	sl, [sp, #4]
 800c512:	469b      	mov	fp, r3
 800c514:	45a8      	cmp	r8, r5
 800c516:	d342      	bcc.n	800c59e <__gethex+0x1fe>
 800c518:	9801      	ldr	r0, [sp, #4]
 800c51a:	f840 bb04 	str.w	fp, [r0], #4
 800c51e:	eba0 000a 	sub.w	r0, r0, sl
 800c522:	1080      	asrs	r0, r0, #2
 800c524:	6120      	str	r0, [r4, #16]
 800c526:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c52a:	4658      	mov	r0, fp
 800c52c:	f7fe f838 	bl	800a5a0 <__hi0bits>
 800c530:	683d      	ldr	r5, [r7, #0]
 800c532:	eba8 0000 	sub.w	r0, r8, r0
 800c536:	42a8      	cmp	r0, r5
 800c538:	dd59      	ble.n	800c5ee <__gethex+0x24e>
 800c53a:	eba0 0805 	sub.w	r8, r0, r5
 800c53e:	4641      	mov	r1, r8
 800c540:	4620      	mov	r0, r4
 800c542:	f7fe fbc7 	bl	800acd4 <__any_on>
 800c546:	4683      	mov	fp, r0
 800c548:	b1b8      	cbz	r0, 800c57a <__gethex+0x1da>
 800c54a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c54e:	1159      	asrs	r1, r3, #5
 800c550:	f003 021f 	and.w	r2, r3, #31
 800c554:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c558:	f04f 0b01 	mov.w	fp, #1
 800c55c:	fa0b f202 	lsl.w	r2, fp, r2
 800c560:	420a      	tst	r2, r1
 800c562:	d00a      	beq.n	800c57a <__gethex+0x1da>
 800c564:	455b      	cmp	r3, fp
 800c566:	dd06      	ble.n	800c576 <__gethex+0x1d6>
 800c568:	f1a8 0102 	sub.w	r1, r8, #2
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7fe fbb1 	bl	800acd4 <__any_on>
 800c572:	2800      	cmp	r0, #0
 800c574:	d138      	bne.n	800c5e8 <__gethex+0x248>
 800c576:	f04f 0b02 	mov.w	fp, #2
 800c57a:	4641      	mov	r1, r8
 800c57c:	4620      	mov	r0, r4
 800c57e:	f7ff fea7 	bl	800c2d0 <rshift>
 800c582:	4446      	add	r6, r8
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	42b3      	cmp	r3, r6
 800c588:	da41      	bge.n	800c60e <__gethex+0x26e>
 800c58a:	4621      	mov	r1, r4
 800c58c:	4648      	mov	r0, r9
 800c58e:	f7fd ff55 	bl	800a43c <_Bfree>
 800c592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c594:	2300      	movs	r3, #0
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c59c:	e78a      	b.n	800c4b4 <__gethex+0x114>
 800c59e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c5a2:	2a2e      	cmp	r2, #46	; 0x2e
 800c5a4:	d014      	beq.n	800c5d0 <__gethex+0x230>
 800c5a6:	2b20      	cmp	r3, #32
 800c5a8:	d106      	bne.n	800c5b8 <__gethex+0x218>
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	f843 bb04 	str.w	fp, [r3], #4
 800c5b0:	f04f 0b00 	mov.w	fp, #0
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	465b      	mov	r3, fp
 800c5b8:	7828      	ldrb	r0, [r5, #0]
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	f7ff feda 	bl	800c374 <__hexdig_fun>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	f000 000f 	and.w	r0, r0, #15
 800c5c6:	4098      	lsls	r0, r3
 800c5c8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	e7a1      	b.n	800c514 <__gethex+0x174>
 800c5d0:	45a8      	cmp	r8, r5
 800c5d2:	d8e8      	bhi.n	800c5a6 <__gethex+0x206>
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	f7ff fdf9 	bl	800c1d0 <strncmp>
 800c5de:	4926      	ldr	r1, [pc, #152]	; (800c678 <__gethex+0x2d8>)
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d1df      	bne.n	800c5a6 <__gethex+0x206>
 800c5e6:	e795      	b.n	800c514 <__gethex+0x174>
 800c5e8:	f04f 0b03 	mov.w	fp, #3
 800c5ec:	e7c5      	b.n	800c57a <__gethex+0x1da>
 800c5ee:	da0b      	bge.n	800c608 <__gethex+0x268>
 800c5f0:	eba5 0800 	sub.w	r8, r5, r0
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	4648      	mov	r0, r9
 800c5fa:	f7fe f939 	bl	800a870 <__lshift>
 800c5fe:	eba6 0608 	sub.w	r6, r6, r8
 800c602:	4604      	mov	r4, r0
 800c604:	f100 0a14 	add.w	sl, r0, #20
 800c608:	f04f 0b00 	mov.w	fp, #0
 800c60c:	e7ba      	b.n	800c584 <__gethex+0x1e4>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	42b3      	cmp	r3, r6
 800c612:	dd73      	ble.n	800c6fc <__gethex+0x35c>
 800c614:	1b9e      	subs	r6, r3, r6
 800c616:	42b5      	cmp	r5, r6
 800c618:	dc34      	bgt.n	800c684 <__gethex+0x2e4>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d023      	beq.n	800c668 <__gethex+0x2c8>
 800c620:	2b03      	cmp	r3, #3
 800c622:	d025      	beq.n	800c670 <__gethex+0x2d0>
 800c624:	2b01      	cmp	r3, #1
 800c626:	d115      	bne.n	800c654 <__gethex+0x2b4>
 800c628:	42b5      	cmp	r5, r6
 800c62a:	d113      	bne.n	800c654 <__gethex+0x2b4>
 800c62c:	2d01      	cmp	r5, #1
 800c62e:	d10b      	bne.n	800c648 <__gethex+0x2a8>
 800c630:	9a02      	ldr	r2, [sp, #8]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	2301      	movs	r3, #1
 800c638:	6123      	str	r3, [r4, #16]
 800c63a:	f8ca 3000 	str.w	r3, [sl]
 800c63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c640:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c644:	601c      	str	r4, [r3, #0]
 800c646:	e735      	b.n	800c4b4 <__gethex+0x114>
 800c648:	1e69      	subs	r1, r5, #1
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7fe fb42 	bl	800acd4 <__any_on>
 800c650:	2800      	cmp	r0, #0
 800c652:	d1ed      	bne.n	800c630 <__gethex+0x290>
 800c654:	4621      	mov	r1, r4
 800c656:	4648      	mov	r0, r9
 800c658:	f7fd fef0 	bl	800a43c <_Bfree>
 800c65c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c65e:	2300      	movs	r3, #0
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c666:	e725      	b.n	800c4b4 <__gethex+0x114>
 800c668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1f2      	bne.n	800c654 <__gethex+0x2b4>
 800c66e:	e7df      	b.n	800c630 <__gethex+0x290>
 800c670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1dc      	bne.n	800c630 <__gethex+0x290>
 800c676:	e7ed      	b.n	800c654 <__gethex+0x2b4>
 800c678:	0800e3ac 	.word	0x0800e3ac
 800c67c:	0800e245 	.word	0x0800e245
 800c680:	0800e556 	.word	0x0800e556
 800c684:	f106 38ff 	add.w	r8, r6, #4294967295
 800c688:	f1bb 0f00 	cmp.w	fp, #0
 800c68c:	d133      	bne.n	800c6f6 <__gethex+0x356>
 800c68e:	f1b8 0f00 	cmp.w	r8, #0
 800c692:	d004      	beq.n	800c69e <__gethex+0x2fe>
 800c694:	4641      	mov	r1, r8
 800c696:	4620      	mov	r0, r4
 800c698:	f7fe fb1c 	bl	800acd4 <__any_on>
 800c69c:	4683      	mov	fp, r0
 800c69e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c6a8:	f008 081f 	and.w	r8, r8, #31
 800c6ac:	fa03 f308 	lsl.w	r3, r3, r8
 800c6b0:	4213      	tst	r3, r2
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	bf18      	it	ne
 800c6b8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c6bc:	1bad      	subs	r5, r5, r6
 800c6be:	f7ff fe07 	bl	800c2d0 <rshift>
 800c6c2:	687e      	ldr	r6, [r7, #4]
 800c6c4:	f04f 0802 	mov.w	r8, #2
 800c6c8:	f1bb 0f00 	cmp.w	fp, #0
 800c6cc:	d04a      	beq.n	800c764 <__gethex+0x3c4>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d016      	beq.n	800c702 <__gethex+0x362>
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d018      	beq.n	800c70a <__gethex+0x36a>
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d109      	bne.n	800c6f0 <__gethex+0x350>
 800c6dc:	f01b 0f02 	tst.w	fp, #2
 800c6e0:	d006      	beq.n	800c6f0 <__gethex+0x350>
 800c6e2:	f8da 3000 	ldr.w	r3, [sl]
 800c6e6:	ea4b 0b03 	orr.w	fp, fp, r3
 800c6ea:	f01b 0f01 	tst.w	fp, #1
 800c6ee:	d10f      	bne.n	800c710 <__gethex+0x370>
 800c6f0:	f048 0810 	orr.w	r8, r8, #16
 800c6f4:	e036      	b.n	800c764 <__gethex+0x3c4>
 800c6f6:	f04f 0b01 	mov.w	fp, #1
 800c6fa:	e7d0      	b.n	800c69e <__gethex+0x2fe>
 800c6fc:	f04f 0801 	mov.w	r8, #1
 800c700:	e7e2      	b.n	800c6c8 <__gethex+0x328>
 800c702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c704:	f1c3 0301 	rsb	r3, r3, #1
 800c708:	930f      	str	r3, [sp, #60]	; 0x3c
 800c70a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0ef      	beq.n	800c6f0 <__gethex+0x350>
 800c710:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c714:	f104 0214 	add.w	r2, r4, #20
 800c718:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c722:	2300      	movs	r3, #0
 800c724:	4694      	mov	ip, r2
 800c726:	f852 1b04 	ldr.w	r1, [r2], #4
 800c72a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c72e:	d01e      	beq.n	800c76e <__gethex+0x3ce>
 800c730:	3101      	adds	r1, #1
 800c732:	f8cc 1000 	str.w	r1, [ip]
 800c736:	f1b8 0f02 	cmp.w	r8, #2
 800c73a:	f104 0214 	add.w	r2, r4, #20
 800c73e:	d13d      	bne.n	800c7bc <__gethex+0x41c>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3b01      	subs	r3, #1
 800c744:	42ab      	cmp	r3, r5
 800c746:	d10b      	bne.n	800c760 <__gethex+0x3c0>
 800c748:	1169      	asrs	r1, r5, #5
 800c74a:	2301      	movs	r3, #1
 800c74c:	f005 051f 	and.w	r5, r5, #31
 800c750:	fa03 f505 	lsl.w	r5, r3, r5
 800c754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c758:	421d      	tst	r5, r3
 800c75a:	bf18      	it	ne
 800c75c:	f04f 0801 	movne.w	r8, #1
 800c760:	f048 0820 	orr.w	r8, r8, #32
 800c764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c766:	601c      	str	r4, [r3, #0]
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	601e      	str	r6, [r3, #0]
 800c76c:	e6a2      	b.n	800c4b4 <__gethex+0x114>
 800c76e:	4290      	cmp	r0, r2
 800c770:	f842 3c04 	str.w	r3, [r2, #-4]
 800c774:	d8d6      	bhi.n	800c724 <__gethex+0x384>
 800c776:	68a2      	ldr	r2, [r4, #8]
 800c778:	4593      	cmp	fp, r2
 800c77a:	db17      	blt.n	800c7ac <__gethex+0x40c>
 800c77c:	6861      	ldr	r1, [r4, #4]
 800c77e:	4648      	mov	r0, r9
 800c780:	3101      	adds	r1, #1
 800c782:	f7fd fe1b 	bl	800a3bc <_Balloc>
 800c786:	4682      	mov	sl, r0
 800c788:	b918      	cbnz	r0, 800c792 <__gethex+0x3f2>
 800c78a:	4b1b      	ldr	r3, [pc, #108]	; (800c7f8 <__gethex+0x458>)
 800c78c:	4602      	mov	r2, r0
 800c78e:	2184      	movs	r1, #132	; 0x84
 800c790:	e6b3      	b.n	800c4fa <__gethex+0x15a>
 800c792:	6922      	ldr	r2, [r4, #16]
 800c794:	3202      	adds	r2, #2
 800c796:	f104 010c 	add.w	r1, r4, #12
 800c79a:	0092      	lsls	r2, r2, #2
 800c79c:	300c      	adds	r0, #12
 800c79e:	f7fc fe7e 	bl	800949e <memcpy>
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	4648      	mov	r0, r9
 800c7a6:	f7fd fe49 	bl	800a43c <_Bfree>
 800c7aa:	4654      	mov	r4, sl
 800c7ac:	6922      	ldr	r2, [r4, #16]
 800c7ae:	1c51      	adds	r1, r2, #1
 800c7b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c7b4:	6121      	str	r1, [r4, #16]
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	6151      	str	r1, [r2, #20]
 800c7ba:	e7bc      	b.n	800c736 <__gethex+0x396>
 800c7bc:	6921      	ldr	r1, [r4, #16]
 800c7be:	4559      	cmp	r1, fp
 800c7c0:	dd0b      	ble.n	800c7da <__gethex+0x43a>
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff fd83 	bl	800c2d0 <rshift>
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	42b3      	cmp	r3, r6
 800c7d0:	f6ff aedb 	blt.w	800c58a <__gethex+0x1ea>
 800c7d4:	f04f 0801 	mov.w	r8, #1
 800c7d8:	e7c2      	b.n	800c760 <__gethex+0x3c0>
 800c7da:	f015 051f 	ands.w	r5, r5, #31
 800c7de:	d0f9      	beq.n	800c7d4 <__gethex+0x434>
 800c7e0:	9b01      	ldr	r3, [sp, #4]
 800c7e2:	441a      	add	r2, r3
 800c7e4:	f1c5 0520 	rsb	r5, r5, #32
 800c7e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c7ec:	f7fd fed8 	bl	800a5a0 <__hi0bits>
 800c7f0:	42a8      	cmp	r0, r5
 800c7f2:	dbe6      	blt.n	800c7c2 <__gethex+0x422>
 800c7f4:	e7ee      	b.n	800c7d4 <__gethex+0x434>
 800c7f6:	bf00      	nop
 800c7f8:	0800e245 	.word	0x0800e245

0800c7fc <L_shift>:
 800c7fc:	f1c2 0208 	rsb	r2, r2, #8
 800c800:	0092      	lsls	r2, r2, #2
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	f1c2 0620 	rsb	r6, r2, #32
 800c808:	6843      	ldr	r3, [r0, #4]
 800c80a:	6804      	ldr	r4, [r0, #0]
 800c80c:	fa03 f506 	lsl.w	r5, r3, r6
 800c810:	432c      	orrs	r4, r5
 800c812:	40d3      	lsrs	r3, r2
 800c814:	6004      	str	r4, [r0, #0]
 800c816:	f840 3f04 	str.w	r3, [r0, #4]!
 800c81a:	4288      	cmp	r0, r1
 800c81c:	d3f4      	bcc.n	800c808 <L_shift+0xc>
 800c81e:	bd70      	pop	{r4, r5, r6, pc}

0800c820 <__match>:
 800c820:	b530      	push	{r4, r5, lr}
 800c822:	6803      	ldr	r3, [r0, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c82a:	b914      	cbnz	r4, 800c832 <__match+0x12>
 800c82c:	6003      	str	r3, [r0, #0]
 800c82e:	2001      	movs	r0, #1
 800c830:	bd30      	pop	{r4, r5, pc}
 800c832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c836:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c83a:	2d19      	cmp	r5, #25
 800c83c:	bf98      	it	ls
 800c83e:	3220      	addls	r2, #32
 800c840:	42a2      	cmp	r2, r4
 800c842:	d0f0      	beq.n	800c826 <__match+0x6>
 800c844:	2000      	movs	r0, #0
 800c846:	e7f3      	b.n	800c830 <__match+0x10>

0800c848 <__hexnan>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	680b      	ldr	r3, [r1, #0]
 800c84e:	6801      	ldr	r1, [r0, #0]
 800c850:	115e      	asrs	r6, r3, #5
 800c852:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c856:	f013 031f 	ands.w	r3, r3, #31
 800c85a:	b087      	sub	sp, #28
 800c85c:	bf18      	it	ne
 800c85e:	3604      	addne	r6, #4
 800c860:	2500      	movs	r5, #0
 800c862:	1f37      	subs	r7, r6, #4
 800c864:	4682      	mov	sl, r0
 800c866:	4690      	mov	r8, r2
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c86e:	46b9      	mov	r9, r7
 800c870:	463c      	mov	r4, r7
 800c872:	9502      	str	r5, [sp, #8]
 800c874:	46ab      	mov	fp, r5
 800c876:	784a      	ldrb	r2, [r1, #1]
 800c878:	1c4b      	adds	r3, r1, #1
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	b342      	cbz	r2, 800c8d0 <__hexnan+0x88>
 800c87e:	4610      	mov	r0, r2
 800c880:	9105      	str	r1, [sp, #20]
 800c882:	9204      	str	r2, [sp, #16]
 800c884:	f7ff fd76 	bl	800c374 <__hexdig_fun>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d14f      	bne.n	800c92c <__hexnan+0xe4>
 800c88c:	9a04      	ldr	r2, [sp, #16]
 800c88e:	9905      	ldr	r1, [sp, #20]
 800c890:	2a20      	cmp	r2, #32
 800c892:	d818      	bhi.n	800c8c6 <__hexnan+0x7e>
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	459b      	cmp	fp, r3
 800c898:	dd13      	ble.n	800c8c2 <__hexnan+0x7a>
 800c89a:	454c      	cmp	r4, r9
 800c89c:	d206      	bcs.n	800c8ac <__hexnan+0x64>
 800c89e:	2d07      	cmp	r5, #7
 800c8a0:	dc04      	bgt.n	800c8ac <__hexnan+0x64>
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7ff ffa8 	bl	800c7fc <L_shift>
 800c8ac:	4544      	cmp	r4, r8
 800c8ae:	d950      	bls.n	800c952 <__hexnan+0x10a>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f1a4 0904 	sub.w	r9, r4, #4
 800c8b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8ba:	f8cd b008 	str.w	fp, [sp, #8]
 800c8be:	464c      	mov	r4, r9
 800c8c0:	461d      	mov	r5, r3
 800c8c2:	9903      	ldr	r1, [sp, #12]
 800c8c4:	e7d7      	b.n	800c876 <__hexnan+0x2e>
 800c8c6:	2a29      	cmp	r2, #41	; 0x29
 800c8c8:	d155      	bne.n	800c976 <__hexnan+0x12e>
 800c8ca:	3102      	adds	r1, #2
 800c8cc:	f8ca 1000 	str.w	r1, [sl]
 800c8d0:	f1bb 0f00 	cmp.w	fp, #0
 800c8d4:	d04f      	beq.n	800c976 <__hexnan+0x12e>
 800c8d6:	454c      	cmp	r4, r9
 800c8d8:	d206      	bcs.n	800c8e8 <__hexnan+0xa0>
 800c8da:	2d07      	cmp	r5, #7
 800c8dc:	dc04      	bgt.n	800c8e8 <__hexnan+0xa0>
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7ff ff8a 	bl	800c7fc <L_shift>
 800c8e8:	4544      	cmp	r4, r8
 800c8ea:	d934      	bls.n	800c956 <__hexnan+0x10e>
 800c8ec:	f1a8 0204 	sub.w	r2, r8, #4
 800c8f0:	4623      	mov	r3, r4
 800c8f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8fa:	429f      	cmp	r7, r3
 800c8fc:	d2f9      	bcs.n	800c8f2 <__hexnan+0xaa>
 800c8fe:	1b3b      	subs	r3, r7, r4
 800c900:	f023 0303 	bic.w	r3, r3, #3
 800c904:	3304      	adds	r3, #4
 800c906:	3e03      	subs	r6, #3
 800c908:	3401      	adds	r4, #1
 800c90a:	42a6      	cmp	r6, r4
 800c90c:	bf38      	it	cc
 800c90e:	2304      	movcc	r3, #4
 800c910:	4443      	add	r3, r8
 800c912:	2200      	movs	r2, #0
 800c914:	f843 2b04 	str.w	r2, [r3], #4
 800c918:	429f      	cmp	r7, r3
 800c91a:	d2fb      	bcs.n	800c914 <__hexnan+0xcc>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	b91b      	cbnz	r3, 800c928 <__hexnan+0xe0>
 800c920:	4547      	cmp	r7, r8
 800c922:	d126      	bne.n	800c972 <__hexnan+0x12a>
 800c924:	2301      	movs	r3, #1
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	2005      	movs	r0, #5
 800c92a:	e025      	b.n	800c978 <__hexnan+0x130>
 800c92c:	3501      	adds	r5, #1
 800c92e:	2d08      	cmp	r5, #8
 800c930:	f10b 0b01 	add.w	fp, fp, #1
 800c934:	dd06      	ble.n	800c944 <__hexnan+0xfc>
 800c936:	4544      	cmp	r4, r8
 800c938:	d9c3      	bls.n	800c8c2 <__hexnan+0x7a>
 800c93a:	2300      	movs	r3, #0
 800c93c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c940:	2501      	movs	r5, #1
 800c942:	3c04      	subs	r4, #4
 800c944:	6822      	ldr	r2, [r4, #0]
 800c946:	f000 000f 	and.w	r0, r0, #15
 800c94a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c94e:	6020      	str	r0, [r4, #0]
 800c950:	e7b7      	b.n	800c8c2 <__hexnan+0x7a>
 800c952:	2508      	movs	r5, #8
 800c954:	e7b5      	b.n	800c8c2 <__hexnan+0x7a>
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0df      	beq.n	800c91c <__hexnan+0xd4>
 800c95c:	f1c3 0320 	rsb	r3, r3, #32
 800c960:	f04f 32ff 	mov.w	r2, #4294967295
 800c964:	40da      	lsrs	r2, r3
 800c966:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c96a:	4013      	ands	r3, r2
 800c96c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c970:	e7d4      	b.n	800c91c <__hexnan+0xd4>
 800c972:	3f04      	subs	r7, #4
 800c974:	e7d2      	b.n	800c91c <__hexnan+0xd4>
 800c976:	2004      	movs	r0, #4
 800c978:	b007      	add	sp, #28
 800c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c97e <__ascii_mbtowc>:
 800c97e:	b082      	sub	sp, #8
 800c980:	b901      	cbnz	r1, 800c984 <__ascii_mbtowc+0x6>
 800c982:	a901      	add	r1, sp, #4
 800c984:	b142      	cbz	r2, 800c998 <__ascii_mbtowc+0x1a>
 800c986:	b14b      	cbz	r3, 800c99c <__ascii_mbtowc+0x1e>
 800c988:	7813      	ldrb	r3, [r2, #0]
 800c98a:	600b      	str	r3, [r1, #0]
 800c98c:	7812      	ldrb	r2, [r2, #0]
 800c98e:	1e10      	subs	r0, r2, #0
 800c990:	bf18      	it	ne
 800c992:	2001      	movne	r0, #1
 800c994:	b002      	add	sp, #8
 800c996:	4770      	bx	lr
 800c998:	4610      	mov	r0, r2
 800c99a:	e7fb      	b.n	800c994 <__ascii_mbtowc+0x16>
 800c99c:	f06f 0001 	mvn.w	r0, #1
 800c9a0:	e7f8      	b.n	800c994 <__ascii_mbtowc+0x16>

0800c9a2 <_realloc_r>:
 800c9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	460e      	mov	r6, r1
 800c9ac:	b921      	cbnz	r1, 800c9b8 <_realloc_r+0x16>
 800c9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	f7fd bc76 	b.w	800a2a4 <_malloc_r>
 800c9b8:	b92a      	cbnz	r2, 800c9c6 <_realloc_r+0x24>
 800c9ba:	f7fd fbff 	bl	800a1bc <_free_r>
 800c9be:	4625      	mov	r5, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c6:	f000 f842 	bl	800ca4e <_malloc_usable_size_r>
 800c9ca:	4284      	cmp	r4, r0
 800c9cc:	4607      	mov	r7, r0
 800c9ce:	d802      	bhi.n	800c9d6 <_realloc_r+0x34>
 800c9d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9d4:	d812      	bhi.n	800c9fc <_realloc_r+0x5a>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4640      	mov	r0, r8
 800c9da:	f7fd fc63 	bl	800a2a4 <_malloc_r>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d0ed      	beq.n	800c9c0 <_realloc_r+0x1e>
 800c9e4:	42bc      	cmp	r4, r7
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	bf28      	it	cs
 800c9ec:	463a      	movcs	r2, r7
 800c9ee:	f7fc fd56 	bl	800949e <memcpy>
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	f7fd fbe1 	bl	800a1bc <_free_r>
 800c9fa:	e7e1      	b.n	800c9c0 <_realloc_r+0x1e>
 800c9fc:	4635      	mov	r5, r6
 800c9fe:	e7df      	b.n	800c9c0 <_realloc_r+0x1e>

0800ca00 <__ascii_wctomb>:
 800ca00:	b149      	cbz	r1, 800ca16 <__ascii_wctomb+0x16>
 800ca02:	2aff      	cmp	r2, #255	; 0xff
 800ca04:	bf85      	ittet	hi
 800ca06:	238a      	movhi	r3, #138	; 0x8a
 800ca08:	6003      	strhi	r3, [r0, #0]
 800ca0a:	700a      	strbls	r2, [r1, #0]
 800ca0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca10:	bf98      	it	ls
 800ca12:	2001      	movls	r0, #1
 800ca14:	4770      	bx	lr
 800ca16:	4608      	mov	r0, r1
 800ca18:	4770      	bx	lr
	...

0800ca1c <fiprintf>:
 800ca1c:	b40e      	push	{r1, r2, r3}
 800ca1e:	b503      	push	{r0, r1, lr}
 800ca20:	4601      	mov	r1, r0
 800ca22:	ab03      	add	r3, sp, #12
 800ca24:	4805      	ldr	r0, [pc, #20]	; (800ca3c <fiprintf+0x20>)
 800ca26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2a:	6800      	ldr	r0, [r0, #0]
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	f7ff f98b 	bl	800bd48 <_vfiprintf_r>
 800ca32:	b002      	add	sp, #8
 800ca34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca38:	b003      	add	sp, #12
 800ca3a:	4770      	bx	lr
 800ca3c:	2000007c 	.word	0x2000007c

0800ca40 <abort>:
 800ca40:	b508      	push	{r3, lr}
 800ca42:	2006      	movs	r0, #6
 800ca44:	f000 f834 	bl	800cab0 <raise>
 800ca48:	2001      	movs	r0, #1
 800ca4a:	f7f5 fd2c 	bl	80024a6 <_exit>

0800ca4e <_malloc_usable_size_r>:
 800ca4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca52:	1f18      	subs	r0, r3, #4
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfbc      	itt	lt
 800ca58:	580b      	ldrlt	r3, [r1, r0]
 800ca5a:	18c0      	addlt	r0, r0, r3
 800ca5c:	4770      	bx	lr

0800ca5e <_raise_r>:
 800ca5e:	291f      	cmp	r1, #31
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4604      	mov	r4, r0
 800ca64:	460d      	mov	r5, r1
 800ca66:	d904      	bls.n	800ca72 <_raise_r+0x14>
 800ca68:	2316      	movs	r3, #22
 800ca6a:	6003      	str	r3, [r0, #0]
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	bd38      	pop	{r3, r4, r5, pc}
 800ca72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca74:	b112      	cbz	r2, 800ca7c <_raise_r+0x1e>
 800ca76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca7a:	b94b      	cbnz	r3, 800ca90 <_raise_r+0x32>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 f831 	bl	800cae4 <_getpid_r>
 800ca82:	462a      	mov	r2, r5
 800ca84:	4601      	mov	r1, r0
 800ca86:	4620      	mov	r0, r4
 800ca88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca8c:	f000 b818 	b.w	800cac0 <_kill_r>
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d00a      	beq.n	800caaa <_raise_r+0x4c>
 800ca94:	1c59      	adds	r1, r3, #1
 800ca96:	d103      	bne.n	800caa0 <_raise_r+0x42>
 800ca98:	2316      	movs	r3, #22
 800ca9a:	6003      	str	r3, [r0, #0]
 800ca9c:	2001      	movs	r0, #1
 800ca9e:	e7e7      	b.n	800ca70 <_raise_r+0x12>
 800caa0:	2400      	movs	r4, #0
 800caa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caa6:	4628      	mov	r0, r5
 800caa8:	4798      	blx	r3
 800caaa:	2000      	movs	r0, #0
 800caac:	e7e0      	b.n	800ca70 <_raise_r+0x12>
	...

0800cab0 <raise>:
 800cab0:	4b02      	ldr	r3, [pc, #8]	; (800cabc <raise+0xc>)
 800cab2:	4601      	mov	r1, r0
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f7ff bfd2 	b.w	800ca5e <_raise_r>
 800caba:	bf00      	nop
 800cabc:	2000007c 	.word	0x2000007c

0800cac0 <_kill_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	; (800cae0 <_kill_r+0x20>)
 800cac4:	2300      	movs	r3, #0
 800cac6:	4604      	mov	r4, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	4611      	mov	r1, r2
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	f7f5 fcda 	bl	8002486 <_kill>
 800cad2:	1c43      	adds	r3, r0, #1
 800cad4:	d102      	bne.n	800cadc <_kill_r+0x1c>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	b103      	cbz	r3, 800cadc <_kill_r+0x1c>
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	bf00      	nop
 800cae0:	20004218 	.word	0x20004218

0800cae4 <_getpid_r>:
 800cae4:	f7f5 bcc7 	b.w	8002476 <_getpid>

0800cae8 <exp>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	ed2d 8b02 	vpush	{d8}
 800caee:	ec55 4b10 	vmov	r4, r5, d0
 800caf2:	f000 f8a5 	bl	800cc40 <__ieee754_exp>
 800caf6:	eeb0 8a40 	vmov.f32	s16, s0
 800cafa:	eef0 8a60 	vmov.f32	s17, s1
 800cafe:	ec45 4b10 	vmov	d0, r4, r5
 800cb02:	f000 f857 	bl	800cbb4 <finite>
 800cb06:	b168      	cbz	r0, 800cb24 <exp+0x3c>
 800cb08:	a317      	add	r3, pc, #92	; (adr r3, 800cb68 <exp+0x80>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f4 f819 	bl	8000b48 <__aeabi_dcmpgt>
 800cb16:	b160      	cbz	r0, 800cb32 <exp+0x4a>
 800cb18:	f7fc fc94 	bl	8009444 <__errno>
 800cb1c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800cb58 <exp+0x70>
 800cb20:	2322      	movs	r3, #34	; 0x22
 800cb22:	6003      	str	r3, [r0, #0]
 800cb24:	eeb0 0a48 	vmov.f32	s0, s16
 800cb28:	eef0 0a68 	vmov.f32	s1, s17
 800cb2c:	ecbd 8b02 	vpop	{d8}
 800cb30:	bd38      	pop	{r3, r4, r5, pc}
 800cb32:	a30f      	add	r3, pc, #60	; (adr r3, 800cb70 <exp+0x88>)
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 ffe6 	bl	8000b0c <__aeabi_dcmplt>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d0ef      	beq.n	800cb24 <exp+0x3c>
 800cb44:	f7fc fc7e 	bl	8009444 <__errno>
 800cb48:	2322      	movs	r3, #34	; 0x22
 800cb4a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800cb60 <exp+0x78>
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	e7e8      	b.n	800cb24 <exp+0x3c>
 800cb52:	bf00      	nop
 800cb54:	f3af 8000 	nop.w
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	7ff00000 	.word	0x7ff00000
	...
 800cb68:	fefa39ef 	.word	0xfefa39ef
 800cb6c:	40862e42 	.word	0x40862e42
 800cb70:	d52d3051 	.word	0xd52d3051
 800cb74:	c0874910 	.word	0xc0874910

0800cb78 <sqrtf>:
 800cb78:	b508      	push	{r3, lr}
 800cb7a:	ed2d 8b02 	vpush	{d8}
 800cb7e:	eeb0 8a40 	vmov.f32	s16, s0
 800cb82:	f000 f859 	bl	800cc38 <__ieee754_sqrtf>
 800cb86:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8e:	d60c      	bvs.n	800cbaa <sqrtf+0x32>
 800cb90:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cbb0 <sqrtf+0x38>
 800cb94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9c:	d505      	bpl.n	800cbaa <sqrtf+0x32>
 800cb9e:	f7fc fc51 	bl	8009444 <__errno>
 800cba2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cba6:	2321      	movs	r3, #33	; 0x21
 800cba8:	6003      	str	r3, [r0, #0]
 800cbaa:	ecbd 8b02 	vpop	{d8}
 800cbae:	bd08      	pop	{r3, pc}
 800cbb0:	00000000 	.word	0x00000000

0800cbb4 <finite>:
 800cbb4:	b082      	sub	sp, #8
 800cbb6:	ed8d 0b00 	vstr	d0, [sp]
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cbc0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cbc4:	0fc0      	lsrs	r0, r0, #31
 800cbc6:	b002      	add	sp, #8
 800cbc8:	4770      	bx	lr

0800cbca <fmaxf>:
 800cbca:	b508      	push	{r3, lr}
 800cbcc:	ed2d 8b02 	vpush	{d8}
 800cbd0:	eeb0 8a40 	vmov.f32	s16, s0
 800cbd4:	eef0 8a60 	vmov.f32	s17, s1
 800cbd8:	f000 f812 	bl	800cc00 <__fpclassifyf>
 800cbdc:	b148      	cbz	r0, 800cbf2 <fmaxf+0x28>
 800cbde:	eeb0 0a68 	vmov.f32	s0, s17
 800cbe2:	f000 f80d 	bl	800cc00 <__fpclassifyf>
 800cbe6:	b130      	cbz	r0, 800cbf6 <fmaxf+0x2c>
 800cbe8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	dc01      	bgt.n	800cbf6 <fmaxf+0x2c>
 800cbf2:	eeb0 8a68 	vmov.f32	s16, s17
 800cbf6:	eeb0 0a48 	vmov.f32	s0, s16
 800cbfa:	ecbd 8b02 	vpop	{d8}
 800cbfe:	bd08      	pop	{r3, pc}

0800cc00 <__fpclassifyf>:
 800cc00:	ee10 3a10 	vmov	r3, s0
 800cc04:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800cc08:	d00d      	beq.n	800cc26 <__fpclassifyf+0x26>
 800cc0a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800cc0e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cc12:	d30a      	bcc.n	800cc2a <__fpclassifyf+0x2a>
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <__fpclassifyf+0x34>)
 800cc16:	1e42      	subs	r2, r0, #1
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d908      	bls.n	800cc2e <__fpclassifyf+0x2e>
 800cc1c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800cc20:	4258      	negs	r0, r3
 800cc22:	4158      	adcs	r0, r3
 800cc24:	4770      	bx	lr
 800cc26:	2002      	movs	r0, #2
 800cc28:	4770      	bx	lr
 800cc2a:	2004      	movs	r0, #4
 800cc2c:	4770      	bx	lr
 800cc2e:	2003      	movs	r0, #3
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	007ffffe 	.word	0x007ffffe

0800cc38 <__ieee754_sqrtf>:
 800cc38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc3c:	4770      	bx	lr
	...

0800cc40 <__ieee754_exp>:
 800cc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	ec55 4b10 	vmov	r4, r5, d0
 800cc48:	49b5      	ldr	r1, [pc, #724]	; (800cf20 <__ieee754_exp+0x2e0>)
 800cc4a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cc4e:	428a      	cmp	r2, r1
 800cc50:	ed2d 8b04 	vpush	{d8-d9}
 800cc54:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800cc58:	d93b      	bls.n	800ccd2 <__ieee754_exp+0x92>
 800cc5a:	49b2      	ldr	r1, [pc, #712]	; (800cf24 <__ieee754_exp+0x2e4>)
 800cc5c:	428a      	cmp	r2, r1
 800cc5e:	d916      	bls.n	800cc8e <__ieee754_exp+0x4e>
 800cc60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cc64:	4323      	orrs	r3, r4
 800cc66:	ee10 2a10 	vmov	r2, s0
 800cc6a:	d007      	beq.n	800cc7c <__ieee754_exp+0x3c>
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	4620      	mov	r0, r4
 800cc70:	4629      	mov	r1, r5
 800cc72:	f7f3 fb23 	bl	80002bc <__adddf3>
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
 800cc7a:	e002      	b.n	800cc82 <__ieee754_exp+0x42>
 800cc7c:	b10e      	cbz	r6, 800cc82 <__ieee754_exp+0x42>
 800cc7e:	2400      	movs	r4, #0
 800cc80:	2500      	movs	r5, #0
 800cc82:	ecbd 8b04 	vpop	{d8-d9}
 800cc86:	ec45 4b10 	vmov	d0, r4, r5
 800cc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc8e:	a38e      	add	r3, pc, #568	; (adr r3, 800cec8 <__ieee754_exp+0x288>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	ee10 0a10 	vmov	r0, s0
 800cc98:	4629      	mov	r1, r5
 800cc9a:	f7f3 ff55 	bl	8000b48 <__aeabi_dcmpgt>
 800cc9e:	4607      	mov	r7, r0
 800cca0:	b130      	cbz	r0, 800ccb0 <__ieee754_exp+0x70>
 800cca2:	ecbd 8b04 	vpop	{d8-d9}
 800cca6:	2000      	movs	r0, #0
 800cca8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	f000 b971 	b.w	800cf92 <__math_oflow>
 800ccb0:	a387      	add	r3, pc, #540	; (adr r3, 800ced0 <__ieee754_exp+0x290>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	f7f3 ff27 	bl	8000b0c <__aeabi_dcmplt>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f000 808b 	beq.w	800cdda <__ieee754_exp+0x19a>
 800ccc4:	ecbd 8b04 	vpop	{d8-d9}
 800ccc8:	4638      	mov	r0, r7
 800ccca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccce:	f000 b957 	b.w	800cf80 <__math_uflow>
 800ccd2:	4b95      	ldr	r3, [pc, #596]	; (800cf28 <__ieee754_exp+0x2e8>)
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	f240 80ac 	bls.w	800ce32 <__ieee754_exp+0x1f2>
 800ccda:	4b94      	ldr	r3, [pc, #592]	; (800cf2c <__ieee754_exp+0x2ec>)
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d87c      	bhi.n	800cdda <__ieee754_exp+0x19a>
 800cce0:	4b93      	ldr	r3, [pc, #588]	; (800cf30 <__ieee754_exp+0x2f0>)
 800cce2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	ee10 0a10 	vmov	r0, s0
 800ccee:	4629      	mov	r1, r5
 800ccf0:	f7f3 fae2 	bl	80002b8 <__aeabi_dsub>
 800ccf4:	4b8f      	ldr	r3, [pc, #572]	; (800cf34 <__ieee754_exp+0x2f4>)
 800ccf6:	00f7      	lsls	r7, r6, #3
 800ccf8:	443b      	add	r3, r7
 800ccfa:	ed93 7b00 	vldr	d7, [r3]
 800ccfe:	f1c6 0a01 	rsb	sl, r6, #1
 800cd02:	4680      	mov	r8, r0
 800cd04:	4689      	mov	r9, r1
 800cd06:	ebaa 0a06 	sub.w	sl, sl, r6
 800cd0a:	eeb0 8a47 	vmov.f32	s16, s14
 800cd0e:	eef0 8a67 	vmov.f32	s17, s15
 800cd12:	ec53 2b18 	vmov	r2, r3, d8
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f7f3 facd 	bl	80002b8 <__aeabi_dsub>
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	4622      	mov	r2, r4
 800cd24:	462b      	mov	r3, r5
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fc7d 	bl	8000628 <__aeabi_dmul>
 800cd2e:	a36a      	add	r3, pc, #424	; (adr r3, 800ced8 <__ieee754_exp+0x298>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	f7f3 fc76 	bl	8000628 <__aeabi_dmul>
 800cd3c:	a368      	add	r3, pc, #416	; (adr r3, 800cee0 <__ieee754_exp+0x2a0>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f7f3 fab9 	bl	80002b8 <__aeabi_dsub>
 800cd46:	4632      	mov	r2, r6
 800cd48:	463b      	mov	r3, r7
 800cd4a:	f7f3 fc6d 	bl	8000628 <__aeabi_dmul>
 800cd4e:	a366      	add	r3, pc, #408	; (adr r3, 800cee8 <__ieee754_exp+0x2a8>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fab2 	bl	80002bc <__adddf3>
 800cd58:	4632      	mov	r2, r6
 800cd5a:	463b      	mov	r3, r7
 800cd5c:	f7f3 fc64 	bl	8000628 <__aeabi_dmul>
 800cd60:	a363      	add	r3, pc, #396	; (adr r3, 800cef0 <__ieee754_exp+0x2b0>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 faa7 	bl	80002b8 <__aeabi_dsub>
 800cd6a:	4632      	mov	r2, r6
 800cd6c:	463b      	mov	r3, r7
 800cd6e:	f7f3 fc5b 	bl	8000628 <__aeabi_dmul>
 800cd72:	a361      	add	r3, pc, #388	; (adr r3, 800cef8 <__ieee754_exp+0x2b8>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 faa0 	bl	80002bc <__adddf3>
 800cd7c:	4632      	mov	r2, r6
 800cd7e:	463b      	mov	r3, r7
 800cd80:	f7f3 fc52 	bl	8000628 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fa94 	bl	80002b8 <__aeabi_dsub>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	4620      	mov	r0, r4
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	f7f3 fc44 	bl	8000628 <__aeabi_dmul>
 800cda0:	ec41 0b19 	vmov	d9, r0, r1
 800cda4:	f1ba 0f00 	cmp.w	sl, #0
 800cda8:	d15d      	bne.n	800ce66 <__ieee754_exp+0x226>
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	f7f3 fa80 	bl	80002b8 <__aeabi_dsub>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	ec51 0b19 	vmov	r0, r1, d9
 800cdc0:	f7f3 fd5c 	bl	800087c <__aeabi_ddiv>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	462b      	mov	r3, r5
 800cdc8:	f7f3 fa76 	bl	80002b8 <__aeabi_dsub>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	4959      	ldr	r1, [pc, #356]	; (800cf38 <__ieee754_exp+0x2f8>)
 800cdd4:	f7f3 fa70 	bl	80002b8 <__aeabi_dsub>
 800cdd8:	e74d      	b.n	800cc76 <__ieee754_exp+0x36>
 800cdda:	4b58      	ldr	r3, [pc, #352]	; (800cf3c <__ieee754_exp+0x2fc>)
 800cddc:	4620      	mov	r0, r4
 800cdde:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cde2:	4629      	mov	r1, r5
 800cde4:	a346      	add	r3, pc, #280	; (adr r3, 800cf00 <__ieee754_exp+0x2c0>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f7f3 fc1d 	bl	8000628 <__aeabi_dmul>
 800cdee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdf2:	f7f3 fa63 	bl	80002bc <__adddf3>
 800cdf6:	f7f3 fec7 	bl	8000b88 <__aeabi_d2iz>
 800cdfa:	4682      	mov	sl, r0
 800cdfc:	f7f3 fbaa 	bl	8000554 <__aeabi_i2d>
 800ce00:	a341      	add	r3, pc, #260	; (adr r3, 800cf08 <__ieee754_exp+0x2c8>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	4606      	mov	r6, r0
 800ce08:	460f      	mov	r7, r1
 800ce0a:	f7f3 fc0d 	bl	8000628 <__aeabi_dmul>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4620      	mov	r0, r4
 800ce14:	4629      	mov	r1, r5
 800ce16:	f7f3 fa4f 	bl	80002b8 <__aeabi_dsub>
 800ce1a:	a33d      	add	r3, pc, #244	; (adr r3, 800cf10 <__ieee754_exp+0x2d0>)
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	4680      	mov	r8, r0
 800ce22:	4689      	mov	r9, r1
 800ce24:	4630      	mov	r0, r6
 800ce26:	4639      	mov	r1, r7
 800ce28:	f7f3 fbfe 	bl	8000628 <__aeabi_dmul>
 800ce2c:	ec41 0b18 	vmov	d8, r0, r1
 800ce30:	e76f      	b.n	800cd12 <__ieee754_exp+0xd2>
 800ce32:	4b43      	ldr	r3, [pc, #268]	; (800cf40 <__ieee754_exp+0x300>)
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d811      	bhi.n	800ce5c <__ieee754_exp+0x21c>
 800ce38:	a337      	add	r3, pc, #220	; (adr r3, 800cf18 <__ieee754_exp+0x2d8>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	ee10 0a10 	vmov	r0, s0
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fa3a 	bl	80002bc <__adddf3>
 800ce48:	4b3b      	ldr	r3, [pc, #236]	; (800cf38 <__ieee754_exp+0x2f8>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f7f3 fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 800ce50:	b138      	cbz	r0, 800ce62 <__ieee754_exp+0x222>
 800ce52:	4b39      	ldr	r3, [pc, #228]	; (800cf38 <__ieee754_exp+0x2f8>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	e70a      	b.n	800cc72 <__ieee754_exp+0x32>
 800ce5c:	f04f 0a00 	mov.w	sl, #0
 800ce60:	e75f      	b.n	800cd22 <__ieee754_exp+0xe2>
 800ce62:	4682      	mov	sl, r0
 800ce64:	e75d      	b.n	800cd22 <__ieee754_exp+0xe2>
 800ce66:	4632      	mov	r2, r6
 800ce68:	463b      	mov	r3, r7
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ce70:	f7f3 fa22 	bl	80002b8 <__aeabi_dsub>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	ec51 0b19 	vmov	r0, r1, d9
 800ce7c:	f7f3 fcfe 	bl	800087c <__aeabi_ddiv>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	ec51 0b18 	vmov	r0, r1, d8
 800ce88:	f7f3 fa16 	bl	80002b8 <__aeabi_dsub>
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	f7f3 fa12 	bl	80002b8 <__aeabi_dsub>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	2000      	movs	r0, #0
 800ce9a:	4927      	ldr	r1, [pc, #156]	; (800cf38 <__ieee754_exp+0x2f8>)
 800ce9c:	f7f3 fa0c 	bl	80002b8 <__aeabi_dsub>
 800cea0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800cea4:	4592      	cmp	sl, r2
 800cea6:	db02      	blt.n	800ceae <__ieee754_exp+0x26e>
 800cea8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ceac:	e6e3      	b.n	800cc76 <__ieee754_exp+0x36>
 800ceae:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ceb2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800cebc:	f7f3 fbb4 	bl	8000628 <__aeabi_dmul>
 800cec0:	e6d9      	b.n	800cc76 <__ieee754_exp+0x36>
 800cec2:	bf00      	nop
 800cec4:	f3af 8000 	nop.w
 800cec8:	fefa39ef 	.word	0xfefa39ef
 800cecc:	40862e42 	.word	0x40862e42
 800ced0:	d52d3051 	.word	0xd52d3051
 800ced4:	c0874910 	.word	0xc0874910
 800ced8:	72bea4d0 	.word	0x72bea4d0
 800cedc:	3e663769 	.word	0x3e663769
 800cee0:	c5d26bf1 	.word	0xc5d26bf1
 800cee4:	3ebbbd41 	.word	0x3ebbbd41
 800cee8:	af25de2c 	.word	0xaf25de2c
 800ceec:	3f11566a 	.word	0x3f11566a
 800cef0:	16bebd93 	.word	0x16bebd93
 800cef4:	3f66c16c 	.word	0x3f66c16c
 800cef8:	5555553e 	.word	0x5555553e
 800cefc:	3fc55555 	.word	0x3fc55555
 800cf00:	652b82fe 	.word	0x652b82fe
 800cf04:	3ff71547 	.word	0x3ff71547
 800cf08:	fee00000 	.word	0xfee00000
 800cf0c:	3fe62e42 	.word	0x3fe62e42
 800cf10:	35793c76 	.word	0x35793c76
 800cf14:	3dea39ef 	.word	0x3dea39ef
 800cf18:	8800759c 	.word	0x8800759c
 800cf1c:	7e37e43c 	.word	0x7e37e43c
 800cf20:	40862e41 	.word	0x40862e41
 800cf24:	7fefffff 	.word	0x7fefffff
 800cf28:	3fd62e42 	.word	0x3fd62e42
 800cf2c:	3ff0a2b1 	.word	0x3ff0a2b1
 800cf30:	0800e5c8 	.word	0x0800e5c8
 800cf34:	0800e5d8 	.word	0x0800e5d8
 800cf38:	3ff00000 	.word	0x3ff00000
 800cf3c:	0800e5b8 	.word	0x0800e5b8
 800cf40:	3defffff 	.word	0x3defffff

0800cf44 <with_errno>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	4616      	mov	r6, r2
 800cf4c:	f7fc fa7a 	bl	8009444 <__errno>
 800cf50:	4629      	mov	r1, r5
 800cf52:	6006      	str	r6, [r0, #0]
 800cf54:	4620      	mov	r0, r4
 800cf56:	bd70      	pop	{r4, r5, r6, pc}

0800cf58 <xflow>:
 800cf58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf5a:	4614      	mov	r4, r2
 800cf5c:	461d      	mov	r5, r3
 800cf5e:	b108      	cbz	r0, 800cf64 <xflow+0xc>
 800cf60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf64:	e9cd 2300 	strd	r2, r3, [sp]
 800cf68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 fb5a 	bl	8000628 <__aeabi_dmul>
 800cf74:	2222      	movs	r2, #34	; 0x22
 800cf76:	b003      	add	sp, #12
 800cf78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf7c:	f7ff bfe2 	b.w	800cf44 <with_errno>

0800cf80 <__math_uflow>:
 800cf80:	b508      	push	{r3, lr}
 800cf82:	2200      	movs	r2, #0
 800cf84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf88:	f7ff ffe6 	bl	800cf58 <xflow>
 800cf8c:	ec41 0b10 	vmov	d0, r0, r1
 800cf90:	bd08      	pop	{r3, pc}

0800cf92 <__math_oflow>:
 800cf92:	b508      	push	{r3, lr}
 800cf94:	2200      	movs	r2, #0
 800cf96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cf9a:	f7ff ffdd 	bl	800cf58 <xflow>
 800cf9e:	ec41 0b10 	vmov	d0, r0, r1
 800cfa2:	bd08      	pop	{r3, pc}

0800cfa4 <_init>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr

0800cfb0 <_fini>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	bf00      	nop
 800cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb6:	bc08      	pop	{r3}
 800cfb8:	469e      	mov	lr, r3
 800cfba:	4770      	bx	lr
